

Microchip MPLAB XC8 Assembler V2.20 build 20200408173844 
                                                                                               Wed Jul 08 16:11:28 2020

Microchip MPLAB XC8 C Compiler v2.20 (Free license) build 20200408173844 Og1 
     1                           	processor	18F4520
     2                           	fnconf	rparam,??,?,0
     3                           	pagewidth 120
     4                           	opt	flic
     5                           	psect	idataCOMRAM,global,class=CODE,delta=1,noexec
     6                           	psect	mediumconst,global,reloc=2,class=MEDIUMCONST,delta=1,noexec
     7                           	psect	cinit,global,reloc=2,class=CODE,delta=1
     8                           	psect	bssCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
     9                           	psect	dataCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    10                           	psect	cstackCOMRAM,global,class=COMRAM,space=1,delta=1,lowdata,noexec
    11                           	psect	text0,global,reloc=2,class=CODE,delta=1
    12                           	psect	text1,global,reloc=2,class=CODE,delta=1
    13                           	psect	text2,global,reloc=2,class=CODE,delta=1
    14                           	psect	text3,global,reloc=2,class=CODE,delta=1
    15                           	psect	text4,global,reloc=2,class=CODE,delta=1
    16                           	psect	text5,global,reloc=2,class=CODE,delta=1
    17                           	psect	text6,global,reloc=2,class=CODE,delta=1
    18                           	psect	text7,global,reloc=2,class=CODE,delta=1
    19                           	psect	text8,global,reloc=2,class=CODE,delta=1,group=1
    20                           	psect	text9,global,reloc=2,class=CODE,delta=1,group=1
    21                           	psect	text10,global,reloc=2,class=CODE,delta=1
    22                           	psect	text11,global,reloc=2,class=CODE,delta=1,group=1
    23                           	psect	text12,global,reloc=2,class=CODE,delta=1
    24                           	psect	text13,global,reloc=2,class=CODE,delta=1
    25                           	psect	text14,global,reloc=2,class=CODE,delta=1
    26                           	psect	text15,global,reloc=2,class=CODE,delta=1
    27                           	psect	text16,global,reloc=2,class=CODE,delta=1
    28                           	psect	text17,global,reloc=2,class=CODE,delta=1
    29                           	psect	text18,global,reloc=2,class=CODE,delta=1
    30                           	psect	text19,global,reloc=2,class=CODE,delta=1
    31                           	psect	text20,global,reloc=2,class=CODE,delta=1
    32                           	psect	text21,global,reloc=2,class=CODE,delta=1,group=1
    33                           	psect	text22,global,reloc=2,class=CODE,delta=1,group=1
    34                           	psect	text23,global,reloc=2,class=CODE,delta=1
    35                           	psect	text24,global,reloc=2,class=CODE,delta=1
    36                           	psect	text25,global,reloc=2,class=CODE,delta=1
    37                           	psect	text26,global,reloc=2,class=CODE,delta=1
    38                           	psect	text27,global,reloc=2,class=CODE,delta=1
    39                           	psect	text28,global,reloc=2,class=CODE,delta=1
    40                           	psect	text29,global,reloc=2,class=CODE,delta=1
    41                           	psect	text30,global,reloc=2,class=CODE,delta=1
    42                           	psect	text31,global,reloc=2,class=CODE,delta=1
    43                           	psect	text32,global,reloc=2,class=CODE,delta=1
    44                           	psect	text33,global,reloc=2,class=CODE,delta=1
    45                           	psect	text34,global,reloc=2,class=CODE,delta=1
    46                           	psect	text35,global,reloc=2,class=CODE,delta=1
    47                           	psect	text36,global,reloc=2,class=CODE,delta=1
    48                           	psect	text37,global,reloc=2,class=CODE,delta=1
    49                           	psect	intsave_regs,global,class=BIGRAM,space=1,delta=1,noexec
    50                           	psect	rparam,global,class=COMRAM,space=1,delta=1,noexec
    51                           	psect	idloc,global,abs,ovrld,class=IDLOC,space=5,delta=1,noexec
    52                           	psect	config,global,abs,ovrld,class=CONFIG,space=4,delta=1,noexec
    53  0000                     
    54                           ; Version 2.20
    55                           ; Generated 12/02/2020 GMT
    56                           ; 
    57                           ; Copyright Â© 2020, Microchip Technology Inc. and its subsidiaries ("Microchip")
    58                           ; All rights reserved.
    59                           ; 
    60                           ; This software is developed by Microchip Technology Inc. and its subsidiaries ("Microch
      +                          ip").
    61                           ; 
    62                           ; Redistribution and use in source and binary forms, with or without modification, are
    63                           ; permitted provided that the following conditions are met:
    64                           ; 
    65                           ;     1. Redistributions of source code must retain the above copyright notice, this lis
      +                          t of
    66                           ;        conditions and the following disclaimer.
    67                           ; 
    68                           ;     2. Redistributions in binary form must reproduce the above copyright notice, this 
      +                          list
    69                           ;        of conditions and the following disclaimer in the documentation and/or other
    70                           ;        materials provided with the distribution.
    71                           ; 
    72                           ;     3. Microchip's name may not be used to endorse or promote products derived from th
      +                          is
    73                           ;        software without specific prior written permission.
    74                           ; 
    75                           ; THIS SOFTWARE IS PROVIDED BY MICROCHIP "AS IS" AND ANY EXPRESS OR IMPLIED WARRANTIES,
    76                           ; INCLUDING, BUT NOT LIMITED TO, THE IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS F
      +                          OR
    77                           ; PURPOSE ARE DISCLAIMED.  IN NO EVENT SHALL MICROCHIP BE LIABLE FOR ANY DIRECT, INDIREC
      +                          T,
    78                           ; INCIDENTAL, SPECIAL, EXEMPLARY, OR CONSEQUENTIAL DAMAGES (INCLUDING BUT NOT LIMITED TO
    79                           ; PROCUREMENT OF SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA OR PROFITS; OR BUSINESS
    80                           ; INTERRUPTION) HOWSOEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN CONTRACT, ST
      +                          RICT
    81                           ; LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE) ARISING IN ANY WAY OUT OF THE U
      +                          SE OF
    82                           ; THIS SOFTWARE, EVEN IF ADVISED OF THE POSSIBILITY OF SUCH DAMAGE.
    83                           ; 
    84                           ; 
    85                           ; Code-generator required, PIC18F4520 Definitions
    86                           ; 
    87                           ; SFR Addresses
    88  0000                     
    89                           	psect	idataCOMRAM
    90  00711E                     __pidataCOMRAM:
    91                           	callstack 0
    92                           
    93                           ;initializer for _msgs
    94  00711E  6D                 	db	low STR_1
    95  00711F  7F                 	db	high STR_1
    96  007120  A0                 	db	low STR_2
    97  007121  7F                 	db	high STR_2
    98  007122  8F                 	db	low STR_3
    99  007123  7F                 	db	high STR_3
   100  007124  E4                 	db	low STR_4
   101  007125  7F                 	db	high STR_4
   102  007126  7E                 	db	low STR_5
   103  007127  7F                 	db	high STR_5
   104  007128  29                 	db	low STR_6
   105  007129  7F                 	db	high STR_6
   106  00712A  3A                 	db	low STR_7
   107  00712B  7F                 	db	high STR_7
   108  00712C  C2                 	db	low STR_8
   109  00712D  7F                 	db	high STR_8
   110  00712E  4B                 	db	low STR_9
   111  00712F  7F                 	db	high STR_9
   112  007130  E5                 	db	low STR_10
   113  007131  7E                 	db	high STR_10
   114  007132  18                 	db	low STR_11
   115  007133  7F                 	db	high STR_11
   116  007134  D3                 	db	low STR_12
   117  007135  7F                 	db	high STR_12
   118  007136  5C                 	db	low STR_13
   119  007137  7F                 	db	high STR_13
   120  007138  F6                 	db	low STR_14
   121  007139  7E                 	db	high STR_14
   122  00713A  07                 	db	low STR_15
   123  00713B  7F                 	db	high STR_15
   124  00713C  B1                 	db	low STR_16
   125  00713D  7F                 	db	high STR_16
   126  00713E  90                 	db	low STR_17
   127  00713F  7E                 	db	high STR_17
   128  007140  5D                 	db	low STR_18
   129  007141  7E                 	db	high STR_18
   130  007142  6E                 	db	low STR_19
   131  007143  7E                 	db	high STR_19
   132  007144  7F                 	db	low STR_20
   133  007145  7E                 	db	high STR_20
   134                           
   135                           	psect	mediumconst
   136  007E4C                     __pmediumconst:
   137                           	callstack 0
   138  007E4C  00                 	db	0
   139  007E4D                     _valor@ssd$F238:
   140                           	callstack 0
   141  007E4D  3F                 	db	63
   142  007E4E  06                 	db	6
   143  007E4F  5B                 	db	91
   144  007E50  4F                 	db	79
   145  007E51  66                 	db	102
   146  007E52  6D                 	db	109
   147  007E53  7D                 	db	125
   148  007E54  07                 	db	7
   149  007E55  7F                 	db	127
   150  007E56  6F                 	db	111
   151  007E57  77                 	db	119
   152  007E58  7C                 	db	124
   153  007E59  39                 	db	57
   154  007E5A  5E                 	db	94
   155  007E5B  79                 	db	121
   156  007E5C  71                 	db	113
   157  007E5D                     __end_of_valor@ssd$F238:
   158                           	callstack 0
   159  007E5D                     STR_18:
   160  007E5D  54                 	db	84	;'T'
   161  007E5E  69                 	db	105	;'i'
   162  007E5F  6D                 	db	109	;'m'
   163  007E60  65                 	db	101	;'e'
   164  007E61  20                 	db	32
   165  007E62  20                 	db	32
   166  007E63  20                 	db	32
   167  007E64  20                 	db	32
   168  007E65  20                 	db	32
   169  007E66  20                 	db	32
   170  007E67  20                 	db	32
   171  007E68  20                 	db	32
   172  007E69  20                 	db	32
   173  007E6A  20                 	db	32
   174  007E6B  20                 	db	32
   175  007E6C  20                 	db	32
   176  007E6D  00                 	db	0
   177  007E6E                     STR_19:
   178  007E6E  5A                 	db	90	;'Z'
   179  007E6F  65                 	db	101	;'e'
   180  007E70  69                 	db	105	;'i'
   181  007E71  74                 	db	116	;'t'
   182  007E72  20                 	db	32
   183  007E73  20                 	db	32
   184  007E74  20                 	db	32
   185  007E75  20                 	db	32
   186  007E76  20                 	db	32
   187  007E77  20                 	db	32
   188  007E78  20                 	db	32
   189  007E79  20                 	db	32
   190  007E7A  20                 	db	32
   191  007E7B  20                 	db	32
   192  007E7C  20                 	db	32
   193  007E7D  20                 	db	32
   194  007E7E  00                 	db	0
   195  007E7F                     STR_20:
   196  007E7F  48                 	db	72	;'H'
   197  007E80  65                 	db	101	;'e'
   198  007E81  75                 	db	117	;'u'
   199  007E82  72                 	db	114	;'r'
   200  007E83  65                 	db	101	;'e'
   201  007E84  20                 	db	32
   202  007E85  20                 	db	32
   203  007E86  20                 	db	32
   204  007E87  20                 	db	32
   205  007E88  20                 	db	32
   206  007E89  20                 	db	32
   207  007E8A  20                 	db	32
   208  007E8B  20                 	db	32
   209  007E8C  20                 	db	32
   210  007E8D  20                 	db	32
   211  007E8E  20                 	db	32
   212  007E8F  00                 	db	0
   213  007E90                     STR_17:
   214  007E90  48                 	db	72	;'H'
   215  007E91  6F                 	db	111	;'o'
   216  007E92  72                 	db	114	;'r'
   217  007E93  61                 	db	97	;'a'
   218  007E94  73                 	db	115	;'s'
   219  007E95  20                 	db	32
   220  007E96  20                 	db	32
   221  007E97  20                 	db	32
   222  007E98  20                 	db	32
   223  007E99  20                 	db	32
   224  007E9A  20                 	db	32
   225  007E9B  20                 	db	32
   226  007E9C  20                 	db	32
   227  007E9D  20                 	db	32
   228  007E9E  20                 	db	32
   229  007E9F  20                 	db	32
   230  007EA0  00                 	db	0
   231  007EA1                     STR_27:
   232  007EA1  45                 	db	69	;'E'
   233  007EA2  6E                 	db	110	;'n'
   234  007EA3  67                 	db	103	;'g'
   235  007EA4  6C                 	db	108	;'l'
   236  007EA5  69                 	db	105	;'i'
   237  007EA6  73                 	db	115	;'s'
   238  007EA7  68                 	db	104	;'h'
   239  007EA8  20                 	db	32
   240  007EA9  20                 	db	32
   241  007EAA  20                 	db	32
   242  007EAB  20                 	db	32
   243  007EAC  20                 	db	32
   244  007EAD  20                 	db	32
   245  007EAE  20                 	db	32
   246  007EAF  20                 	db	32
   247  007EB0  20                 	db	32
   248  007EB1  00                 	db	0
   249  007EB2                     STR_28:
   250  007EB2  44                 	db	68	;'D'
   251  007EB3  65                 	db	101	;'e'
   252  007EB4  75                 	db	117	;'u'
   253  007EB5  74                 	db	116	;'t'
   254  007EB6  73                 	db	115	;'s'
   255  007EB7  63                 	db	99	;'c'
   256  007EB8  68                 	db	104	;'h'
   257  007EB9  65                 	db	101	;'e'
   258  007EBA  20                 	db	32
   259  007EBB  20                 	db	32
   260  007EBC  20                 	db	32
   261  007EBD  20                 	db	32
   262  007EBE  20                 	db	32
   263  007EBF  20                 	db	32
   264  007EC0  20                 	db	32
   265  007EC1  20                 	db	32
   266  007EC2  00                 	db	0
   267  007EC3                     STR_29:
   268  007EC3  46                 	db	70	;'F'
   269  007EC4  72                 	db	114	;'r'
   270  007EC5  61                 	db	97	;'a'
   271  007EC6  6E                 	db	110	;'n'
   272  007EC7  63                 	db	99	;'c'
   273  007EC8  61                 	db	97	;'a'
   274  007EC9  69                 	db	105	;'i'
   275  007ECA  73                 	db	115	;'s'
   276  007ECB  20                 	db	32
   277  007ECC  20                 	db	32
   278  007ECD  20                 	db	32
   279  007ECE  20                 	db	32
   280  007ECF  20                 	db	32
   281  007ED0  20                 	db	32
   282  007ED1  20                 	db	32
   283  007ED2  20                 	db	32
   284  007ED3  00                 	db	0
   285  007ED4                     STR_26:
   286  007ED4  50                 	db	80	;'P'
   287  007ED5  6F                 	db	111	;'o'
   288  007ED6  72                 	db	114	;'r'
   289  007ED7  74                 	db	116	;'t'
   290  007ED8  75                 	db	117	;'u'
   291  007ED9  67                 	db	103	;'g'
   292  007EDA  75                 	db	117	;'u'
   293  007EDB  65                 	db	101	;'e'
   294  007EDC  73                 	db	115	;'s'
   295  007EDD  20                 	db	32
   296  007EDE  20                 	db	32
   297  007EDF  20                 	db	32
   298  007EE0  20                 	db	32
   299  007EE1  20                 	db	32
   300  007EE2  20                 	db	32
   301  007EE3  20                 	db	32
   302  007EE4  00                 	db	0
   303  007EE5                     STR_10:
   304  007EE5  46                 	db	70	;'F'
   305  007EE6  6C                 	db	108	;'l'
   306  007EE7  61                 	db	97	;'a'
   307  007EE8  67                 	db	103	;'g'
   308  007EE9  20                 	db	32
   309  007EEA  76                 	db	118	;'v'
   310  007EEB  61                 	db	97	;'a'
   311  007EEC  6C                 	db	108	;'l'
   312  007EED  75                 	db	117	;'u'
   313  007EEE  65                 	db	101	;'e'
   314  007EEF  20                 	db	32
   315  007EF0  20                 	db	32
   316  007EF1  20                 	db	32
   317  007EF2  20                 	db	32
   318  007EF3  20                 	db	32
   319  007EF4  20                 	db	32
   320  007EF5  00                 	db	0
   321  007EF6                     STR_14:
   322  007EF6  43                 	db	67	;'C'
   323  007EF7  68                 	db	104	;'h'
   324  007EF8  61                 	db	97	;'a'
   325  007EF9  6E                 	db	110	;'n'
   326  007EFA  67                 	db	103	;'g'
   327  007EFB  65                 	db	101	;'e'
   328  007EFC  20                 	db	32
   329  007EFD  74                 	db	116	;'t'
   330  007EFE  69                 	db	105	;'i'
   331  007EFF  6D                 	db	109	;'m'
   332  007F00  65                 	db	101	;'e'
   333  007F01  20                 	db	32
   334  007F02  20                 	db	32
   335  007F03  20                 	db	32
   336  007F04  20                 	db	32
   337  007F05  20                 	db	32
   338  007F06  00                 	db	0
   339  007F07                     STR_15:
   340  007F07  5A                 	db	90	;'Z'
   341  007F08  65                 	db	101	;'e'
   342  007F09  69                 	db	105	;'i'
   343  007F0A  74                 	db	116	;'t'
   344  007F0B  20                 	db	32
   345  007F0C  61                 	db	97	;'a'
   346  007F0D  6E                 	db	110	;'n'
   347  007F0E  64                 	db	100	;'d'
   348  007F0F  65                 	db	101	;'e'
   349  007F10  72                 	db	114	;'r'
   350  007F11  6E                 	db	110	;'n'
   351  007F12  20                 	db	32
   352  007F13  20                 	db	32
   353  007F14  20                 	db	32
   354  007F15  20                 	db	32
   355  007F16  20                 	db	32
   356  007F17  00                 	db	0
   357  007F18                     STR_11:
   358  007F18  46                 	db	70	;'F'
   359  007F19  6C                 	db	108	;'l'
   360  007F1A  61                 	db	97	;'a'
   361  007F1B  67                 	db	103	;'g'
   362  007F1C  67                 	db	103	;'g'
   363  007F1D  65                 	db	101	;'e'
   364  007F1E  6E                 	db	110	;'n'
   365  007F1F  77                 	db	119	;'w'
   366  007F20  65                 	db	101	;'e'
   367  007F21  72                 	db	114	;'r'
   368  007F22  74                 	db	116	;'t'
   369  007F23  20                 	db	32
   370  007F24  20                 	db	32
   371  007F25  20                 	db	32
   372  007F26  20                 	db	32
   373  007F27  20                 	db	32
   374  007F28  00                 	db	0
   375  007F29                     STR_6:
   376  007F29  43                 	db	67	;'C'
   377  007F2A  68                 	db	104	;'h'
   378  007F2B  61                 	db	97	;'a'
   379  007F2C  6E                 	db	110	;'n'
   380  007F2D  67                 	db	103	;'g'
   381  007F2E  65                 	db	101	;'e'
   382  007F2F  20                 	db	32
   383  007F30  61                 	db	97	;'a'
   384  007F31  6C                 	db	108	;'l'
   385  007F32  61                 	db	97	;'a'
   386  007F33  72                 	db	114	;'r'
   387  007F34  6D                 	db	109	;'m'
   388  007F35  20                 	db	32
   389  007F36  20                 	db	32
   390  007F37  20                 	db	32
   391  007F38  20                 	db	32
   392  007F39  00                 	db	0
   393  007F3A                     STR_7:
   394  007F3A  41                 	db	65	;'A'
   395  007F3B  6C                 	db	108	;'l'
   396  007F3C  61                 	db	97	;'a'
   397  007F3D  72                 	db	114	;'r'
   398  007F3E  6D                 	db	109	;'m'
   399  007F3F  20                 	db	32
   400  007F40  61                 	db	97	;'a'
   401  007F41  6E                 	db	110	;'n'
   402  007F42  64                 	db	100	;'d'
   403  007F43  65                 	db	101	;'e'
   404  007F44  72                 	db	114	;'r'
   405  007F45  6E                 	db	110	;'n'
   406  007F46  20                 	db	32
   407  007F47  20                 	db	32
   408  007F48  20                 	db	32
   409  007F49  20                 	db	32
   410  007F4A  00                 	db	0
   411  007F4B                     STR_9:
   412  007F4B  56                 	db	86	;'V'
   413  007F4C  61                 	db	97	;'a'
   414  007F4D  6C                 	db	108	;'l'
   415  007F4E  6F                 	db	111	;'o'
   416  007F4F  72                 	db	114	;'r'
   417  007F50  20                 	db	32
   418  007F51  64                 	db	100	;'d'
   419  007F52  61                 	db	97	;'a'
   420  007F53  20                 	db	32
   421  007F54  66                 	db	102	;'f'
   422  007F55  6C                 	db	108	;'l'
   423  007F56  61                 	db	97	;'a'
   424  007F57  67                 	db	103	;'g'
   425  007F58  20                 	db	32
   426  007F59  20                 	db	32
   427  007F5A  20                 	db	32
   428  007F5B  00                 	db	0
   429  007F5C                     STR_13:
   430  007F5C  41                 	db	65	;'A'
   431  007F5D  6C                 	db	108	;'l'
   432  007F5E  74                 	db	116	;'t'
   433  007F5F  65                 	db	101	;'e'
   434  007F60  72                 	db	114	;'r'
   435  007F61  61                 	db	97	;'a'
   436  007F62  72                 	db	114	;'r'
   437  007F63  20                 	db	32
   438  007F64  74                 	db	116	;'t'
   439  007F65  65                 	db	101	;'e'
   440  007F66  6D                 	db	109	;'m'
   441  007F67  70                 	db	112	;'p'
   442  007F68  6F                 	db	111	;'o'
   443  007F69  20                 	db	32
   444  007F6A  20                 	db	32
   445  007F6B  20                 	db	32
   446  007F6C  00                 	db	0
   447  007F6D                     STR_1:
   448  007F6D  41                 	db	65	;'A'
   449  007F6E  6C                 	db	108	;'l'
   450  007F6F  74                 	db	116	;'t'
   451  007F70  65                 	db	101	;'e'
   452  007F71  72                 	db	114	;'r'
   453  007F72  61                 	db	97	;'a'
   454  007F73  72                 	db	114	;'r'
   455  007F74  20                 	db	32
   456  007F75  69                 	db	105	;'i'
   457  007F76  64                 	db	100	;'d'
   458  007F77  69                 	db	105	;'i'
   459  007F78  6F                 	db	111	;'o'
   460  007F79  6D                 	db	109	;'m'
   461  007F7A  61                 	db	97	;'a'
   462  007F7B  20                 	db	32
   463  007F7C  20                 	db	32
   464  007F7D  00                 	db	0
   465  007F7E                     STR_5:
   466  007F7E  41                 	db	65	;'A'
   467  007F7F  6C                 	db	108	;'l'
   468  007F80  74                 	db	116	;'t'
   469  007F81  65                 	db	101	;'e'
   470  007F82  72                 	db	114	;'r'
   471  007F83  61                 	db	97	;'a'
   472  007F84  72                 	db	114	;'r'
   473  007F85  20                 	db	32
   474  007F86  61                 	db	97	;'a'
   475  007F87  6C                 	db	108	;'l'
   476  007F88  61                 	db	97	;'a'
   477  007F89  72                 	db	114	;'r'
   478  007F8A  6D                 	db	109	;'m'
   479  007F8B  65                 	db	101	;'e'
   480  007F8C  20                 	db	32
   481  007F8D  20                 	db	32
   482  007F8E  00                 	db	0
   483  007F8F                     STR_3:
   484  007F8F  53                 	db	83	;'S'
   485  007F90  70                 	db	112	;'p'
   486  007F91  72                 	db	114	;'r'
   487  007F92  61                 	db	97	;'a'
   488  007F93  63                 	db	99	;'c'
   489  007F94  68                 	db	104	;'h'
   490  007F95  65                 	db	101	;'e'
   491  007F96  20                 	db	32
   492  007F97  61                 	db	97	;'a'
   493  007F98  6E                 	db	110	;'n'
   494  007F99  64                 	db	100	;'d'
   495  007F9A  65                 	db	101	;'e'
   496  007F9B  72                 	db	114	;'r'
   497  007F9C  6E                 	db	110	;'n'
   498  007F9D  20                 	db	32
   499  007F9E  20                 	db	32
   500  007F9F  00                 	db	0
   501  007FA0                     STR_2:
   502  007FA0  43                 	db	67	;'C'
   503  007FA1  68                 	db	104	;'h'
   504  007FA2  61                 	db	97	;'a'
   505  007FA3  6E                 	db	110	;'n'
   506  007FA4  67                 	db	103	;'g'
   507  007FA5  65                 	db	101	;'e'
   508  007FA6  20                 	db	32
   509  007FA7  6C                 	db	108	;'l'
   510  007FA8  61                 	db	97	;'a'
   511  007FA9  6E                 	db	110	;'n'
   512  007FAA  67                 	db	103	;'g'
   513  007FAB  75                 	db	117	;'u'
   514  007FAC  61                 	db	97	;'a'
   515  007FAD  67                 	db	103	;'g'
   516  007FAE  65                 	db	101	;'e'
   517  007FAF  20                 	db	32
   518  007FB0  00                 	db	0
   519  007FB1                     STR_16:
   520  007FB1  43                 	db	67	;'C'
   521  007FB2  68                 	db	104	;'h'
   522  007FB3  61                 	db	97	;'a'
   523  007FB4  6E                 	db	110	;'n'
   524  007FB5  67                 	db	103	;'g'
   525  007FB6  65                 	db	101	;'e'
   526  007FB7  72                 	db	114	;'r'
   527  007FB8  20                 	db	32
   528  007FB9  6C                 	db	108	;'l'
   529  007FBA  65                 	db	101	;'e'
   530  007FBB  20                 	db	32
   531  007FBC  74                 	db	116	;'t'
   532  007FBD  65                 	db	101	;'e'
   533  007FBE  6D                 	db	109	;'m'
   534  007FBF  70                 	db	112	;'p'
   535  007FC0  20                 	db	32
   536  007FC1  00                 	db	0
   537  007FC2                     STR_8:
   538  007FC2  43                 	db	67	;'C'
   539  007FC3  68                 	db	104	;'h'
   540  007FC4  61                 	db	97	;'a'
   541  007FC5  6E                 	db	110	;'n'
   542  007FC6  67                 	db	103	;'g'
   543  007FC7  65                 	db	101	;'e'
   544  007FC8  72                 	db	114	;'r'
   545  007FC9  20                 	db	32
   546  007FCA  44                 	db	68	;'D'
   547  007FCB  20                 	db	32
   548  007FCC  61                 	db	97	;'a'
   549  007FCD  6C                 	db	108	;'l'
   550  007FCE  61                 	db	97	;'a'
   551  007FCF  72                 	db	114	;'r'
   552  007FD0  6D                 	db	109	;'m'
   553  007FD1  65                 	db	101	;'e'
   554  007FD2  00                 	db	0
   555  007FD3                     STR_12:
   556  007FD3  56                 	db	86	;'V'
   557  007FD4  61                 	db	97	;'a'
   558  007FD5  6C                 	db	108	;'l'
   559  007FD6  65                 	db	101	;'e'
   560  007FD7  75                 	db	117	;'u'
   561  007FD8  72                 	db	114	;'r'
   562  007FD9  20                 	db	32
   563  007FDA  64                 	db	100	;'d'
   564  007FDB  75                 	db	117	;'u'
   565  007FDC  20                 	db	32
   566  007FDD  73                 	db	115	;'s'
   567  007FDE  69                 	db	105	;'i'
   568  007FDF  67                 	db	103	;'g'
   569  007FE0  6E                 	db	110	;'n'
   570  007FE1  61                 	db	97	;'a'
   571  007FE2  6C                 	db	108	;'l'
   572  007FE3  00                 	db	0
   573  007FE4                     STR_4:
   574  007FE4  43                 	db	67	;'C'
   575  007FE5  68                 	db	104	;'h'
   576  007FE6  61                 	db	97	;'a'
   577  007FE7  6E                 	db	110	;'n'
   578  007FE8  67                 	db	103	;'g'
   579  007FE9  65                 	db	101	;'e'
   580  007FEA  72                 	db	114	;'r'
   581  007FEB  20                 	db	32
   582  007FEC  6C                 	db	108	;'l'
   583  007FED  61                 	db	97	;'a'
   584  007FEE  20                 	db	32
   585  007FEF  6C                 	db	108	;'l'
   586  007FF0  61                 	db	97	;'a'
   587  007FF1  6E                 	db	110	;'n'
   588  007FF2  67                 	db	103	;'g'
   589  007FF3  75                 	db	117	;'u'
   590  007FF4  00                 	db	0
   591  007FF5                     STR_24:
   592  007FF5  20                 	db	32
   593  007FF6  50                 	db	80	;'P'
   594  007FF7  32                 	db	50	;'2'
   595  007FF8  20                 	db	32
   596  007FF9  00                 	db	0
   597  007FFA                     STR_23:
   598  007FFA  50                 	db	80	;'P'
   599  007FFB  31                 	db	49	;'1'
   600  007FFC  20                 	db	32
   601  007FFD  00                 	db	0
   602  007FFE  00                 	db	0	; dummy byte at the end
   603  0000                     
   604                           ; #config settings
   605                           
   606                           	psect	cinit
   607  0071A4                     __pcinit:
   608                           	callstack 0
   609  0071A4                     start_initialization:
   610                           	callstack 0
   611  0071A4                     __initialization:
   612                           	callstack 0
   613                           
   614                           ; Initialize objects allocated to COMRAM (40 bytes)
   615                           ; load TBLPTR registers with __pidataCOMRAM
   616  0071A4  0E1E               	movlw	low __pidataCOMRAM
   617  0071A6  6EF6               	movwf	tblptrl,c
   618  0071A8  0E71               	movlw	high __pidataCOMRAM
   619  0071AA  6EF7               	movwf	tblptrh,c
   620  0071AC  0E00               	movlw	low (__pidataCOMRAM shr (0+16))
   621  0071AE  6EF8               	movwf	tblptru,c
   622  0071B0  EE00  F001         	lfsr	0,__pdataCOMRAM
   623  0071B4  EE10 F028          	lfsr	1,40
   624  0071B8                     copy_data0:
   625  0071B8  0009               	tblrd		*+
   626  0071BA  CFF5 FFEE          	movff	tablat,postinc0
   627  0071BE  50E5               	movf	postdec1,w,c
   628  0071C0  50E1               	movf	fsr1l,w,c
   629  0071C2  E1FA               	bnz	copy_data0
   630                           
   631                           ; Clear objects allocated to COMRAM (18 bytes)
   632  0071C4  EE00  F046         	lfsr	0,__pbssCOMRAM
   633  0071C8  0E12               	movlw	18
   634  0071CA                     clear_0:
   635  0071CA  6AEE               	clrf	postinc0,c
   636  0071CC  06E8               	decf	wreg,f,c
   637  0071CE  E1FD               	bnz	clear_0
   638  0071D0                     end_of_initialization:
   639                           	callstack 0
   640  0071D0                     __end_of__initialization:
   641                           	callstack 0
   642  0071D0  0E00               	movlw	low (__Lmediumconst shr (0+16))
   643  0071D2  6EF8               	movwf	tblptru,c
   644  0071D4  0100               	movlb	0
   645  0071D6  EFB8  F038         	goto	_main	;jump to C main() function
   646                           
   647                           	psect	bssCOMRAM
   648  000046                     __pbssCOMRAM:
   649                           	callstack 0
   650  000046                     _alarmLevel1:
   651                           	callstack 0
   652  000046                     	ds	2
   653  000048                     _alarmLevel:
   654                           	callstack 0
   655  000048                     	ds	2
   656  00004A                     _time:
   657                           	callstack 0
   658  00004A                     	ds	2
   659  00004C                     	ds	2
   660  00004E                     _key_ant:
   661                           	callstack 0
   662  00004E                     	ds	2
   663  000050                     _language:
   664                           	callstack 0
   665  000050                     	ds	1
   666  000051                     _state:
   667                           	callstack 0
   668  000051                     	ds	1
   669  000052                     _v3:
   670                           	callstack 0
   671  000052                     	ds	1
   672  000053                     _v2:
   673                           	callstack 0
   674  000053                     	ds	1
   675  000054                     _v1:
   676                           	callstack 0
   677  000054                     	ds	1
   678  000055                     _v0:
   679                           	callstack 0
   680  000055                     	ds	1
   681  000056                     _display:
   682                           	callstack 0
   683  000056                     	ds	1
   684  000057                     _de:
   685                           	callstack 0
   686  000057                     	ds	1
   687                           
   688                           	psect	dataCOMRAM
   689  000001                     __pdataCOMRAM:
   690                           	callstack 0
   691  000001                     _msgs:
   692                           	callstack 0
   693  000001                     	ds	40
   694                           
   695                           	psect	cstackCOMRAM
   696  000029                     __pcstackCOMRAM:
   697                           	callstack 0
   698  000029                     ?_getTime:
   699                           	callstack 0
   700  000029                     ?_getAlarmLevel:
   701                           	callstack 0
   702  000029                     ?_adcRead1:
   703                           	callstack 0
   704  000029                     ?_adcRead2:
   705                           	callstack 0
   706  000029                     ?_eventRead:
   707                           	callstack 0
   708  000029                     ?___wmul:
   709                           	callstack 0
   710  000029                     ?___awdiv:
   711                           	callstack 0
   712  000029                     ?___lwdiv:
   713                           	callstack 0
   714  000029                     ?___aldiv:
   715                           	callstack 0
   716  000029                     Delay40us@i:
   717                           	callstack 0
   718  000029                     setState@newState:
   719                           	callstack 0
   720  000029                     setLanguage@newLanguage:
   721                           	callstack 0
   722  000029                     ___wmul@multiplier:
   723                           	callstack 0
   724  000029                     ___awdiv@dividend:
   725                           	callstack 0
   726  000029                     ___lwdiv@dividend:
   727                           	callstack 0
   728  000029                     ___aldiv@dividend:
   729                           	callstack 0
   730                           
   731                           ; 4 bytes @ 0x0
   732  000029                     	ds	1
   733  00002A                     Delay2ms@i:
   734                           	callstack 0
   735  00002A                     lcdData@valor:
   736                           	callstack 0
   737                           
   738                           ; 1 bytes @ 0x1
   739  00002A                     	ds	1
   740  00002B                     ??_adcRead1:
   741  00002B                     ??_adcRead2:
   742  00002B                     ??_eventRead:
   743  00002B                     lcdCommand@cmd:
   744                           	callstack 0
   745  00002B                     lcdString@msg:
   746                           	callstack 0
   747  00002B                     timerReset@tempo:
   748                           	callstack 0
   749  00002B                     setTime@newTime:
   750                           	callstack 0
   751  00002B                     setAlarmLevel@newAlarmLevel:
   752                           	callstack 0
   753  00002B                     ___wmul@multiplicand:
   754                           	callstack 0
   755  00002B                     ___awdiv@divisor:
   756                           	callstack 0
   757  00002B                     ___lwdiv@divisor:
   758                           	callstack 0
   759                           
   760                           ; 2 bytes @ 0x2
   761  00002B                     	ds	1
   762  00002C                     eventRead@ev:
   763                           	callstack 0
   764                           
   765                           ; 2 bytes @ 0x3
   766  00002C                     	ds	1
   767  00002D                     ??_lcdString:
   768  00002D                     ___awdiv@counter:
   769                           	callstack 0
   770  00002D                     timerReset@ciclos:
   771                           	callstack 0
   772  00002D                     ___wmul@product:
   773                           	callstack 0
   774  00002D                     ___lwdiv@quotient:
   775                           	callstack 0
   776  00002D                     ___aldiv@divisor:
   777                           	callstack 0
   778                           
   779                           ; 4 bytes @ 0x4
   780  00002D                     	ds	1
   781  00002E                     ___awdiv@sign:
   782                           	callstack 0
   783  00002E                     eventRead@key:
   784                           	callstack 0
   785  00002E                     adcRead1@ADvalor:
   786                           	callstack 0
   787  00002E                     adcRead2@ADvalor:
   788                           	callstack 0
   789                           
   790                           ; 2 bytes @ 0x5
   791  00002E                     	ds	1
   792  00002F                     ___lwdiv@counter:
   793                           	callstack 0
   794  00002F                     lcdString@i:
   795                           	callstack 0
   796  00002F                     ___awdiv@quotient:
   797                           	callstack 0
   798                           
   799                           ; 2 bytes @ 0x6
   800  00002F                     	ds	1
   801  000030                     ??_pwmSet1:
   802                           
   803                           ; 1 bytes @ 0x7
   804  000030                     	ds	1
   805  000031                     ?___awmod:
   806                           	callstack 0
   807  000031                     ___aldiv@counter:
   808                           	callstack 0
   809  000031                     ___awmod@dividend:
   810                           	callstack 0
   811                           
   812                           ; 2 bytes @ 0x8
   813  000031                     	ds	1
   814  000032                     pwmSet1@porcento:
   815                           	callstack 0
   816  000032                     ___aldiv@sign:
   817                           	callstack 0
   818                           
   819                           ; 1 bytes @ 0x9
   820  000032                     	ds	1
   821  000033                     pwmSet1@val:
   822                           	callstack 0
   823  000033                     ___awmod@divisor:
   824                           	callstack 0
   825  000033                     ___aldiv@quotient:
   826                           	callstack 0
   827                           
   828                           ; 4 bytes @ 0xA
   829  000033                     	ds	2
   830  000035                     ___awmod@counter:
   831                           	callstack 0
   832                           
   833                           ; 1 bytes @ 0xC
   834  000035                     	ds	1
   835  000036                     ___awmod@sign:
   836                           	callstack 0
   837                           
   838                           ; 1 bytes @ 0xD
   839  000036                     	ds	1
   840  000037                     lcdInt@val:
   841                           	callstack 0
   842  000037                     lcdIntAlarme@val1:
   843                           	callstack 0
   844  000037                     pwmFrequency@freq:
   845                           	callstack 0
   846                           
   847                           ; 2 bytes @ 0xE
   848  000037                     	ds	2
   849  000039                     ??_teste1:
   850  000039                     outputPrint@numTela:
   851                           	callstack 0
   852                           
   853                           ; 2 bytes @ 0x10
   854  000039                     	ds	2
   855  00003B                     outputPrint@idioma:
   856                           	callstack 0
   857                           
   858                           ; 2 bytes @ 0x12
   859  00003B                     	ds	2
   860  00003D                     ??_outputPrint:
   861                           
   862                           ; 1 bytes @ 0x14
   863  00003D                     	ds	4
   864  000041                     ??_smLoop:
   865                           
   866                           ; 1 bytes @ 0x18
   867  000041                     	ds	2
   868  000043                     _smLoop$1211:
   869                           	callstack 0
   870                           
   871                           ; 2 bytes @ 0x1A
   872  000043                     	ds	2
   873  000045                     smLoop@evento:
   874                           	callstack 0
   875                           
   876                           ; 1 bytes @ 0x1C
   877  000045                     	ds	1
   878  000046                     
   879                           ; 1 bytes @ 0x1D
   880 ;;
   881 ;;Main: autosize = 0, tempsize = 0, incstack = 0, save=0
   882 ;;
   883 ;; *************** function _main *****************
   884 ;; Defined at:
   885 ;;		line 14 in file "main.c"
   886 ;; Parameters:    Size  Location     Type
   887 ;;		None
   888 ;; Auto vars:     Size  Location     Type
   889 ;;		None
   890 ;; Return value:  Size  Location     Type
   891 ;;                  1    wreg      void 
   892 ;; Registers used:
   893 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
   894 ;; Tracked objects:
   895 ;;		On entry : 0/0
   896 ;;		On exit  : 0/0
   897 ;;		Unchanged: 0/0
   898 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   899 ;;      Params:         0       0       0       0       0       0       0
   900 ;;      Locals:         0       0       0       0       0       0       0
   901 ;;      Temps:          0       0       0       0       0       0       0
   902 ;;      Totals:         0       0       0       0       0       0       0
   903 ;;Total ram usage:        0 bytes
   904 ;; Hardware stack levels required when called:    5
   905 ;; This function calls:
   906 ;;		_eventInit
   907 ;;		_getTime
   908 ;;		_lcdInit
   909 ;;		_pwmInit
   910 ;;		_smLoop
   911 ;;		_timerInit
   912 ;;		_timerReset
   913 ;;		_timerWait
   914 ;;		_varInit
   915 ;; This function is called by:
   916 ;;		Startup code after reset
   917 ;; This function uses a non-reentrant model
   918 ;;
   919                           
   920                           	psect	text0
   921  007170                     __ptext0:
   922                           	callstack 0
   923  007170                     _main:
   924                           	callstack 26
   925  007170                     
   926                           ;main.c: 18:     lcdInit();
   927  007170  EC62  F039         	call	_lcdInit	;wreg free
   928                           
   929                           ;main.c: 19:     timerInit();
   930  007174  ECE2  F037         	call	_timerInit	;wreg free
   931  007178                     
   932                           ;main.c: 20:     varInit();
   933  007178  EC49  F038         	call	_varInit	;wreg free
   934  00717C                     
   935                           ;main.c: 21:     eventInit();
   936  00717C  EC0B  F038         	call	_eventInit	;wreg free
   937  007180                     
   938                           ;main.c: 23:     pwmInit();
   939  007180  EC1A  F038         	call	_pwmInit	;wreg free
   940  007184                     l2538:
   941                           
   942                           ;main.c: 28:         timerReset(getTime());
   943  007184  ECF0  F037         	call	_getTime	;wreg free
   944  007188  C029  F02B         	movff	?_getTime,timerReset@tempo
   945  00718C  C02A  F02C         	movff	?_getTime+1,timerReset@tempo+1
   946  007190  EC58  F038         	call	_timerReset	;wreg free
   947  007194                     
   948                           ;main.c: 29:         smLoop();
   949  007194  ECD4  F03C         	call	_smLoop	;wreg free
   950  007198                     
   951                           ;main.c: 39:         timerWait();
   952  007198  EC12  F038         	call	_timerWait	;wreg free
   953                           
   954                           ;main.c: 43:     }
   955  00719C  EFC2  F038         	goto	l2538
   956  0071A0  EF00  F000         	goto	start
   957  0071A4                     __end_of_main:
   958                           	callstack 0
   959                           
   960 ;; *************** function _varInit *****************
   961 ;; Defined at:
   962 ;;		line 14 in file "var.c"
   963 ;; Parameters:    Size  Location     Type
   964 ;;		None
   965 ;; Auto vars:     Size  Location     Type
   966 ;;		None
   967 ;; Return value:  Size  Location     Type
   968 ;;                  1    wreg      void 
   969 ;; Registers used:
   970 ;;		wreg, status,2
   971 ;; Tracked objects:
   972 ;;		On entry : 0/0
   973 ;;		On exit  : 0/0
   974 ;;		Unchanged: 0/0
   975 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
   976 ;;      Params:         0       0       0       0       0       0       0
   977 ;;      Locals:         0       0       0       0       0       0       0
   978 ;;      Temps:          0       0       0       0       0       0       0
   979 ;;      Totals:         0       0       0       0       0       0       0
   980 ;;Total ram usage:        0 bytes
   981 ;; Hardware stack levels used:    1
   982 ;; This function calls:
   983 ;;		Nothing
   984 ;; This function is called by:
   985 ;;		_main
   986 ;; This function uses a non-reentrant model
   987 ;;
   988                           
   989                           	psect	text1
   990  007092                     __ptext1:
   991                           	callstack 0
   992  007092                     _varInit:
   993                           	callstack 30
   994  007092                     
   995                           ;var.c: 15:     state = 0;
   996  007092  0E00               	movlw	0
   997  007094  6E51               	movwf	_state^0,c
   998                           
   999                           ;var.c: 16:     time = 1000;
  1000  007096  0E03               	movlw	3
  1001  007098  6E4B               	movwf	(_time+1)^0,c
  1002  00709A  0EE8               	movlw	232
  1003  00709C  6E4A               	movwf	_time^0,c
  1004                           
  1005                           ;var.c: 17:     alarmLevel = 512;
  1006  00709E  0E02               	movlw	2
  1007  0070A0  6E49               	movwf	(_alarmLevel+1)^0,c
  1008  0070A2  0E00               	movlw	0
  1009  0070A4  6E48               	movwf	_alarmLevel^0,c
  1010                           
  1011                           ;var.c: 18:     alarmLevel1 = 512;
  1012  0070A6  0E02               	movlw	2
  1013  0070A8  6E47               	movwf	(_alarmLevel1+1)^0,c
  1014  0070AA  0E00               	movlw	0
  1015  0070AC  6E46               	movwf	_alarmLevel1^0,c
  1016  0070AE  0012               	return		;funcret
  1017  0070B0                     __end_of_varInit:
  1018                           	callstack 0
  1019                           
  1020 ;; *************** function _timerWait *****************
  1021 ;; Defined at:
  1022 ;;		line 27 in file "timer.c"
  1023 ;; Parameters:    Size  Location     Type
  1024 ;;		None
  1025 ;; Auto vars:     Size  Location     Type
  1026 ;;		None
  1027 ;; Return value:  Size  Location     Type
  1028 ;;                  1    wreg      void 
  1029 ;; Registers used:
  1030 ;;		None
  1031 ;; Tracked objects:
  1032 ;;		On entry : 0/0
  1033 ;;		On exit  : 0/0
  1034 ;;		Unchanged: 0/0
  1035 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1036 ;;      Params:         0       0       0       0       0       0       0
  1037 ;;      Locals:         0       0       0       0       0       0       0
  1038 ;;      Temps:          0       0       0       0       0       0       0
  1039 ;;      Totals:         0       0       0       0       0       0       0
  1040 ;;Total ram usage:        0 bytes
  1041 ;; Hardware stack levels used:    1
  1042 ;; This function calls:
  1043 ;;		Nothing
  1044 ;; This function is called by:
  1045 ;;		_main
  1046 ;; This function uses a non-reentrant model
  1047 ;;
  1048                           
  1049                           	psect	text2
  1050  007024                     __ptext2:
  1051                           	callstack 0
  1052  007024                     _timerWait:
  1053                           	callstack 30
  1054  007024                     l333:
  1055  007024  A4F2               	btfss	242,2,c	;volatile
  1056  007026  EF17  F038         	goto	u731
  1057  00702A  EF19  F038         	goto	u730
  1058  00702E                     u731:
  1059  00702E  EF12  F038         	goto	l333
  1060  007032                     u730:
  1061  007032  0012               	return		;funcret
  1062  007034                     __end_of_timerWait:
  1063                           	callstack 0
  1064                           
  1065 ;; *************** function _timerReset *****************
  1066 ;; Defined at:
  1067 ;;		line 33 in file "timer.c"
  1068 ;; Parameters:    Size  Location     Type
  1069 ;;  tempo           2    2[COMRAM] unsigned int 
  1070 ;; Auto vars:     Size  Location     Type
  1071 ;;  ciclos          2    4[COMRAM] unsigned int 
  1072 ;; Return value:  Size  Location     Type
  1073 ;;                  1    wreg      void 
  1074 ;; Registers used:
  1075 ;;		wreg, status,2, status,0
  1076 ;; Tracked objects:
  1077 ;;		On entry : 0/0
  1078 ;;		On exit  : 0/0
  1079 ;;		Unchanged: 0/0
  1080 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1081 ;;      Params:         2       0       0       0       0       0       0
  1082 ;;      Locals:         2       0       0       0       0       0       0
  1083 ;;      Temps:          0       0       0       0       0       0       0
  1084 ;;      Totals:         4       0       0       0       0       0       0
  1085 ;;Total ram usage:        4 bytes
  1086 ;; Hardware stack levels used:    1
  1087 ;; This function calls:
  1088 ;;		Nothing
  1089 ;; This function is called by:
  1090 ;;		_main
  1091 ;; This function uses a non-reentrant model
  1092 ;;
  1093                           
  1094                           	psect	text3
  1095  0070B0                     __ptext3:
  1096                           	callstack 0
  1097  0070B0                     _timerReset:
  1098                           	callstack 30
  1099  0070B0                     
  1100                           ;timer.c: 35:     unsigned ciclos = tempo * 2;
  1101  0070B0  90D8               	bcf	status,0,c
  1102  0070B2  342B               	rlcf	timerReset@tempo^0,w,c
  1103  0070B4  6E2D               	movwf	timerReset@ciclos^0,c
  1104  0070B6  342C               	rlcf	(timerReset@tempo+1)^0,w,c
  1105  0070B8  6E2E               	movwf	(timerReset@ciclos+1)^0,c
  1106  0070BA                     
  1107                           ;timer.c: 37:     ciclos = 65535 - ciclos;
  1108  0070BA  1E2D               	comf	timerReset@ciclos^0,f,c
  1109  0070BC  1E2E               	comf	(timerReset@ciclos+1)^0,f,c
  1110  0070BE                     
  1111                           ;timer.c: 39:     ciclos -= 14;
  1112  0070BE  0E0E               	movlw	14
  1113  0070C0  5E2D               	subwf	timerReset@ciclos^0,f,c
  1114  0070C2  0E00               	movlw	0
  1115  0070C4  5A2E               	subwfb	(timerReset@ciclos+1)^0,f,c
  1116  0070C6                     
  1117                           ;timer.c: 40:     (*(volatile __near unsigned char*)0xFD7) = (ciclos >> 8);
  1118  0070C6  502E               	movf	(timerReset@ciclos+1)^0,w,c
  1119  0070C8  6ED7               	movwf	215,c	;volatile
  1120  0070CA                     
  1121                           ;timer.c: 41:     (*(volatile __near unsigned char*)0xFD6) = (ciclos & 0x00FF);
  1122  0070CA  C02D  FFD6         	movff	timerReset@ciclos,4054	;volatile
  1123  0070CE                     
  1124                           ;timer.c: 43:     (((*(volatile __near unsigned char*)0xFF2)) &= ~(1<<(2)) );
  1125  0070CE  94F2               	bcf	242,2,c	;volatile
  1126  0070D0  0012               	return		;funcret
  1127  0070D2                     __end_of_timerReset:
  1128                           	callstack 0
  1129                           
  1130 ;; *************** function _timerInit *****************
  1131 ;; Defined at:
  1132 ;;		line 46 in file "timer.c"
  1133 ;; Parameters:    Size  Location     Type
  1134 ;;		None
  1135 ;; Auto vars:     Size  Location     Type
  1136 ;;		None
  1137 ;; Return value:  Size  Location     Type
  1138 ;;                  1    wreg      void 
  1139 ;; Registers used:
  1140 ;;		wreg, status,2, status,0
  1141 ;; Tracked objects:
  1142 ;;		On entry : 0/0
  1143 ;;		On exit  : 0/0
  1144 ;;		Unchanged: 0/0
  1145 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1146 ;;      Params:         0       0       0       0       0       0       0
  1147 ;;      Locals:         0       0       0       0       0       0       0
  1148 ;;      Temps:          0       0       0       0       0       0       0
  1149 ;;      Totals:         0       0       0       0       0       0       0
  1150 ;;Total ram usage:        0 bytes
  1151 ;; Hardware stack levels used:    1
  1152 ;; This function calls:
  1153 ;;		Nothing
  1154 ;; This function is called by:
  1155 ;;		_main
  1156 ;; This function uses a non-reentrant model
  1157 ;;
  1158                           
  1159                           	psect	text4
  1160  006FC4                     __ptext4:
  1161                           	callstack 0
  1162  006FC4                     _timerInit:
  1163                           	callstack 30
  1164  006FC4                     
  1165                           ;timer.c: 47:     (*(volatile __near unsigned char*)0xFD5) = 0b00001000;
  1166  006FC4  0E08               	movlw	8
  1167  006FC6  6ED5               	movwf	213,c	;volatile
  1168  006FC8                     
  1169                           ;timer.c: 48:     (((*(volatile __near unsigned char*)0xFD5)) |= (1<<(7)));
  1170  006FC8  8ED5               	bsf	213,7,c	;volatile
  1171  006FCA  0012               	return		;funcret
  1172  006FCC                     __end_of_timerInit:
  1173                           	callstack 0
  1174                           
  1175 ;; *************** function _smLoop *****************
  1176 ;; Defined at:
  1177 ;;		line 16 in file "stateMachine.c"
  1178 ;; Parameters:    Size  Location     Type
  1179 ;;		None
  1180 ;; Auto vars:     Size  Location     Type
  1181 ;;  evento          1   28[COMRAM] unsigned char 
  1182 ;; Return value:  Size  Location     Type
  1183 ;;                  1    wreg      void 
  1184 ;; Registers used:
  1185 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, prodl, prodh, cstack
  1186 ;; Tracked objects:
  1187 ;;		On entry : 0/0
  1188 ;;		On exit  : 0/0
  1189 ;;		Unchanged: 0/0
  1190 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1191 ;;      Params:         0       0       0       0       0       0       0
  1192 ;;      Locals:         3       0       0       0       0       0       0
  1193 ;;      Temps:          2       0       0       0       0       0       0
  1194 ;;      Totals:         5       0       0       0       0       0       0
  1195 ;;Total ram usage:        5 bytes
  1196 ;; Hardware stack levels used:    1
  1197 ;; Hardware stack levels required when called:    4
  1198 ;; This function calls:
  1199 ;;		_eventRead
  1200 ;;		_getAlarmLevel
  1201 ;;		_getLanguage
  1202 ;;		_getState
  1203 ;;		_getTime
  1204 ;;		_outputPrint
  1205 ;;		_setAlarmLevel
  1206 ;;		_setLanguage
  1207 ;;		_setState
  1208 ;;		_setTime
  1209 ;;		_teste1
  1210 ;; This function is called by:
  1211 ;;		_main
  1212 ;; This function uses a non-reentrant model
  1213 ;;
  1214                           
  1215                           	psect	text5
  1216  0079A8                     __ptext5:
  1217                           	callstack 0
  1218  0079A8                     _smLoop:
  1219                           	callstack 26
  1220  0079A8                     
  1221                           ;stateMachine.c: 17:     unsigned char evento;;stateMachine.c: 20:     evento = eventRea
      +                          d();
  1222  0079A8  EC01  F03A         	call	_eventRead	;wreg free
  1223  0079AC  5029               	movf	?_eventRead^0,w,c
  1224  0079AE  6E45               	movwf	smLoop@evento^0,c
  1225                           
  1226                           ;stateMachine.c: 22:     switch (getState()) {
  1227  0079B0  EFA2  F03D         	goto	l2518
  1228  0079B4                     l2460:
  1229                           
  1230                           ;stateMachine.c: 25:             if (evento == EV_RIGHT) {
  1231  0079B4  0E03               	movlw	3
  1232  0079B6  1845               	xorwf	smLoop@evento^0,w,c
  1233  0079B8  A4D8               	btfss	status,2,c
  1234  0079BA  EFE1  F03C         	goto	u1311
  1235  0079BE  EFE3  F03C         	goto	u1310
  1236  0079C2                     u1311:
  1237  0079C2  EFED  F03C         	goto	l2464
  1238  0079C6                     u1310:
  1239  0079C6                     
  1240                           ;stateMachine.c: 26:                 setAlarmLevel(getAlarmLevel() + 1);
  1241  0079C6  ECEB  F037         	call	_getAlarmLevel	;wreg free
  1242  0079CA  0E01               	movlw	1
  1243  0079CC  2429               	addwf	?_getAlarmLevel^0,w,c
  1244  0079CE  6E2B               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1245  0079D0  0E00               	movlw	0
  1246  0079D2  202A               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1247  0079D4  6E2C               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1248  0079D6  ECF5  F037         	call	_setAlarmLevel	;wreg free
  1249  0079DA                     l2464:
  1250                           
  1251                           ;stateMachine.c: 28:             if (evento == EV_LEFT) {
  1252  0079DA  0E02               	movlw	2
  1253  0079DC  1845               	xorwf	smLoop@evento^0,w,c
  1254  0079DE  A4D8               	btfss	status,2,c
  1255  0079E0  EFF4  F03C         	goto	u1321
  1256  0079E4  EFF6  F03C         	goto	u1320
  1257  0079E8                     u1321:
  1258  0079E8  EF00  F03D         	goto	l2468
  1259  0079EC                     u1320:
  1260  0079EC                     
  1261                           ;stateMachine.c: 29:                 setAlarmLevel(getAlarmLevel() - 1);
  1262  0079EC  ECEB  F037         	call	_getAlarmLevel	;wreg free
  1263  0079F0  0EFF               	movlw	255
  1264  0079F2  2429               	addwf	?_getAlarmLevel^0,w,c
  1265  0079F4  6E2B               	movwf	setAlarmLevel@newAlarmLevel^0,c
  1266  0079F6  0EFF               	movlw	255
  1267  0079F8  202A               	addwfc	(?_getAlarmLevel+1)^0,w,c
  1268  0079FA  6E2C               	movwf	(setAlarmLevel@newAlarmLevel+1)^0,c
  1269  0079FC  ECF5  F037         	call	_setAlarmLevel	;wreg free
  1270  007A00                     l2468:
  1271                           
  1272                           ;stateMachine.c: 33:             if (evento == EV_ENTER) {
  1273  007A00  0E04               	movlw	4
  1274  007A02  1845               	xorwf	smLoop@evento^0,w,c
  1275  007A04  A4D8               	btfss	status,2,c
  1276  007A06  EF07  F03D         	goto	u1331
  1277  007A0A  EF09  F03D         	goto	u1330
  1278  007A0E                     u1331:
  1279  007A0E  EFC4  F03D         	goto	l2520
  1280  007A12                     u1330:
  1281  007A12                     
  1282                           ;stateMachine.c: 34:                 setState(STATE_ALARME1);
  1283  007A12  0E02               	movlw	2
  1284  007A14  ECDE  F037         	call	_setState
  1285  007A18  EFC4  F03D         	goto	l2520
  1286  007A1C                     l2474:
  1287  007A1C                     
  1288                           ;stateMachine.c: 47:                 if (evento == EV_ENTER) {
  1289  007A1C  0E04               	movlw	4
  1290  007A1E  1845               	xorwf	smLoop@evento^0,w,c
  1291  007A20  A4D8               	btfss	status,2,c
  1292  007A22  EF15  F03D         	goto	u1341
  1293  007A26  EF17  F03D         	goto	u1340
  1294  007A2A                     u1341:
  1295  007A2A  EFC4  F03D         	goto	l2520
  1296  007A2E                     u1340:
  1297  007A2E                     
  1298                           ;stateMachine.c: 48:                     setState(STATE_TEMPO);
  1299  007A2E  0E03               	movlw	3
  1300  007A30  ECDE  F037         	call	_setState
  1301  007A34  EFC4  F03D         	goto	l2520
  1302  007A38                     l2480:
  1303                           
  1304                           ;stateMachine.c: 54:             if (evento == EV_RIGHT) {
  1305  007A38  0E03               	movlw	3
  1306  007A3A  1845               	xorwf	smLoop@evento^0,w,c
  1307  007A3C  A4D8               	btfss	status,2,c
  1308  007A3E  EF23  F03D         	goto	u1351
  1309  007A42  EF25  F03D         	goto	u1350
  1310  007A46                     u1351:
  1311  007A46  EF2F  F03D         	goto	l2484
  1312  007A4A                     u1350:
  1313  007A4A                     
  1314                           ;stateMachine.c: 55:                 setTime(getTime() + 1);
  1315  007A4A  ECF0  F037         	call	_getTime	;wreg free
  1316  007A4E  0E01               	movlw	1
  1317  007A50  2429               	addwf	?_getTime^0,w,c
  1318  007A52  6E2B               	movwf	setTime@newTime^0,c
  1319  007A54  0E00               	movlw	0
  1320  007A56  202A               	addwfc	(?_getTime+1)^0,w,c
  1321  007A58  6E2C               	movwf	(setTime@newTime+1)^0,c
  1322  007A5A  ECFF  F037         	call	_setTime	;wreg free
  1323  007A5E                     l2484:
  1324                           
  1325                           ;stateMachine.c: 57:             if (evento == EV_LEFT) {
  1326  007A5E  0E02               	movlw	2
  1327  007A60  1845               	xorwf	smLoop@evento^0,w,c
  1328  007A62  A4D8               	btfss	status,2,c
  1329  007A64  EF36  F03D         	goto	u1361
  1330  007A68  EF38  F03D         	goto	u1360
  1331  007A6C                     u1361:
  1332  007A6C  EF42  F03D         	goto	l2488
  1333  007A70                     u1360:
  1334  007A70                     
  1335                           ;stateMachine.c: 58:                 setTime(getTime() - 1);
  1336  007A70  ECF0  F037         	call	_getTime	;wreg free
  1337  007A74  0EFF               	movlw	255
  1338  007A76  2429               	addwf	?_getTime^0,w,c
  1339  007A78  6E2B               	movwf	setTime@newTime^0,c
  1340  007A7A  0EFF               	movlw	255
  1341  007A7C  202A               	addwfc	(?_getTime+1)^0,w,c
  1342  007A7E  6E2C               	movwf	(setTime@newTime+1)^0,c
  1343  007A80  ECFF  F037         	call	_setTime	;wreg free
  1344  007A84                     l2488:
  1345                           
  1346                           ;stateMachine.c: 62:             if (evento == EV_ENTER) {
  1347  007A84  0E04               	movlw	4
  1348  007A86  1845               	xorwf	smLoop@evento^0,w,c
  1349  007A88  A4D8               	btfss	status,2,c
  1350  007A8A  EF49  F03D         	goto	u1371
  1351  007A8E  EF4B  F03D         	goto	u1370
  1352  007A92                     u1371:
  1353  007A92  EFC4  F03D         	goto	l2520
  1354  007A96                     u1370:
  1355  007A96                     
  1356                           ;stateMachine.c: 63:                 setState(STATE_IDIOMA);
  1357  007A96  0E00               	movlw	0
  1358  007A98  ECDE  F037         	call	_setState
  1359  007A9C  EFC4  F03D         	goto	l2520
  1360  007AA0                     l2492:
  1361                           
  1362                           ;stateMachine.c: 70:             if (evento == EV_RIGHT) {
  1363  007AA0  0E03               	movlw	3
  1364  007AA2  1845               	xorwf	smLoop@evento^0,w,c
  1365  007AA4  A4D8               	btfss	status,2,c
  1366  007AA6  EF57  F03D         	goto	u1381
  1367  007AAA  EF59  F03D         	goto	u1380
  1368  007AAE                     u1381:
  1369  007AAE  EF5F  F03D         	goto	l2496
  1370  007AB2                     u1380:
  1371  007AB2                     
  1372                           ;stateMachine.c: 71:                 setLanguage(getLanguage() + 1);
  1373  007AB2  ECDC  F037         	call	_getLanguage	;wreg free
  1374  007AB6  6E41               	movwf	??_smLoop^0,c
  1375  007AB8  2841               	incf	??_smLoop^0,w,c
  1376  007ABA  ECFA  F037         	call	_setLanguage
  1377  007ABE                     l2496:
  1378                           
  1379                           ;stateMachine.c: 73:             if (evento == EV_LEFT) {
  1380  007ABE  0E02               	movlw	2
  1381  007AC0  1845               	xorwf	smLoop@evento^0,w,c
  1382  007AC2  A4D8               	btfss	status,2,c
  1383  007AC4  EF66  F03D         	goto	u1391
  1384  007AC8  EF68  F03D         	goto	u1390
  1385  007ACC                     u1391:
  1386  007ACC  EF6E  F03D         	goto	l2500
  1387  007AD0                     u1390:
  1388  007AD0                     
  1389                           ;stateMachine.c: 74:                 setLanguage(getLanguage() - 1);
  1390  007AD0  ECDC  F037         	call	_getLanguage	;wreg free
  1391  007AD4  6E41               	movwf	??_smLoop^0,c
  1392  007AD6  0441               	decf	??_smLoop^0,w,c
  1393  007AD8  ECFA  F037         	call	_setLanguage
  1394  007ADC                     l2500:
  1395                           
  1396                           ;stateMachine.c: 78:             if (evento == EV_ENTER) {
  1397  007ADC  0E04               	movlw	4
  1398  007ADE  1845               	xorwf	smLoop@evento^0,w,c
  1399  007AE0  A4D8               	btfss	status,2,c
  1400  007AE2  EF75  F03D         	goto	u1401
  1401  007AE6  EF77  F03D         	goto	u1400
  1402  007AEA                     u1401:
  1403  007AEA  EFC4  F03D         	goto	l2520
  1404  007AEE                     u1400:
  1405  007AEE                     
  1406                           ;stateMachine.c: 79:                 setState(STATE_ALARME);
  1407  007AEE  0E01               	movlw	1
  1408  007AF0  ECDE  F037         	call	_setState
  1409  007AF4  EFC4  F03D         	goto	l2520
  1410  007AF8                     l2504:
  1411                           
  1412                           ;stateMachine.c: 84:             if (evento == EV_RIGHT) {
  1413  007AF8  0E03               	movlw	3
  1414  007AFA  1845               	xorwf	smLoop@evento^0,w,c
  1415  007AFC  A4D8               	btfss	status,2,c
  1416  007AFE  EF83  F03D         	goto	u1411
  1417  007B02  EF85  F03D         	goto	u1410
  1418  007B06                     u1411:
  1419  007B06  EF88  F03D         	goto	l2508
  1420  007B0A                     u1410:
  1421  007B0A                     
  1422                           ;stateMachine.c: 85:                 setState(STATE_ALARME);
  1423  007B0A  0E01               	movlw	1
  1424  007B0C  ECDE  F037         	call	_setState
  1425  007B10                     l2508:
  1426                           
  1427                           ;stateMachine.c: 87:             if (evento == EV_LEFT) {
  1428  007B10  0E02               	movlw	2
  1429  007B12  1845               	xorwf	smLoop@evento^0,w,c
  1430  007B14  A4D8               	btfss	status,2,c
  1431  007B16  EF8F  F03D         	goto	u1421
  1432  007B1A  EF91  F03D         	goto	u1420
  1433  007B1E                     u1421:
  1434  007B1E  EF94  F03D         	goto	l2512
  1435  007B22                     u1420:
  1436  007B22                     
  1437                           ;stateMachine.c: 88:                 setState(STATE_ALARME);
  1438  007B22  0E01               	movlw	1
  1439  007B24  ECDE  F037         	call	_setState
  1440  007B28                     l2512:
  1441                           
  1442                           ;stateMachine.c: 92:             if (evento == EV_ENTER) {
  1443  007B28  0E04               	movlw	4
  1444  007B2A  1845               	xorwf	smLoop@evento^0,w,c
  1445  007B2C  A4D8               	btfss	status,2,c
  1446  007B2E  EF9B  F03D         	goto	u1431
  1447  007B32  EF9D  F03D         	goto	u1430
  1448  007B36                     u1431:
  1449  007B36  EFC4  F03D         	goto	l2520
  1450  007B3A                     u1430:
  1451  007B3A                     
  1452                           ;stateMachine.c: 93:                 setState(STATE_ALARME);
  1453  007B3A  0E01               	movlw	1
  1454  007B3C  ECDE  F037         	call	_setState
  1455  007B40  EFC4  F03D         	goto	l2520
  1456  007B44                     l2518:
  1457  007B44  ECDA  F037         	call	_getState	;wreg free
  1458  007B48  6E41               	movwf	??_smLoop^0,c
  1459  007B4A  6A42               	clrf	(??_smLoop+1)^0,c
  1460                           
  1461                           ; Switch on 2 bytes has been partitioned into a top level switch of size 1, and 1 sub-sw
      +                          itches
  1462                           ; Switch size 1, requested type "simple"
  1463                           ; Number of cases is 1, Range of values is 0 to 0
  1464                           ; switch strategies available:
  1465                           ; Name         Instructions Cycles
  1466                           ; simple_byte            4     3 (average)
  1467                           ;	Chosen strategy is simple_byte
  1468  007B4C  5042               	movf	(??_smLoop+1)^0,w,c
  1469  007B4E  0A00               	xorlw	0	; case 0
  1470  007B50  B4D8               	btfsc	status,2,c
  1471  007B52  EFAD  F03D         	goto	l2584
  1472  007B56  EFC4  F03D         	goto	l2520
  1473  007B5A                     l2584:
  1474                           
  1475                           ; Switch size 1, requested type "simple"
  1476                           ; Number of cases is 5, Range of values is 0 to 4
  1477                           ; switch strategies available:
  1478                           ; Name         Instructions Cycles
  1479                           ; simple_byte           16     9 (average)
  1480                           ;	Chosen strategy is simple_byte
  1481  007B5A  5041               	movf	??_smLoop^0,w,c
  1482  007B5C  0A00               	xorlw	0	; case 0
  1483  007B5E  B4D8               	btfsc	status,2,c
  1484  007B60  EF50  F03D         	goto	l2492
  1485  007B64  0A01               	xorlw	1	; case 1
  1486  007B66  B4D8               	btfsc	status,2,c
  1487  007B68  EFDA  F03C         	goto	l2460
  1488  007B6C  0A03               	xorlw	3	; case 2
  1489  007B6E  B4D8               	btfsc	status,2,c
  1490  007B70  EF0E  F03D         	goto	l2474
  1491  007B74  0A01               	xorlw	1	; case 3
  1492  007B76  B4D8               	btfsc	status,2,c
  1493  007B78  EF1C  F03D         	goto	l2480
  1494  007B7C  0A07               	xorlw	7	; case 4
  1495  007B7E  B4D8               	btfsc	status,2,c
  1496  007B80  EF7C  F03D         	goto	l2504
  1497  007B84  EFC4  F03D         	goto	l2520
  1498  007B88                     l2520:
  1499                           
  1500                           ;stateMachine.c: 100:     teste1();
  1501  007B88  EC60  F03B         	call	_teste1	;wreg free
  1502  007B8C                     
  1503                           ;stateMachine.c: 105:     outputPrint(getState(), getLanguage());
  1504  007B8C  ECDC  F037         	call	_getLanguage	;wreg free
  1505  007B90  6E41               	movwf	??_smLoop^0,c
  1506  007B92  5041               	movf	??_smLoop^0,w,c
  1507  007B94  6E43               	movwf	_smLoop$1211^0,c
  1508  007B96  6A44               	clrf	(_smLoop$1211+1)^0,c
  1509  007B98                     
  1510                           ;stateMachine.c: 105:     outputPrint(getState(), getLanguage());
  1511  007B98  ECDA  F037         	call	_getState	;wreg free
  1512  007B9C  6E41               	movwf	??_smLoop^0,c
  1513  007B9E  5041               	movf	??_smLoop^0,w,c
  1514  007BA0  6E39               	movwf	outputPrint@numTela^0,c
  1515  007BA2  6A3A               	clrf	(outputPrint@numTela+1)^0,c
  1516  007BA4  C043  F03B         	movff	_smLoop$1211,outputPrint@idioma
  1517  007BA8  C044  F03C         	movff	_smLoop$1211+1,outputPrint@idioma+1
  1518  007BAC  ECD9  F03D         	call	_outputPrint	;wreg free
  1519  007BB0  0012               	return		;funcret
  1520  007BB2                     __end_of_smLoop:
  1521                           	callstack 0
  1522                           
  1523 ;; *************** function _teste1 *****************
  1524 ;; Defined at:
  1525 ;;		line 54 in file "var.c"
  1526 ;; Parameters:    Size  Location     Type
  1527 ;;		None
  1528 ;; Auto vars:     Size  Location     Type
  1529 ;;		None
  1530 ;; Return value:  Size  Location     Type
  1531 ;;                  1    wreg      void 
  1532 ;; Registers used:
  1533 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1534 ;; Tracked objects:
  1535 ;;		On entry : 0/0
  1536 ;;		On exit  : 0/0
  1537 ;;		Unchanged: 0/0
  1538 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1539 ;;      Params:         0       0       0       0       0       0       0
  1540 ;;      Locals:         0       0       0       0       0       0       0
  1541 ;;      Temps:          3       0       0       0       0       0       0
  1542 ;;      Totals:         3       0       0       0       0       0       0
  1543 ;;Total ram usage:        3 bytes
  1544 ;; Hardware stack levels used:    1
  1545 ;; Hardware stack levels required when called:    2
  1546 ;; This function calls:
  1547 ;;		_adcRead1
  1548 ;;		_adcRead2
  1549 ;;		_getAlarmLevel
  1550 ;;		_pwmFrequency
  1551 ;;		_pwmSet1
  1552 ;; This function is called by:
  1553 ;;		_smLoop
  1554 ;; This function uses a non-reentrant model
  1555 ;;
  1556                           
  1557                           	psect	text6
  1558  0076C0                     __ptext6:
  1559                           	callstack 0
  1560  0076C0                     _teste1:
  1561                           	callstack 27
  1562  0076C0                     
  1563                           ;var.c: 56:     if ((adcRead1() >= getAlarmLevel()) && (adcRead2() <= getAlarmLevel()) |
      +                          | (adcRead1() <= getAlarmLevel()) && (adcRead2() >= getAlarmLevel()) ) {
  1564  0076C0  ECED  F038         	call	_adcRead1	;wreg free
  1565  0076C4  C029  F039         	movff	?_adcRead1,??_teste1
  1566  0076C8  C02A  F03A         	movff	?_adcRead1+1,??_teste1+1
  1567  0076CC  ECEB  F037         	call	_getAlarmLevel	;wreg free
  1568  0076D0  5029               	movf	?_getAlarmLevel^0,w,c
  1569  0076D2  5C39               	subwf	??_teste1^0,w,c
  1570  0076D4  503A               	movf	(??_teste1+1)^0,w,c
  1571  0076D6  0A80               	xorlw	128
  1572  0076D8  6E3B               	movwf	(??_teste1+2)^0,c
  1573  0076DA  502A               	movf	(?_getAlarmLevel+1)^0,w,c
  1574  0076DC  0A80               	xorlw	128
  1575  0076DE  583B               	subwfb	(??_teste1+2)^0,w,c
  1576  0076E0  A0D8               	btfss	status,0,c
  1577  0076E2  EF75  F03B         	goto	u1271
  1578  0076E6  EF77  F03B         	goto	u1270
  1579  0076EA                     u1271:
  1580  0076EA  EF8E  F03B         	goto	l2402
  1581  0076EE                     u1270:
  1582  0076EE  ECEB  F037         	call	_getAlarmLevel	;wreg free
  1583  0076F2  C029  F039         	movff	?_getAlarmLevel,??_teste1
  1584  0076F6  C02A  F03A         	movff	?_getAlarmLevel+1,??_teste1+1
  1585  0076FA  EC12  F039         	call	_adcRead2	;wreg free
  1586  0076FE  5029               	movf	?_adcRead2^0,w,c
  1587  007700  5C39               	subwf	??_teste1^0,w,c
  1588  007702  503A               	movf	(??_teste1+1)^0,w,c
  1589  007704  0A80               	xorlw	128
  1590  007706  6E3B               	movwf	(??_teste1+2)^0,c
  1591  007708  502A               	movf	(?_adcRead2+1)^0,w,c
  1592  00770A  0A80               	xorlw	128
  1593  00770C  583B               	subwfb	(??_teste1+2)^0,w,c
  1594  00770E  B0D8               	btfsc	status,0,c
  1595  007710  EF8C  F03B         	goto	u1281
  1596  007714  EF8E  F03B         	goto	u1280
  1597  007718                     u1281:
  1598  007718  EFBC  F03B         	goto	l2406
  1599  00771C                     u1280:
  1600  00771C                     l2402:
  1601  00771C  ECEB  F037         	call	_getAlarmLevel	;wreg free
  1602  007720  C029  F039         	movff	?_getAlarmLevel,??_teste1
  1603  007724  C02A  F03A         	movff	?_getAlarmLevel+1,??_teste1+1
  1604  007728  ECED  F038         	call	_adcRead1	;wreg free
  1605  00772C  5029               	movf	?_adcRead1^0,w,c
  1606  00772E  5C39               	subwf	??_teste1^0,w,c
  1607  007730  503A               	movf	(??_teste1+1)^0,w,c
  1608  007732  0A80               	xorlw	128
  1609  007734  6E3B               	movwf	(??_teste1+2)^0,c
  1610  007736  502A               	movf	(?_adcRead1+1)^0,w,c
  1611  007738  0A80               	xorlw	128
  1612  00773A  583B               	subwfb	(??_teste1+2)^0,w,c
  1613  00773C  A0D8               	btfss	status,0,c
  1614  00773E  EFA3  F03B         	goto	u1291
  1615  007742  EFA5  F03B         	goto	u1290
  1616  007746                     u1291:
  1617  007746  EFC7  F03B         	goto	l2410
  1618  00774A                     u1290:
  1619  00774A  EC12  F039         	call	_adcRead2	;wreg free
  1620  00774E  C029  F039         	movff	?_adcRead2,??_teste1
  1621  007752  C02A  F03A         	movff	?_adcRead2+1,??_teste1+1
  1622  007756  ECEB  F037         	call	_getAlarmLevel	;wreg free
  1623  00775A  5029               	movf	?_getAlarmLevel^0,w,c
  1624  00775C  5C39               	subwf	??_teste1^0,w,c
  1625  00775E  503A               	movf	(??_teste1+1)^0,w,c
  1626  007760  0A80               	xorlw	128
  1627  007762  6E3B               	movwf	(??_teste1+2)^0,c
  1628  007764  502A               	movf	(?_getAlarmLevel+1)^0,w,c
  1629  007766  0A80               	xorlw	128
  1630  007768  583B               	subwfb	(??_teste1+2)^0,w,c
  1631  00776A  A0D8               	btfss	status,0,c
  1632  00776C  EFBA  F03B         	goto	u1301
  1633  007770  EFBC  F03B         	goto	u1300
  1634  007774                     u1301:
  1635  007774  EFC7  F03B         	goto	l2410
  1636  007778                     u1300:
  1637  007778                     l2406:
  1638                           
  1639                           ;var.c: 57:         pwmSet1(100);
  1640  007778  0E64               	movlw	100
  1641  00777A  EC91  F039         	call	_pwmSet1
  1642  00777E                     
  1643                           ;var.c: 58:         pwmFrequency(1000);
  1644  00777E  0E03               	movlw	3
  1645  007780  6E38               	movwf	(pwmFrequency@freq+1)^0,c
  1646  007782  0EE8               	movlw	232
  1647  007784  6E37               	movwf	pwmFrequency@freq^0,c
  1648  007786  EC69  F038         	call	_pwmFrequency	;wreg free
  1649                           
  1650                           ;var.c: 59:     }
  1651  00778A  EFD0  F03B         	goto	l398
  1652  00778E                     l2410:
  1653                           
  1654                           ;var.c: 62:         pwmSet1(0);
  1655  00778E  0E00               	movlw	0
  1656  007790  EC91  F039         	call	_pwmSet1
  1657  007794                     
  1658                           ;var.c: 63:         pwmFrequency(0);
  1659  007794  0E00               	movlw	0
  1660  007796  6E38               	movwf	(pwmFrequency@freq+1)^0,c
  1661  007798  0E00               	movlw	0
  1662  00779A  6E37               	movwf	pwmFrequency@freq^0,c
  1663  00779C  EC69  F038         	call	_pwmFrequency	;wreg free
  1664  0077A0                     l398:
  1665  0077A0  0012               	return		;funcret
  1666  0077A2                     __end_of_teste1:
  1667                           	callstack 0
  1668                           
  1669 ;; *************** function _pwmSet1 *****************
  1670 ;; Defined at:
  1671 ;;		line 23 in file "pwm.c"
  1672 ;; Parameters:    Size  Location     Type
  1673 ;;  porcento        1    wreg     unsigned char 
  1674 ;; Auto vars:     Size  Location     Type
  1675 ;;  porcento        1    9[COMRAM] unsigned char 
  1676 ;;  val             2   10[COMRAM] unsigned int 
  1677 ;; Return value:  Size  Location     Type
  1678 ;;                  1    wreg      void 
  1679 ;; Registers used:
  1680 ;;		wreg, status,2, status,0, prodl, prodh, cstack
  1681 ;; Tracked objects:
  1682 ;;		On entry : 0/0
  1683 ;;		On exit  : 0/0
  1684 ;;		Unchanged: 0/0
  1685 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1686 ;;      Params:         0       0       0       0       0       0       0
  1687 ;;      Locals:         3       0       0       0       0       0       0
  1688 ;;      Temps:          2       0       0       0       0       0       0
  1689 ;;      Totals:         5       0       0       0       0       0       0
  1690 ;;Total ram usage:        5 bytes
  1691 ;; Hardware stack levels used:    1
  1692 ;; Hardware stack levels required when called:    1
  1693 ;; This function calls:
  1694 ;;		___lwdiv
  1695 ;;		___wmul
  1696 ;; This function is called by:
  1697 ;;		_teste1
  1698 ;; This function uses a non-reentrant model
  1699 ;;
  1700                           
  1701                           	psect	text7
  1702  007322                     __ptext7:
  1703                           	callstack 0
  1704  007322                     _pwmSet1:
  1705                           	callstack 27
  1706                           
  1707                           ;incstack = 0
  1708                           ;pwmSet1@porcento stored from wreg
  1709  007322  6E32               	movwf	pwmSet1@porcento^0,c
  1710  007324                     
  1711                           ;pwm.c: 29:     unsigned int val = ((unsigned int) porcento) *((*(volatile __near unsign
      +                          ed char*)0xFCB) + 1);
  1712  007324  0E01               	movlw	1
  1713  007326  24CB               	addwf	203,w,c	;volatile
  1714  007328  6E29               	movwf	___wmul@multiplier^0,c
  1715  00732A  6A2A               	clrf	(___wmul@multiplier+1)^0,c
  1716  00732C  0E00               	movlw	0
  1717  00732E  222A               	addwfc	(___wmul@multiplier+1)^0,f,c
  1718  007330  C032  F02B         	movff	pwmSet1@porcento,___wmul@multiplicand
  1719  007334  6A2C               	clrf	(___wmul@multiplicand+1)^0,c
  1720  007336  EC7C  F038         	call	___wmul	;wreg free
  1721  00733A  C029  F033         	movff	?___wmul,pwmSet1@val
  1722  00733E  C02A  F034         	movff	?___wmul+1,pwmSet1@val+1
  1723  007342                     
  1724                           ;pwm.c: 30:     val = val / 25;
  1725  007342  C033  F029         	movff	pwmSet1@val,___lwdiv@dividend
  1726  007346  C034  F02A         	movff	pwmSet1@val+1,___lwdiv@dividend+1
  1727  00734A  0E00               	movlw	0
  1728  00734C  6E2C               	movwf	(___lwdiv@divisor+1)^0,c
  1729  00734E  0E19               	movlw	25
  1730  007350  6E2B               	movwf	___lwdiv@divisor^0,c
  1731  007352  ECC7  F039         	call	___lwdiv	;wreg free
  1732  007356  C029  F033         	movff	?___lwdiv,pwmSet1@val
  1733  00735A  C02A  F034         	movff	?___lwdiv+1,pwmSet1@val+1
  1734  00735E                     
  1735                           ;pwm.c: 32:     val &= 0x03ff;
  1736  00735E  0EFF               	movlw	255
  1737  007360  1633               	andwf	pwmSet1@val^0,f,c
  1738  007362  0E03               	movlw	3
  1739  007364  1634               	andwf	(pwmSet1@val+1)^0,f,c
  1740  007366                     
  1741                           ;pwm.c: 34:     (*(volatile __near unsigned char*)0xFBE) = val >> 2;
  1742  007366  C033  F030         	movff	pwmSet1@val,??_pwmSet1
  1743  00736A  C034  F031         	movff	pwmSet1@val+1,??_pwmSet1+1
  1744  00736E  90D8               	bcf	status,0,c
  1745  007370  3231               	rrcf	(??_pwmSet1+1)^0,f,c
  1746  007372  3230               	rrcf	??_pwmSet1^0,f,c
  1747  007374  90D8               	bcf	status,0,c
  1748  007376  3231               	rrcf	(??_pwmSet1+1)^0,f,c
  1749  007378  3230               	rrcf	??_pwmSet1^0,f,c
  1750  00737A  5030               	movf	??_pwmSet1^0,w,c
  1751  00737C  6EBE               	movwf	190,c	;volatile
  1752  00737E                     
  1753                           ;pwm.c: 36:     (*(volatile __near unsigned char*)0xFBD) |= (val & 0x0003) << 4;
  1754  00737E  C033  F030         	movff	pwmSet1@val,??_pwmSet1
  1755  007382  0E03               	movlw	3
  1756  007384  1630               	andwf	??_pwmSet1^0,f,c
  1757  007386  3830               	swapf	??_pwmSet1^0,w,c
  1758  007388  0BF0               	andlw	240
  1759  00738A  12BD               	iorwf	189,f,c	;volatile
  1760  00738C  0012               	return		;funcret
  1761  00738E                     __end_of_pwmSet1:
  1762                           	callstack 0
  1763                           
  1764 ;; *************** function ___wmul *****************
  1765 ;; Defined at:
  1766 ;;		line 15 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\Umul16.c"
  1767 ;; Parameters:    Size  Location     Type
  1768 ;;  multiplier      2    0[COMRAM] unsigned int 
  1769 ;;  multiplicand    2    2[COMRAM] unsigned int 
  1770 ;; Auto vars:     Size  Location     Type
  1771 ;;  product         2    4[COMRAM] unsigned int 
  1772 ;; Return value:  Size  Location     Type
  1773 ;;                  2    0[COMRAM] unsigned int 
  1774 ;; Registers used:
  1775 ;;		wreg, status,2, status,0, prodl, prodh
  1776 ;; Tracked objects:
  1777 ;;		On entry : 0/0
  1778 ;;		On exit  : 0/0
  1779 ;;		Unchanged: 0/0
  1780 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1781 ;;      Params:         4       0       0       0       0       0       0
  1782 ;;      Locals:         2       0       0       0       0       0       0
  1783 ;;      Temps:          0       0       0       0       0       0       0
  1784 ;;      Totals:         6       0       0       0       0       0       0
  1785 ;;Total ram usage:        6 bytes
  1786 ;; Hardware stack levels used:    1
  1787 ;; This function calls:
  1788 ;;		Nothing
  1789 ;; This function is called by:
  1790 ;;		_pwmSet1
  1791 ;;		_pwmSet2
  1792 ;; This function uses a non-reentrant model
  1793 ;;
  1794                           
  1795                           	psect	text8
  1796  0070F8                     __ptext8:
  1797                           	callstack 0
  1798  0070F8                     ___wmul:
  1799                           	callstack 27
  1800  0070F8  5029               	movf	___wmul@multiplier^0,w,c
  1801  0070FA  022B               	mulwf	___wmul@multiplicand^0,c
  1802  0070FC  CFF3 F02D          	movff	prodl,___wmul@product
  1803  007100  CFF4 F02E          	movff	prodh,___wmul@product+1
  1804  007104  5029               	movf	___wmul@multiplier^0,w,c
  1805  007106  022C               	mulwf	(___wmul@multiplicand+1)^0,c
  1806  007108  50F3               	movf	243,w,c
  1807  00710A  262E               	addwf	(___wmul@product+1)^0,f,c
  1808  00710C  502A               	movf	(___wmul@multiplier+1)^0,w,c
  1809  00710E  022B               	mulwf	___wmul@multiplicand^0,c
  1810  007110  50F3               	movf	243,w,c
  1811  007112  262E               	addwf	(___wmul@product+1)^0,f,c
  1812  007114  C02D  F029         	movff	___wmul@product,?___wmul
  1813  007118  C02E  F02A         	movff	___wmul@product+1,?___wmul+1
  1814  00711C  0012               	return		;funcret
  1815  00711E                     __end_of___wmul:
  1816                           	callstack 0
  1817                           
  1818 ;; *************** function ___lwdiv *****************
  1819 ;; Defined at:
  1820 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\lwdiv.c"
  1821 ;; Parameters:    Size  Location     Type
  1822 ;;  dividend        2    0[COMRAM] unsigned int 
  1823 ;;  divisor         2    2[COMRAM] unsigned int 
  1824 ;; Auto vars:     Size  Location     Type
  1825 ;;  quotient        2    4[COMRAM] unsigned int 
  1826 ;;  counter         1    6[COMRAM] unsigned char 
  1827 ;; Return value:  Size  Location     Type
  1828 ;;                  2    0[COMRAM] unsigned int 
  1829 ;; Registers used:
  1830 ;;		wreg, status,2, status,0
  1831 ;; Tracked objects:
  1832 ;;		On entry : 0/0
  1833 ;;		On exit  : 0/0
  1834 ;;		Unchanged: 0/0
  1835 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1836 ;;      Params:         4       0       0       0       0       0       0
  1837 ;;      Locals:         3       0       0       0       0       0       0
  1838 ;;      Temps:          0       0       0       0       0       0       0
  1839 ;;      Totals:         7       0       0       0       0       0       0
  1840 ;;Total ram usage:        7 bytes
  1841 ;; Hardware stack levels used:    1
  1842 ;; This function calls:
  1843 ;;		Nothing
  1844 ;; This function is called by:
  1845 ;;		_pwmSet1
  1846 ;;		_pwmSet2
  1847 ;; This function uses a non-reentrant model
  1848 ;;
  1849                           
  1850                           	psect	text9
  1851  00738E                     __ptext9:
  1852                           	callstack 0
  1853  00738E                     ___lwdiv:
  1854                           	callstack 27
  1855  00738E  0E00               	movlw	0
  1856  007390  6E2E               	movwf	(___lwdiv@quotient+1)^0,c
  1857  007392  0E00               	movlw	0
  1858  007394  6E2D               	movwf	___lwdiv@quotient^0,c
  1859  007396  502B               	movf	___lwdiv@divisor^0,w,c
  1860  007398  102C               	iorwf	(___lwdiv@divisor+1)^0,w,c
  1861  00739A  B4D8               	btfsc	status,2,c
  1862  00739C  EFD2  F039         	goto	u1041
  1863  0073A0  EFD4  F039         	goto	u1040
  1864  0073A4                     u1041:
  1865  0073A4  EFFC  F039         	goto	l916
  1866  0073A8                     u1040:
  1867  0073A8  0E01               	movlw	1
  1868  0073AA  6E2F               	movwf	___lwdiv@counter^0,c
  1869  0073AC  EFDC  F039         	goto	l2180
  1870  0073B0                     l2178:
  1871  0073B0  90D8               	bcf	status,0,c
  1872  0073B2  362B               	rlcf	___lwdiv@divisor^0,f,c
  1873  0073B4  362C               	rlcf	(___lwdiv@divisor+1)^0,f,c
  1874  0073B6  2A2F               	incf	___lwdiv@counter^0,f,c
  1875  0073B8                     l2180:
  1876  0073B8  AE2C               	btfss	(___lwdiv@divisor+1)^0,7,c
  1877  0073BA  EFE1  F039         	goto	u1051
  1878  0073BE  EFE3  F039         	goto	u1050
  1879  0073C2                     u1051:
  1880  0073C2  EFD8  F039         	goto	l2178
  1881  0073C6                     u1050:
  1882  0073C6                     l2182:
  1883  0073C6  90D8               	bcf	status,0,c
  1884  0073C8  362D               	rlcf	___lwdiv@quotient^0,f,c
  1885  0073CA  362E               	rlcf	(___lwdiv@quotient+1)^0,f,c
  1886  0073CC  502B               	movf	___lwdiv@divisor^0,w,c
  1887  0073CE  5C29               	subwf	___lwdiv@dividend^0,w,c
  1888  0073D0  502C               	movf	(___lwdiv@divisor+1)^0,w,c
  1889  0073D2  582A               	subwfb	(___lwdiv@dividend+1)^0,w,c
  1890  0073D4  A0D8               	btfss	status,0,c
  1891  0073D6  EFEF  F039         	goto	u1061
  1892  0073DA  EFF1  F039         	goto	u1060
  1893  0073DE                     u1061:
  1894  0073DE  EFF6  F039         	goto	l2190
  1895  0073E2                     u1060:
  1896  0073E2  502B               	movf	___lwdiv@divisor^0,w,c
  1897  0073E4  5E29               	subwf	___lwdiv@dividend^0,f,c
  1898  0073E6  502C               	movf	(___lwdiv@divisor+1)^0,w,c
  1899  0073E8  5A2A               	subwfb	(___lwdiv@dividend+1)^0,f,c
  1900  0073EA  802D               	bsf	___lwdiv@quotient^0,0,c
  1901  0073EC                     l2190:
  1902  0073EC  90D8               	bcf	status,0,c
  1903  0073EE  322C               	rrcf	(___lwdiv@divisor+1)^0,f,c
  1904  0073F0  322B               	rrcf	___lwdiv@divisor^0,f,c
  1905  0073F2  2E2F               	decfsz	___lwdiv@counter^0,f,c
  1906  0073F4  EFE3  F039         	goto	l2182
  1907  0073F8                     l916:
  1908  0073F8  C02D  F029         	movff	___lwdiv@quotient,?___lwdiv
  1909  0073FC  C02E  F02A         	movff	___lwdiv@quotient+1,?___lwdiv+1
  1910  007400  0012               	return		;funcret
  1911  007402                     __end_of___lwdiv:
  1912                           	callstack 0
  1913                           
  1914 ;; *************** function _pwmFrequency *****************
  1915 ;; Defined at:
  1916 ;;		line 50 in file "pwm.c"
  1917 ;; Parameters:    Size  Location     Type
  1918 ;;  freq            2   14[COMRAM] unsigned int 
  1919 ;; Auto vars:     Size  Location     Type
  1920 ;;		None
  1921 ;; Return value:  Size  Location     Type
  1922 ;;                  1    wreg      void 
  1923 ;; Registers used:
  1924 ;;		wreg, status,2, status,0, cstack
  1925 ;; Tracked objects:
  1926 ;;		On entry : 0/0
  1927 ;;		On exit  : 0/0
  1928 ;;		Unchanged: 0/0
  1929 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1930 ;;      Params:         2       0       0       0       0       0       0
  1931 ;;      Locals:         0       0       0       0       0       0       0
  1932 ;;      Temps:          0       0       0       0       0       0       0
  1933 ;;      Totals:         2       0       0       0       0       0       0
  1934 ;;Total ram usage:        2 bytes
  1935 ;; Hardware stack levels used:    1
  1936 ;; Hardware stack levels required when called:    1
  1937 ;; This function calls:
  1938 ;;		___aldiv
  1939 ;; This function is called by:
  1940 ;;		_teste1
  1941 ;; This function uses a non-reentrant model
  1942 ;;
  1943                           
  1944                           	psect	text10
  1945  0070D2                     __ptext10:
  1946                           	callstack 0
  1947  0070D2                     _pwmFrequency:
  1948                           	callstack 27
  1949  0070D2                     
  1950                           ;pwm.c: 53:     (*(volatile __near unsigned char*)0xFCB) = (125000 / (freq)) - 1;
  1951  0070D2  0E48               	movlw	72
  1952  0070D4  6E29               	movwf	___aldiv@dividend^0,c
  1953  0070D6  0EE8               	movlw	232
  1954  0070D8  6E2A               	movwf	(___aldiv@dividend+1)^0,c
  1955  0070DA  0E01               	movlw	1
  1956  0070DC  6E2B               	movwf	(___aldiv@dividend+2)^0,c
  1957  0070DE  0E00               	movlw	0
  1958  0070E0  6E2C               	movwf	(___aldiv@dividend+3)^0,c
  1959  0070E2  C037  F02D         	movff	pwmFrequency@freq,___aldiv@divisor
  1960  0070E6  C038  F02E         	movff	pwmFrequency@freq+1,___aldiv@divisor+1
  1961  0070EA  6A2F               	clrf	(___aldiv@divisor+2)^0,c
  1962  0070EC  6A30               	clrf	(___aldiv@divisor+3)^0,c
  1963  0070EE  EC4E  F03C         	call	___aldiv	;wreg free
  1964  0070F2  0429               	decf	?___aldiv^0,w,c
  1965  0070F4  6ECB               	movwf	203,c	;volatile
  1966  0070F6  0012               	return		;funcret
  1967  0070F8                     __end_of_pwmFrequency:
  1968                           	callstack 0
  1969                           
  1970 ;; *************** function ___aldiv *****************
  1971 ;; Defined at:
  1972 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\aldiv.c"
  1973 ;; Parameters:    Size  Location     Type
  1974 ;;  dividend        4    0[COMRAM] long 
  1975 ;;  divisor         4    4[COMRAM] long 
  1976 ;; Auto vars:     Size  Location     Type
  1977 ;;  quotient        4   10[COMRAM] long 
  1978 ;;  sign            1    9[COMRAM] unsigned char 
  1979 ;;  counter         1    8[COMRAM] unsigned char 
  1980 ;; Return value:  Size  Location     Type
  1981 ;;                  4    0[COMRAM] long 
  1982 ;; Registers used:
  1983 ;;		wreg, status,2, status,0
  1984 ;; Tracked objects:
  1985 ;;		On entry : 0/0
  1986 ;;		On exit  : 0/0
  1987 ;;		Unchanged: 0/0
  1988 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  1989 ;;      Params:         8       0       0       0       0       0       0
  1990 ;;      Locals:         6       0       0       0       0       0       0
  1991 ;;      Temps:          0       0       0       0       0       0       0
  1992 ;;      Totals:        14       0       0       0       0       0       0
  1993 ;;Total ram usage:       14 bytes
  1994 ;; Hardware stack levels used:    1
  1995 ;; This function calls:
  1996 ;;		Nothing
  1997 ;; This function is called by:
  1998 ;;		_pwmFrequency
  1999 ;; This function uses a non-reentrant model
  2000 ;;
  2001                           
  2002                           	psect	text11
  2003  00789C                     __ptext11:
  2004                           	callstack 0
  2005  00789C                     ___aldiv:
  2006                           	callstack 27
  2007  00789C  0E00               	movlw	0
  2008  00789E  6E32               	movwf	___aldiv@sign^0,c
  2009  0078A0  BE30               	btfsc	(___aldiv@divisor+3)^0,7,c
  2010  0078A2  EF57  F03C         	goto	u860
  2011  0078A6  EF55  F03C         	goto	u861
  2012  0078AA                     u861:
  2013  0078AA  EF61  F03C         	goto	l2056
  2014  0078AE                     u860:
  2015  0078AE  1E30               	comf	(___aldiv@divisor+3)^0,f,c
  2016  0078B0  1E2F               	comf	(___aldiv@divisor+2)^0,f,c
  2017  0078B2  1E2E               	comf	(___aldiv@divisor+1)^0,f,c
  2018  0078B4  6C2D               	negf	___aldiv@divisor^0,c
  2019  0078B6  0E00               	movlw	0
  2020  0078B8  222E               	addwfc	(___aldiv@divisor+1)^0,f,c
  2021  0078BA  222F               	addwfc	(___aldiv@divisor+2)^0,f,c
  2022  0078BC  2230               	addwfc	(___aldiv@divisor+3)^0,f,c
  2023  0078BE  0E01               	movlw	1
  2024  0078C0  6E32               	movwf	___aldiv@sign^0,c
  2025  0078C2                     l2056:
  2026  0078C2  BE2C               	btfsc	(___aldiv@dividend+3)^0,7,c
  2027  0078C4  EF68  F03C         	goto	u870
  2028  0078C8  EF66  F03C         	goto	u871
  2029  0078CC                     u871:
  2030  0078CC  EF72  F03C         	goto	l2062
  2031  0078D0                     u870:
  2032  0078D0  1E2C               	comf	(___aldiv@dividend+3)^0,f,c
  2033  0078D2  1E2B               	comf	(___aldiv@dividend+2)^0,f,c
  2034  0078D4  1E2A               	comf	(___aldiv@dividend+1)^0,f,c
  2035  0078D6  6C29               	negf	___aldiv@dividend^0,c
  2036  0078D8  0E00               	movlw	0
  2037  0078DA  222A               	addwfc	(___aldiv@dividend+1)^0,f,c
  2038  0078DC  222B               	addwfc	(___aldiv@dividend+2)^0,f,c
  2039  0078DE  222C               	addwfc	(___aldiv@dividend+3)^0,f,c
  2040  0078E0  0E01               	movlw	1
  2041  0078E2  1A32               	xorwf	___aldiv@sign^0,f,c
  2042  0078E4                     l2062:
  2043  0078E4  0E00               	movlw	0
  2044  0078E6  6E33               	movwf	___aldiv@quotient^0,c
  2045  0078E8  0E00               	movlw	0
  2046  0078EA  6E34               	movwf	(___aldiv@quotient+1)^0,c
  2047  0078EC  0E00               	movlw	0
  2048  0078EE  6E35               	movwf	(___aldiv@quotient+2)^0,c
  2049  0078F0  0E00               	movlw	0
  2050  0078F2  6E36               	movwf	(___aldiv@quotient+3)^0,c
  2051  0078F4  502D               	movf	___aldiv@divisor^0,w,c
  2052  0078F6  102E               	iorwf	(___aldiv@divisor+1)^0,w,c
  2053  0078F8  102F               	iorwf	(___aldiv@divisor+2)^0,w,c
  2054  0078FA  1030               	iorwf	(___aldiv@divisor+3)^0,w,c
  2055  0078FC  B4D8               	btfsc	status,2,c
  2056  0078FE  EF83  F03C         	goto	u881
  2057  007902  EF85  F03C         	goto	u880
  2058  007906                     u881:
  2059  007906  EFBB  F03C         	goto	l2084
  2060  00790A                     u880:
  2061  00790A  0E01               	movlw	1
  2062  00790C  6E31               	movwf	___aldiv@counter^0,c
  2063  00790E  EF8F  F03C         	goto	l2070
  2064  007912                     l2068:
  2065  007912  90D8               	bcf	status,0,c
  2066  007914  362D               	rlcf	___aldiv@divisor^0,f,c
  2067  007916  362E               	rlcf	(___aldiv@divisor+1)^0,f,c
  2068  007918  362F               	rlcf	(___aldiv@divisor+2)^0,f,c
  2069  00791A  3630               	rlcf	(___aldiv@divisor+3)^0,f,c
  2070  00791C  2A31               	incf	___aldiv@counter^0,f,c
  2071  00791E                     l2070:
  2072  00791E  AE30               	btfss	(___aldiv@divisor+3)^0,7,c
  2073  007920  EF94  F03C         	goto	u891
  2074  007924  EF96  F03C         	goto	u890
  2075  007928                     u891:
  2076  007928  EF89  F03C         	goto	l2068
  2077  00792C                     u890:
  2078  00792C                     l2072:
  2079  00792C  90D8               	bcf	status,0,c
  2080  00792E  3633               	rlcf	___aldiv@quotient^0,f,c
  2081  007930  3634               	rlcf	(___aldiv@quotient+1)^0,f,c
  2082  007932  3635               	rlcf	(___aldiv@quotient+2)^0,f,c
  2083  007934  3636               	rlcf	(___aldiv@quotient+3)^0,f,c
  2084  007936  502D               	movf	___aldiv@divisor^0,w,c
  2085  007938  5C29               	subwf	___aldiv@dividend^0,w,c
  2086  00793A  502E               	movf	(___aldiv@divisor+1)^0,w,c
  2087  00793C  582A               	subwfb	(___aldiv@dividend+1)^0,w,c
  2088  00793E  502F               	movf	(___aldiv@divisor+2)^0,w,c
  2089  007940  582B               	subwfb	(___aldiv@dividend+2)^0,w,c
  2090  007942  5030               	movf	(___aldiv@divisor+3)^0,w,c
  2091  007944  582C               	subwfb	(___aldiv@dividend+3)^0,w,c
  2092  007946  A0D8               	btfss	status,0,c
  2093  007948  EFA8  F03C         	goto	u901
  2094  00794C  EFAA  F03C         	goto	u900
  2095  007950                     u901:
  2096  007950  EFB3  F03C         	goto	l2080
  2097  007954                     u900:
  2098  007954  502D               	movf	___aldiv@divisor^0,w,c
  2099  007956  5E29               	subwf	___aldiv@dividend^0,f,c
  2100  007958  502E               	movf	(___aldiv@divisor+1)^0,w,c
  2101  00795A  5A2A               	subwfb	(___aldiv@dividend+1)^0,f,c
  2102  00795C  502F               	movf	(___aldiv@divisor+2)^0,w,c
  2103  00795E  5A2B               	subwfb	(___aldiv@dividend+2)^0,f,c
  2104  007960  5030               	movf	(___aldiv@divisor+3)^0,w,c
  2105  007962  5A2C               	subwfb	(___aldiv@dividend+3)^0,f,c
  2106  007964  8033               	bsf	___aldiv@quotient^0,0,c
  2107  007966                     l2080:
  2108  007966  90D8               	bcf	status,0,c
  2109  007968  3230               	rrcf	(___aldiv@divisor+3)^0,f,c
  2110  00796A  322F               	rrcf	(___aldiv@divisor+2)^0,f,c
  2111  00796C  322E               	rrcf	(___aldiv@divisor+1)^0,f,c
  2112  00796E  322D               	rrcf	___aldiv@divisor^0,f,c
  2113  007970  2E31               	decfsz	___aldiv@counter^0,f,c
  2114  007972  EF96  F03C         	goto	l2072
  2115  007976                     l2084:
  2116  007976  5032               	movf	___aldiv@sign^0,w,c
  2117  007978  B4D8               	btfsc	status,2,c
  2118  00797A  EFC1  F03C         	goto	u911
  2119  00797E  EFC3  F03C         	goto	u910
  2120  007982                     u911:
  2121  007982  EFCB  F03C         	goto	l2088
  2122  007986                     u910:
  2123  007986  1E36               	comf	(___aldiv@quotient+3)^0,f,c
  2124  007988  1E35               	comf	(___aldiv@quotient+2)^0,f,c
  2125  00798A  1E34               	comf	(___aldiv@quotient+1)^0,f,c
  2126  00798C  6C33               	negf	___aldiv@quotient^0,c
  2127  00798E  0E00               	movlw	0
  2128  007990  2234               	addwfc	(___aldiv@quotient+1)^0,f,c
  2129  007992  2235               	addwfc	(___aldiv@quotient+2)^0,f,c
  2130  007994  2236               	addwfc	(___aldiv@quotient+3)^0,f,c
  2131  007996                     l2088:
  2132  007996  C033  F029         	movff	___aldiv@quotient,?___aldiv
  2133  00799A  C034  F02A         	movff	___aldiv@quotient+1,?___aldiv+1
  2134  00799E  C035  F02B         	movff	___aldiv@quotient+2,?___aldiv+2
  2135  0079A2  C036  F02C         	movff	___aldiv@quotient+3,?___aldiv+3
  2136  0079A6  0012               	return		;funcret
  2137  0079A8                     __end_of___aldiv:
  2138                           	callstack 0
  2139                           
  2140 ;; *************** function _setTime *****************
  2141 ;; Defined at:
  2142 ;;		line 33 in file "var.c"
  2143 ;; Parameters:    Size  Location     Type
  2144 ;;  newTime         2    2[COMRAM] int 
  2145 ;; Auto vars:     Size  Location     Type
  2146 ;;		None
  2147 ;; Return value:  Size  Location     Type
  2148 ;;                  1    wreg      void 
  2149 ;; Registers used:
  2150 ;;		None
  2151 ;; Tracked objects:
  2152 ;;		On entry : 0/0
  2153 ;;		On exit  : 0/0
  2154 ;;		Unchanged: 0/0
  2155 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2156 ;;      Params:         2       0       0       0       0       0       0
  2157 ;;      Locals:         0       0       0       0       0       0       0
  2158 ;;      Temps:          0       0       0       0       0       0       0
  2159 ;;      Totals:         2       0       0       0       0       0       0
  2160 ;;Total ram usage:        2 bytes
  2161 ;; Hardware stack levels used:    1
  2162 ;; This function calls:
  2163 ;;		Nothing
  2164 ;; This function is called by:
  2165 ;;		_smLoop
  2166 ;; This function uses a non-reentrant model
  2167 ;;
  2168                           
  2169                           	psect	text12
  2170  006FFE                     __ptext12:
  2171                           	callstack 0
  2172  006FFE                     _setTime:
  2173                           	callstack 29
  2174  006FFE                     
  2175                           ;var.c: 34:     time = newTime;
  2176  006FFE  C02B  F04A         	movff	setTime@newTime,_time
  2177  007002  C02C  F04B         	movff	setTime@newTime+1,_time+1
  2178  007006  0012               	return		;funcret
  2179  007008                     __end_of_setTime:
  2180                           	callstack 0
  2181                           
  2182 ;; *************** function _setState *****************
  2183 ;; Defined at:
  2184 ;;		line 25 in file "var.c"
  2185 ;; Parameters:    Size  Location     Type
  2186 ;;  newState        1    wreg     unsigned char 
  2187 ;; Auto vars:     Size  Location     Type
  2188 ;;  newState        1    0[COMRAM] unsigned char 
  2189 ;; Return value:  Size  Location     Type
  2190 ;;                  1    wreg      void 
  2191 ;; Registers used:
  2192 ;;		wreg
  2193 ;; Tracked objects:
  2194 ;;		On entry : 0/0
  2195 ;;		On exit  : 0/0
  2196 ;;		Unchanged: 0/0
  2197 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2198 ;;      Params:         0       0       0       0       0       0       0
  2199 ;;      Locals:         1       0       0       0       0       0       0
  2200 ;;      Temps:          0       0       0       0       0       0       0
  2201 ;;      Totals:         1       0       0       0       0       0       0
  2202 ;;Total ram usage:        1 bytes
  2203 ;; Hardware stack levels used:    1
  2204 ;; This function calls:
  2205 ;;		Nothing
  2206 ;; This function is called by:
  2207 ;;		_smLoop
  2208 ;;		_smInit
  2209 ;; This function uses a non-reentrant model
  2210 ;;
  2211                           
  2212                           	psect	text13
  2213  006FBC                     __ptext13:
  2214                           	callstack 0
  2215  006FBC                     _setState:
  2216                           	callstack 29
  2217                           
  2218                           ;incstack = 0
  2219                           ;setState@newState stored from wreg
  2220  006FBC  6E29               	movwf	setState@newState^0,c
  2221  006FBE                     
  2222                           ;var.c: 26:     state = newState;
  2223  006FBE  C029  F051         	movff	setState@newState,_state
  2224  006FC2  0012               	return		;funcret
  2225  006FC4                     __end_of_setState:
  2226                           	callstack 0
  2227                           
  2228 ;; *************** function _setLanguage *****************
  2229 ;; Defined at:
  2230 ;;		line 72 in file "var.c"
  2231 ;; Parameters:    Size  Location     Type
  2232 ;;  newLanguage     1    wreg     unsigned char 
  2233 ;; Auto vars:     Size  Location     Type
  2234 ;;  newLanguage     1    0[COMRAM] unsigned char 
  2235 ;; Return value:  Size  Location     Type
  2236 ;;                  1    wreg      void 
  2237 ;; Registers used:
  2238 ;;		wreg, status,2, status,0
  2239 ;; Tracked objects:
  2240 ;;		On entry : 0/0
  2241 ;;		On exit  : 0/0
  2242 ;;		Unchanged: 0/0
  2243 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2244 ;;      Params:         0       0       0       0       0       0       0
  2245 ;;      Locals:         1       0       0       0       0       0       0
  2246 ;;      Temps:          0       0       0       0       0       0       0
  2247 ;;      Totals:         1       0       0       0       0       0       0
  2248 ;;Total ram usage:        1 bytes
  2249 ;; Hardware stack levels used:    1
  2250 ;; This function calls:
  2251 ;;		Nothing
  2252 ;; This function is called by:
  2253 ;;		_smLoop
  2254 ;; This function uses a non-reentrant model
  2255 ;;
  2256                           
  2257                           	psect	text14
  2258  006FF4                     __ptext14:
  2259                           	callstack 0
  2260  006FF4                     _setLanguage:
  2261                           	callstack 29
  2262                           
  2263                           ;incstack = 0
  2264                           ;setLanguage@newLanguage stored from wreg
  2265  006FF4  6E29               	movwf	setLanguage@newLanguage^0,c
  2266  006FF6                     
  2267                           ;var.c: 75:     language = newLanguage % 4;
  2268  006FF6  5029               	movf	setLanguage@newLanguage^0,w,c
  2269  006FF8  0B03               	andlw	3
  2270  006FFA  6E50               	movwf	_language^0,c
  2271  006FFC  0012               	return		;funcret
  2272  006FFE                     __end_of_setLanguage:
  2273                           	callstack 0
  2274                           
  2275 ;; *************** function _setAlarmLevel *****************
  2276 ;; Defined at:
  2277 ;;		line 45 in file "var.c"
  2278 ;; Parameters:    Size  Location     Type
  2279 ;;  newAlarmLeve    2    2[COMRAM] int 
  2280 ;; Auto vars:     Size  Location     Type
  2281 ;;		None
  2282 ;; Return value:  Size  Location     Type
  2283 ;;                  1    wreg      void 
  2284 ;; Registers used:
  2285 ;;		None
  2286 ;; Tracked objects:
  2287 ;;		On entry : 0/0
  2288 ;;		On exit  : 0/0
  2289 ;;		Unchanged: 0/0
  2290 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2291 ;;      Params:         2       0       0       0       0       0       0
  2292 ;;      Locals:         0       0       0       0       0       0       0
  2293 ;;      Temps:          0       0       0       0       0       0       0
  2294 ;;      Totals:         2       0       0       0       0       0       0
  2295 ;;Total ram usage:        2 bytes
  2296 ;; Hardware stack levels used:    1
  2297 ;; This function calls:
  2298 ;;		Nothing
  2299 ;; This function is called by:
  2300 ;;		_smLoop
  2301 ;; This function uses a non-reentrant model
  2302 ;;
  2303                           
  2304                           	psect	text15
  2305  006FEA                     __ptext15:
  2306                           	callstack 0
  2307  006FEA                     _setAlarmLevel:
  2308                           	callstack 29
  2309  006FEA                     
  2310                           ;var.c: 46:     alarmLevel = newAlarmLevel;
  2311  006FEA  C02B  F048         	movff	setAlarmLevel@newAlarmLevel,_alarmLevel
  2312  006FEE  C02C  F049         	movff	setAlarmLevel@newAlarmLevel+1,_alarmLevel+1
  2313  006FF2  0012               	return		;funcret
  2314  006FF4                     __end_of_setAlarmLevel:
  2315                           	callstack 0
  2316                           
  2317 ;; *************** function _outputPrint *****************
  2318 ;; Defined at:
  2319 ;;		line 24 in file "output.c"
  2320 ;; Parameters:    Size  Location     Type
  2321 ;;  numTela         2   16[COMRAM] int 
  2322 ;;  idioma          2   18[COMRAM] int 
  2323 ;; Auto vars:     Size  Location     Type
  2324 ;;		None
  2325 ;; Return value:  Size  Location     Type
  2326 ;;                  1    wreg      void 
  2327 ;; Registers used:
  2328 ;;		wreg, fsr2l, fsr2h, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2329 ;; Tracked objects:
  2330 ;;		On entry : 0/0
  2331 ;;		On exit  : 0/0
  2332 ;;		Unchanged: 0/0
  2333 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2334 ;;      Params:         4       0       0       0       0       0       0
  2335 ;;      Locals:         0       0       0       0       0       0       0
  2336 ;;      Temps:          4       0       0       0       0       0       0
  2337 ;;      Totals:         8       0       0       0       0       0       0
  2338 ;;Total ram usage:        8 bytes
  2339 ;; Hardware stack levels used:    1
  2340 ;; Hardware stack levels required when called:    3
  2341 ;; This function calls:
  2342 ;;		_adcRead1
  2343 ;;		_adcRead2
  2344 ;;		_getAlarmLevel
  2345 ;;		_getLanguage
  2346 ;;		_getTime
  2347 ;;		_lcdCommand
  2348 ;;		_lcdInt
  2349 ;;		_lcdIntAlarme
  2350 ;;		_lcdString
  2351 ;; This function is called by:
  2352 ;;		_smLoop
  2353 ;; This function uses a non-reentrant model
  2354 ;;
  2355                           
  2356                           	psect	text16
  2357  007BB2                     __ptext16:
  2358                           	callstack 0
  2359  007BB2                     _outputPrint:
  2360                           	callstack 26
  2361  007BB2                     
  2362                           ;output.c: 26:     if (numTela == STATE_TEMPO) {
  2363  007BB2  0E03               	movlw	3
  2364  007BB4  1839               	xorwf	outputPrint@numTela^0,w,c
  2365  007BB6  103A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2366  007BB8  A4D8               	btfss	status,2,c
  2367  007BBA  EFE1  F03D         	goto	u1191
  2368  007BBE  EFE3  F03D         	goto	u1190
  2369  007BC2                     u1191:
  2370  007BC2  EF1B  F03E         	goto	l2332
  2371  007BC6                     u1190:
  2372  007BC6                     
  2373                           ;output.c: 27:         lcdCommand(0x80);
  2374  007BC6  0E80               	movlw	128
  2375  007BC8  ECA3  F038         	call	_lcdCommand
  2376  007BCC                     
  2377                           ;output.c: 28:         lcdString(msgs[numTela][idioma]);
  2378  007BCC  C039  F03D         	movff	outputPrint@numTela,??_outputPrint
  2379  007BD0  C03A  F03E         	movff	outputPrint@numTela+1,??_outputPrint+1
  2380  007BD4  90D8               	bcf	status,0,c
  2381  007BD6  363D               	rlcf	??_outputPrint^0,f,c
  2382  007BD8  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2383  007BDA  90D8               	bcf	status,0,c
  2384  007BDC  363D               	rlcf	??_outputPrint^0,f,c
  2385  007BDE  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2386  007BE0  90D8               	bcf	status,0,c
  2387  007BE2  363D               	rlcf	??_outputPrint^0,f,c
  2388  007BE4  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2389  007BE6  0E01               	movlw	low _msgs
  2390  007BE8  6E3F               	movwf	(??_outputPrint+2)^0,c
  2391  007BEA  0E00               	movlw	high _msgs
  2392  007BEC  6E40               	movwf	(??_outputPrint+3)^0,c
  2393  007BEE  503D               	movf	??_outputPrint^0,w,c
  2394  007BF0  263F               	addwf	(??_outputPrint+2)^0,f,c
  2395  007BF2  503E               	movf	(??_outputPrint+1)^0,w,c
  2396  007BF4  2240               	addwfc	(??_outputPrint+3)^0,f,c
  2397  007BF6  90D8               	bcf	status,0,c
  2398  007BF8  343B               	rlcf	outputPrint@idioma^0,w,c
  2399  007BFA  6ED9               	movwf	fsr2l,c
  2400  007BFC  343C               	rlcf	(outputPrint@idioma+1)^0,w,c
  2401  007BFE  6EDA               	movwf	fsr2h,c
  2402  007C00  503F               	movf	(??_outputPrint+2)^0,w,c
  2403  007C02  26D9               	addwf	fsr2l,f,c
  2404  007C04  5040               	movf	(??_outputPrint+3)^0,w,c
  2405  007C06  22DA               	addwfc	fsr2h,f,c
  2406  007C08  CFDE F02B          	movff	postinc2,lcdString@msg
  2407  007C0C  CFDD F02C          	movff	postdec2,lcdString@msg+1
  2408  007C10  EC37  F039         	call	_lcdString	;wreg free
  2409  007C14                     
  2410                           ;output.c: 29:         lcdCommand(0xC0);
  2411  007C14  0EC0               	movlw	192
  2412  007C16  ECA3  F038         	call	_lcdCommand
  2413  007C1A                     
  2414                           ;output.c: 30:         lcdInt(getTime());
  2415  007C1A  ECF0  F037         	call	_getTime	;wreg free
  2416  007C1E  C029  F037         	movff	?_getTime,lcdInt@val
  2417  007C22  C02A  F038         	movff	?_getTime+1,lcdInt@val+1
  2418  007C26  ECD1  F03B         	call	_lcdInt	;wreg free
  2419  007C2A                     
  2420                           ;output.c: 31:         lcdString("           ");
  2421  007C2A  0E62               	movlw	low (STR_18+5)
  2422  007C2C  6E2B               	movwf	lcdString@msg^0,c
  2423  007C2E  0E7E               	movlw	high (STR_18+5)
  2424  007C30  6E2C               	movwf	(lcdString@msg+1)^0,c
  2425  007C32  EC37  F039         	call	_lcdString	;wreg free
  2426  007C36                     l2332:
  2427                           
  2428                           ;output.c: 33:     if (numTela == STATE_ALARME) {
  2429  007C36  0439               	decf	outputPrint@numTela^0,w,c
  2430  007C38  103A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2431  007C3A  A4D8               	btfss	status,2,c
  2432  007C3C  EF22  F03E         	goto	u1201
  2433  007C40  EF24  F03E         	goto	u1200
  2434  007C44                     u1201:
  2435  007C44  EF5C  F03E         	goto	l2344
  2436  007C48                     u1200:
  2437  007C48                     
  2438                           ;output.c: 34:         lcdCommand(0x80);
  2439  007C48  0E80               	movlw	128
  2440  007C4A  ECA3  F038         	call	_lcdCommand
  2441  007C4E                     
  2442                           ;output.c: 35:         lcdString(msgs[numTela][idioma]);
  2443  007C4E  C039  F03D         	movff	outputPrint@numTela,??_outputPrint
  2444  007C52  C03A  F03E         	movff	outputPrint@numTela+1,??_outputPrint+1
  2445  007C56  90D8               	bcf	status,0,c
  2446  007C58  363D               	rlcf	??_outputPrint^0,f,c
  2447  007C5A  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2448  007C5C  90D8               	bcf	status,0,c
  2449  007C5E  363D               	rlcf	??_outputPrint^0,f,c
  2450  007C60  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2451  007C62  90D8               	bcf	status,0,c
  2452  007C64  363D               	rlcf	??_outputPrint^0,f,c
  2453  007C66  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2454  007C68  0E01               	movlw	low _msgs
  2455  007C6A  6E3F               	movwf	(??_outputPrint+2)^0,c
  2456  007C6C  0E00               	movlw	high _msgs
  2457  007C6E  6E40               	movwf	(??_outputPrint+3)^0,c
  2458  007C70  503D               	movf	??_outputPrint^0,w,c
  2459  007C72  263F               	addwf	(??_outputPrint+2)^0,f,c
  2460  007C74  503E               	movf	(??_outputPrint+1)^0,w,c
  2461  007C76  2240               	addwfc	(??_outputPrint+3)^0,f,c
  2462  007C78  90D8               	bcf	status,0,c
  2463  007C7A  343B               	rlcf	outputPrint@idioma^0,w,c
  2464  007C7C  6ED9               	movwf	fsr2l,c
  2465  007C7E  343C               	rlcf	(outputPrint@idioma+1)^0,w,c
  2466  007C80  6EDA               	movwf	fsr2h,c
  2467  007C82  503F               	movf	(??_outputPrint+2)^0,w,c
  2468  007C84  26D9               	addwf	fsr2l,f,c
  2469  007C86  5040               	movf	(??_outputPrint+3)^0,w,c
  2470  007C88  22DA               	addwfc	fsr2h,f,c
  2471  007C8A  CFDE F02B          	movff	postinc2,lcdString@msg
  2472  007C8E  CFDD F02C          	movff	postdec2,lcdString@msg+1
  2473  007C92  EC37  F039         	call	_lcdString	;wreg free
  2474  007C96                     
  2475                           ;output.c: 36:         lcdCommand(0xC0);
  2476  007C96  0EC0               	movlw	192
  2477  007C98  ECA3  F038         	call	_lcdCommand
  2478  007C9C                     
  2479                           ;output.c: 37:         lcdInt(getAlarmLevel());
  2480  007C9C  ECEB  F037         	call	_getAlarmLevel	;wreg free
  2481  007CA0  C029  F037         	movff	?_getAlarmLevel,lcdInt@val
  2482  007CA4  C02A  F038         	movff	?_getAlarmLevel+1,lcdInt@val+1
  2483  007CA8  ECD1  F03B         	call	_lcdInt	;wreg free
  2484  007CAC                     
  2485                           ;output.c: 38:         lcdString("           ");
  2486  007CAC  0E62               	movlw	low (STR_18+5)
  2487  007CAE  6E2B               	movwf	lcdString@msg^0,c
  2488  007CB0  0E7E               	movlw	high (STR_18+5)
  2489  007CB2  6E2C               	movwf	(lcdString@msg+1)^0,c
  2490  007CB4  EC37  F039         	call	_lcdString	;wreg free
  2491  007CB8                     l2344:
  2492                           
  2493                           ;output.c: 40:     if (numTela == STATE_ALARME1) {
  2494  007CB8  0E02               	movlw	2
  2495  007CBA  1839               	xorwf	outputPrint@numTela^0,w,c
  2496  007CBC  103A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2497  007CBE  A4D8               	btfss	status,2,c
  2498  007CC0  EF64  F03E         	goto	u1211
  2499  007CC4  EF66  F03E         	goto	u1210
  2500  007CC8                     u1211:
  2501  007CC8  EFB2  F03E         	goto	l2362
  2502  007CCC                     u1210:
  2503  007CCC                     
  2504                           ;output.c: 41:         lcdCommand(0x80);
  2505  007CCC  0E80               	movlw	128
  2506  007CCE  ECA3  F038         	call	_lcdCommand
  2507  007CD2                     
  2508                           ;output.c: 42:         lcdString(msgs[numTela][idioma]);
  2509  007CD2  C039  F03D         	movff	outputPrint@numTela,??_outputPrint
  2510  007CD6  C03A  F03E         	movff	outputPrint@numTela+1,??_outputPrint+1
  2511  007CDA  90D8               	bcf	status,0,c
  2512  007CDC  363D               	rlcf	??_outputPrint^0,f,c
  2513  007CDE  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2514  007CE0  90D8               	bcf	status,0,c
  2515  007CE2  363D               	rlcf	??_outputPrint^0,f,c
  2516  007CE4  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2517  007CE6  90D8               	bcf	status,0,c
  2518  007CE8  363D               	rlcf	??_outputPrint^0,f,c
  2519  007CEA  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2520  007CEC  0E01               	movlw	low _msgs
  2521  007CEE  6E3F               	movwf	(??_outputPrint+2)^0,c
  2522  007CF0  0E00               	movlw	high _msgs
  2523  007CF2  6E40               	movwf	(??_outputPrint+3)^0,c
  2524  007CF4  503D               	movf	??_outputPrint^0,w,c
  2525  007CF6  263F               	addwf	(??_outputPrint+2)^0,f,c
  2526  007CF8  503E               	movf	(??_outputPrint+1)^0,w,c
  2527  007CFA  2240               	addwfc	(??_outputPrint+3)^0,f,c
  2528  007CFC  90D8               	bcf	status,0,c
  2529  007CFE  343B               	rlcf	outputPrint@idioma^0,w,c
  2530  007D00  6ED9               	movwf	fsr2l,c
  2531  007D02  343C               	rlcf	(outputPrint@idioma+1)^0,w,c
  2532  007D04  6EDA               	movwf	fsr2h,c
  2533  007D06  503F               	movf	(??_outputPrint+2)^0,w,c
  2534  007D08  26D9               	addwf	fsr2l,f,c
  2535  007D0A  5040               	movf	(??_outputPrint+3)^0,w,c
  2536  007D0C  22DA               	addwfc	fsr2h,f,c
  2537  007D0E  CFDE F02B          	movff	postinc2,lcdString@msg
  2538  007D12  CFDD F02C          	movff	postdec2,lcdString@msg+1
  2539  007D16  EC37  F039         	call	_lcdString	;wreg free
  2540  007D1A                     
  2541                           ;output.c: 44:         lcdCommand(0xC0);
  2542  007D1A  0EC0               	movlw	192
  2543  007D1C  ECA3  F038         	call	_lcdCommand
  2544  007D20                     
  2545                           ;output.c: 46:         lcdString("P1 ");
  2546  007D20  0EFA               	movlw	low STR_23
  2547  007D22  6E2B               	movwf	lcdString@msg^0,c
  2548  007D24  0E7F               	movlw	high STR_23
  2549  007D26  6E2C               	movwf	(lcdString@msg+1)^0,c
  2550  007D28  EC37  F039         	call	_lcdString	;wreg free
  2551  007D2C                     
  2552                           ;output.c: 47:         lcdIntAlarme(adcRead1());
  2553  007D2C  ECED  F038         	call	_adcRead1	;wreg free
  2554  007D30  C029  F037         	movff	?_adcRead1,lcdIntAlarme@val1
  2555  007D34  C02A  F038         	movff	?_adcRead1+1,lcdIntAlarme@val1+1
  2556  007D38  ECFB  F03A         	call	_lcdIntAlarme	;wreg free
  2557  007D3C                     
  2558                           ;output.c: 48:         lcdString(" P2 ");
  2559  007D3C  0EF5               	movlw	low STR_24
  2560  007D3E  6E2B               	movwf	lcdString@msg^0,c
  2561  007D40  0E7F               	movlw	high STR_24
  2562  007D42  6E2C               	movwf	(lcdString@msg+1)^0,c
  2563  007D44  EC37  F039         	call	_lcdString	;wreg free
  2564  007D48                     
  2565                           ;output.c: 49:         lcdIntAlarme(adcRead2());
  2566  007D48  EC12  F039         	call	_adcRead2	;wreg free
  2567  007D4C  C029  F037         	movff	?_adcRead2,lcdIntAlarme@val1
  2568  007D50  C02A  F038         	movff	?_adcRead2+1,lcdIntAlarme@val1+1
  2569  007D54  ECFB  F03A         	call	_lcdIntAlarme	;wreg free
  2570  007D58                     
  2571                           ;output.c: 50:         lcdString("           ");
  2572  007D58  0E62               	movlw	low (STR_18+5)
  2573  007D5A  6E2B               	movwf	lcdString@msg^0,c
  2574  007D5C  0E7E               	movlw	high (STR_18+5)
  2575  007D5E  6E2C               	movwf	(lcdString@msg+1)^0,c
  2576  007D60  EC37  F039         	call	_lcdString	;wreg free
  2577  007D64                     l2362:
  2578                           
  2579                           ;output.c: 52:     if (numTela == STATE_IDIOMA) {
  2580  007D64  5039               	movf	outputPrint@numTela^0,w,c
  2581  007D66  103A               	iorwf	(outputPrint@numTela+1)^0,w,c
  2582  007D68  A4D8               	btfss	status,2,c
  2583  007D6A  EFB9  F03E         	goto	u1221
  2584  007D6E  EFBB  F03E         	goto	u1220
  2585  007D72                     u1221:
  2586  007D72  EF25  F03F         	goto	l124
  2587  007D76                     u1220:
  2588  007D76                     
  2589                           ;output.c: 53:         lcdCommand(0x80);
  2590  007D76  0E80               	movlw	128
  2591  007D78  ECA3  F038         	call	_lcdCommand
  2592  007D7C                     
  2593                           ;output.c: 54:         lcdString(msgs[numTela][idioma]);
  2594  007D7C  C039  F03D         	movff	outputPrint@numTela,??_outputPrint
  2595  007D80  C03A  F03E         	movff	outputPrint@numTela+1,??_outputPrint+1
  2596  007D84  90D8               	bcf	status,0,c
  2597  007D86  363D               	rlcf	??_outputPrint^0,f,c
  2598  007D88  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2599  007D8A  90D8               	bcf	status,0,c
  2600  007D8C  363D               	rlcf	??_outputPrint^0,f,c
  2601  007D8E  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2602  007D90  90D8               	bcf	status,0,c
  2603  007D92  363D               	rlcf	??_outputPrint^0,f,c
  2604  007D94  363E               	rlcf	(??_outputPrint+1)^0,f,c
  2605  007D96  0E01               	movlw	low _msgs
  2606  007D98  6E3F               	movwf	(??_outputPrint+2)^0,c
  2607  007D9A  0E00               	movlw	high _msgs
  2608  007D9C  6E40               	movwf	(??_outputPrint+3)^0,c
  2609  007D9E  503D               	movf	??_outputPrint^0,w,c
  2610  007DA0  263F               	addwf	(??_outputPrint+2)^0,f,c
  2611  007DA2  503E               	movf	(??_outputPrint+1)^0,w,c
  2612  007DA4  2240               	addwfc	(??_outputPrint+3)^0,f,c
  2613  007DA6  90D8               	bcf	status,0,c
  2614  007DA8  343B               	rlcf	outputPrint@idioma^0,w,c
  2615  007DAA  6ED9               	movwf	fsr2l,c
  2616  007DAC  343C               	rlcf	(outputPrint@idioma+1)^0,w,c
  2617  007DAE  6EDA               	movwf	fsr2h,c
  2618  007DB0  503F               	movf	(??_outputPrint+2)^0,w,c
  2619  007DB2  26D9               	addwf	fsr2l,f,c
  2620  007DB4  5040               	movf	(??_outputPrint+3)^0,w,c
  2621  007DB6  22DA               	addwfc	fsr2h,f,c
  2622  007DB8  CFDE F02B          	movff	postinc2,lcdString@msg
  2623  007DBC  CFDD F02C          	movff	postdec2,lcdString@msg+1
  2624  007DC0  EC37  F039         	call	_lcdString	;wreg free
  2625  007DC4                     
  2626                           ;output.c: 55:         lcdCommand(0xC0);
  2627  007DC4  0EC0               	movlw	192
  2628  007DC6  ECA3  F038         	call	_lcdCommand
  2629  007DCA                     
  2630                           ;output.c: 56:         if (getLanguage() == 0) {
  2631  007DCA  ECDC  F037         	call	_getLanguage	;wreg free
  2632  007DCE  0900               	iorlw	0
  2633  007DD0  A4D8               	btfss	status,2,c
  2634  007DD2  EFED  F03E         	goto	u1231
  2635  007DD6  EFEF  F03E         	goto	u1230
  2636  007DDA                     u1231:
  2637  007DDA  EFF5  F03E         	goto	l2374
  2638  007DDE                     u1230:
  2639  007DDE                     
  2640                           ;output.c: 57:             lcdString("Portugues       ");
  2641  007DDE  0ED4               	movlw	low STR_26
  2642  007DE0  6E2B               	movwf	lcdString@msg^0,c
  2643  007DE2  0E7E               	movlw	high STR_26
  2644  007DE4  6E2C               	movwf	(lcdString@msg+1)^0,c
  2645  007DE6  EC37  F039         	call	_lcdString	;wreg free
  2646  007DEA                     l2374:
  2647                           
  2648                           ;output.c: 59:         if (getLanguage() == 1) {
  2649  007DEA  ECDC  F037         	call	_getLanguage	;wreg free
  2650  007DEE  06E8               	decf	wreg,f,c
  2651  007DF0  A4D8               	btfss	status,2,c
  2652  007DF2  EFFD  F03E         	goto	u1241
  2653  007DF6  EFFF  F03E         	goto	u1240
  2654  007DFA                     u1241:
  2655  007DFA  EF05  F03F         	goto	l2378
  2656  007DFE                     u1240:
  2657  007DFE                     
  2658                           ;output.c: 60:             lcdString("English         ");
  2659  007DFE  0EA1               	movlw	low STR_27
  2660  007E00  6E2B               	movwf	lcdString@msg^0,c
  2661  007E02  0E7E               	movlw	high STR_27
  2662  007E04  6E2C               	movwf	(lcdString@msg+1)^0,c
  2663  007E06  EC37  F039         	call	_lcdString	;wreg free
  2664  007E0A                     l2378:
  2665                           
  2666                           ;output.c: 62:         if (getLanguage() == 2) {
  2667  007E0A  ECDC  F037         	call	_getLanguage	;wreg free
  2668  007E0E  0A02               	xorlw	2
  2669  007E10  A4D8               	btfss	status,2,c
  2670  007E12  EF0D  F03F         	goto	u1251
  2671  007E16  EF0F  F03F         	goto	u1250
  2672  007E1A                     u1251:
  2673  007E1A  EF15  F03F         	goto	l2382
  2674  007E1E                     u1250:
  2675  007E1E                     
  2676                           ;output.c: 63:             lcdString("Deutsche        ");
  2677  007E1E  0EB2               	movlw	low STR_28
  2678  007E20  6E2B               	movwf	lcdString@msg^0,c
  2679  007E22  0E7E               	movlw	high STR_28
  2680  007E24  6E2C               	movwf	(lcdString@msg+1)^0,c
  2681  007E26  EC37  F039         	call	_lcdString	;wreg free
  2682  007E2A                     l2382:
  2683                           
  2684                           ;output.c: 65:         if (getLanguage() == 3) {
  2685  007E2A  ECDC  F037         	call	_getLanguage	;wreg free
  2686  007E2E  0A03               	xorlw	3
  2687  007E30  A4D8               	btfss	status,2,c
  2688  007E32  EF1D  F03F         	goto	u1261
  2689  007E36  EF1F  F03F         	goto	u1260
  2690  007E3A                     u1261:
  2691  007E3A  EF25  F03F         	goto	l124
  2692  007E3E                     u1260:
  2693  007E3E                     
  2694                           ;output.c: 66:             lcdString("Francais        ");
  2695  007E3E  0EC3               	movlw	low STR_29
  2696  007E40  6E2B               	movwf	lcdString@msg^0,c
  2697  007E42  0E7E               	movlw	high STR_29
  2698  007E44  6E2C               	movwf	(lcdString@msg+1)^0,c
  2699  007E46  EC37  F039         	call	_lcdString	;wreg free
  2700  007E4A                     l124:
  2701  007E4A  0012               	return		;funcret
  2702  007E4C                     __end_of_outputPrint:
  2703                           	callstack 0
  2704                           
  2705 ;; *************** function _lcdString *****************
  2706 ;; Defined at:
  2707 ;;		line 97 in file "lcd.c"
  2708 ;; Parameters:    Size  Location     Type
  2709 ;;  msg             2    2[COMRAM] PTR unsigned char 
  2710 ;;		 -> STR_29(17), STR_28(17), STR_27(17), STR_26(17), 
  2711 ;;		 -> STR_25(12), STR_24(5), STR_23(4), STR_22(12), 
  2712 ;;		 -> STR_21(12), STR_20(17), STR_19(17), STR_18(17), 
  2713 ;;		 -> STR_17(17), STR_16(17), STR_15(17), STR_14(17), 
  2714 ;;		 -> STR_13(17), STR_12(17), STR_11(17), STR_10(17), 
  2715 ;;		 -> STR_9(17), STR_8(17), STR_7(17), STR_6(17), 
  2716 ;;		 -> STR_5(17), STR_4(17), STR_3(17), STR_2(17), 
  2717 ;;		 -> STR_1(17), 
  2718 ;; Auto vars:     Size  Location     Type
  2719 ;;  i               2    6[COMRAM] int 
  2720 ;; Return value:  Size  Location     Type
  2721 ;;                  1    wreg      void 
  2722 ;; Registers used:
  2723 ;;		wreg, status,2, status,0, tblptrl, tblptrh, tblptru, cstack
  2724 ;; Tracked objects:
  2725 ;;		On entry : 0/0
  2726 ;;		On exit  : 0/0
  2727 ;;		Unchanged: 0/0
  2728 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2729 ;;      Params:         2       0       0       0       0       0       0
  2730 ;;      Locals:         2       0       0       0       0       0       0
  2731 ;;      Temps:          2       0       0       0       0       0       0
  2732 ;;      Totals:         6       0       0       0       0       0       0
  2733 ;;Total ram usage:        6 bytes
  2734 ;; Hardware stack levels used:    1
  2735 ;; Hardware stack levels required when called:    2
  2736 ;; This function calls:
  2737 ;;		_lcdData
  2738 ;; This function is called by:
  2739 ;;		_outputPrint
  2740 ;; This function uses a non-reentrant model
  2741 ;;
  2742                           
  2743                           	psect	text17
  2744  00726E                     __ptext17:
  2745                           	callstack 0
  2746  00726E                     _lcdString:
  2747                           	callstack 26
  2748  00726E                     
  2749                           ;lcd.c: 98:     int i=0;
  2750  00726E  0E00               	movlw	0
  2751  007270  6E30               	movwf	(lcdString@i+1)^0,c
  2752  007272  0E00               	movlw	0
  2753  007274  6E2F               	movwf	lcdString@i^0,c
  2754                           
  2755                           ;lcd.c: 99:     while (msg[i]!=0) {
  2756  007276  EF4D  F039         	goto	l2250
  2757  00727A                     l2246:
  2758                           
  2759                           ;lcd.c: 100:         lcdData(msg[i]);
  2760  00727A  502F               	movf	lcdString@i^0,w,c
  2761  00727C  242B               	addwf	lcdString@msg^0,w,c
  2762  00727E  6E2D               	movwf	??_lcdString^0,c
  2763  007280  5030               	movf	(lcdString@i+1)^0,w,c
  2764  007282  202C               	addwfc	(lcdString@msg+1)^0,w,c
  2765  007284  6E2E               	movwf	(??_lcdString+1)^0,c
  2766  007286  C02D  FFF6         	movff	??_lcdString,tblptrl
  2767  00728A  C02E  FFF7         	movff	??_lcdString+1,tblptrh
  2768  00728E                     	if	0	;tblptru may be non-zero
  2769  00728E                     	endif
  2770  00728E                     	if	0	;tblptru may be non-zero
  2771  00728E                     	endif
  2772  00728E  0008               	tblrd		*
  2773  007290  50F5               	movf	tablat,w,c
  2774  007292  EC24  F038         	call	_lcdData
  2775  007296                     
  2776                           ;lcd.c: 101:         i++;
  2777  007296  4A2F               	infsnz	lcdString@i^0,f,c
  2778  007298  2A30               	incf	(lcdString@i+1)^0,f,c
  2779  00729A                     l2250:
  2780                           
  2781                           ;lcd.c: 99:     while (msg[i]!=0) {
  2782  00729A  502F               	movf	lcdString@i^0,w,c
  2783  00729C  242B               	addwf	lcdString@msg^0,w,c
  2784  00729E  6E2D               	movwf	??_lcdString^0,c
  2785  0072A0  5030               	movf	(lcdString@i+1)^0,w,c
  2786  0072A2  202C               	addwfc	(lcdString@msg+1)^0,w,c
  2787  0072A4  6E2E               	movwf	(??_lcdString+1)^0,c
  2788  0072A6  C02D  FFF6         	movff	??_lcdString,tblptrl
  2789  0072AA  C02E  FFF7         	movff	??_lcdString+1,tblptrh
  2790  0072AE                     	if	0	;tblptru may be non-zero
  2791  0072AE                     	endif
  2792  0072AE                     	if	0	;tblptru may be non-zero
  2793  0072AE                     	endif
  2794  0072AE  0008               	tblrd		*
  2795  0072B0  50F5               	movf	tablat,w,c
  2796  0072B2  0900               	iorlw	0
  2797  0072B4  A4D8               	btfss	status,2,c
  2798  0072B6  EF5F  F039         	goto	u1101
  2799  0072BA  EF61  F039         	goto	u1100
  2800  0072BE                     u1101:
  2801  0072BE  EF3D  F039         	goto	l2246
  2802  0072C2                     u1100:
  2803  0072C2  0012               	return		;funcret
  2804  0072C4                     __end_of_lcdString:
  2805                           	callstack 0
  2806                           
  2807 ;; *************** function _lcdIntAlarme *****************
  2808 ;; Defined at:
  2809 ;;		line 83 in file "lcd.c"
  2810 ;; Parameters:    Size  Location     Type
  2811 ;;  val1            2   14[COMRAM] int 
  2812 ;; Auto vars:     Size  Location     Type
  2813 ;;		None
  2814 ;; Return value:  Size  Location     Type
  2815 ;;                  1    wreg      void 
  2816 ;; Registers used:
  2817 ;;		wreg, status,2, status,0, cstack
  2818 ;; Tracked objects:
  2819 ;;		On entry : 0/0
  2820 ;;		On exit  : 0/0
  2821 ;;		Unchanged: 0/0
  2822 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2823 ;;      Params:         2       0       0       0       0       0       0
  2824 ;;      Locals:         0       0       0       0       0       0       0
  2825 ;;      Temps:          0       0       0       0       0       0       0
  2826 ;;      Totals:         2       0       0       0       0       0       0
  2827 ;;Total ram usage:        2 bytes
  2828 ;; Hardware stack levels used:    1
  2829 ;; Hardware stack levels required when called:    2
  2830 ;; This function calls:
  2831 ;;		___awdiv
  2832 ;;		___awmod
  2833 ;;		_lcdData
  2834 ;; This function is called by:
  2835 ;;		_outputPrint
  2836 ;; This function uses a non-reentrant model
  2837 ;;
  2838                           
  2839                           	psect	text18
  2840  0075F6                     __ptext18:
  2841                           	callstack 0
  2842  0075F6                     _lcdIntAlarme:
  2843                           	callstack 26
  2844  0075F6                     
  2845                           ;lcd.c: 85:     if (val1 < 0) {
  2846  0075F6  BE38               	btfsc	(lcdIntAlarme@val1+1)^0,7,c
  2847  0075F8  EF02  F03B         	goto	u1090
  2848  0075FC  EF00  F03B         	goto	u1091
  2849  007600                     u1091:
  2850  007600  EF09  F03B         	goto	l2236
  2851  007604                     u1090:
  2852  007604                     
  2853                           ;lcd.c: 86:         val1 = val1 * (-1);
  2854  007604  6C37               	negf	lcdIntAlarme@val1^0,c
  2855  007606  1E38               	comf	(lcdIntAlarme@val1+1)^0,f,c
  2856  007608  B0D8               	btfsc	status,0,c
  2857  00760A  2A38               	incf	(lcdIntAlarme@val1+1)^0,f,c
  2858  00760C                     
  2859                           ;lcd.c: 87:         lcdData('-');
  2860  00760C  0E2D               	movlw	45
  2861  00760E  EC24  F038         	call	_lcdData
  2862  007612                     l2236:
  2863                           
  2864                           ;lcd.c: 90:     lcdData((val1 / 1000) % 10 + 48);
  2865  007612  0E03               	movlw	3
  2866  007614  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2867  007616  0EE8               	movlw	232
  2868  007618  6E2B               	movwf	___awdiv@divisor^0,c
  2869  00761A  C037  F029         	movff	lcdIntAlarme@val1,___awdiv@dividend
  2870  00761E  C038  F02A         	movff	lcdIntAlarme@val1+1,___awdiv@dividend+1
  2871  007622  EC99  F03A         	call	___awdiv	;wreg free
  2872  007626  C029  F031         	movff	?___awdiv,___awmod@dividend
  2873  00762A  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  2874  00762E  0E00               	movlw	0
  2875  007630  6E34               	movwf	(___awmod@divisor+1)^0,c
  2876  007632  0E0A               	movlw	10
  2877  007634  6E33               	movwf	___awmod@divisor^0,c
  2878  007636  EC41  F03A         	call	___awmod	;wreg free
  2879  00763A  5031               	movf	?___awmod^0,w,c
  2880  00763C  0F30               	addlw	48
  2881  00763E  EC24  F038         	call	_lcdData
  2882  007642                     
  2883                           ;lcd.c: 91:     lcdData((val1 / 100) % 10 + 48);
  2884  007642  0E00               	movlw	0
  2885  007644  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2886  007646  0E64               	movlw	100
  2887  007648  6E2B               	movwf	___awdiv@divisor^0,c
  2888  00764A  C037  F029         	movff	lcdIntAlarme@val1,___awdiv@dividend
  2889  00764E  C038  F02A         	movff	lcdIntAlarme@val1+1,___awdiv@dividend+1
  2890  007652  EC99  F03A         	call	___awdiv	;wreg free
  2891  007656  C029  F031         	movff	?___awdiv,___awmod@dividend
  2892  00765A  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  2893  00765E  0E00               	movlw	0
  2894  007660  6E34               	movwf	(___awmod@divisor+1)^0,c
  2895  007662  0E0A               	movlw	10
  2896  007664  6E33               	movwf	___awmod@divisor^0,c
  2897  007666  EC41  F03A         	call	___awmod	;wreg free
  2898  00766A  5031               	movf	?___awmod^0,w,c
  2899  00766C  0F30               	addlw	48
  2900  00766E  EC24  F038         	call	_lcdData
  2901  007672                     
  2902                           ;lcd.c: 92:     lcdData((val1 / 10) % 10 + 48);
  2903  007672  0E00               	movlw	0
  2904  007674  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2905  007676  0E0A               	movlw	10
  2906  007678  6E2B               	movwf	___awdiv@divisor^0,c
  2907  00767A  C037  F029         	movff	lcdIntAlarme@val1,___awdiv@dividend
  2908  00767E  C038  F02A         	movff	lcdIntAlarme@val1+1,___awdiv@dividend+1
  2909  007682  EC99  F03A         	call	___awdiv	;wreg free
  2910  007686  C029  F031         	movff	?___awdiv,___awmod@dividend
  2911  00768A  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  2912  00768E  0E00               	movlw	0
  2913  007690  6E34               	movwf	(___awmod@divisor+1)^0,c
  2914  007692  0E0A               	movlw	10
  2915  007694  6E33               	movwf	___awmod@divisor^0,c
  2916  007696  EC41  F03A         	call	___awmod	;wreg free
  2917  00769A  5031               	movf	?___awmod^0,w,c
  2918  00769C  0F30               	addlw	48
  2919  00769E  EC24  F038         	call	_lcdData
  2920  0076A2                     
  2921                           ;lcd.c: 93:     lcdData((val1 / 1) % 10 + 48);
  2922  0076A2  C037  F031         	movff	lcdIntAlarme@val1,___awmod@dividend
  2923  0076A6  C038  F032         	movff	lcdIntAlarme@val1+1,___awmod@dividend+1
  2924  0076AA  0E00               	movlw	0
  2925  0076AC  6E34               	movwf	(___awmod@divisor+1)^0,c
  2926  0076AE  0E0A               	movlw	10
  2927  0076B0  6E33               	movwf	___awmod@divisor^0,c
  2928  0076B2  EC41  F03A         	call	___awmod	;wreg free
  2929  0076B6  5031               	movf	?___awmod^0,w,c
  2930  0076B8  0F30               	addlw	48
  2931  0076BA  EC24  F038         	call	_lcdData
  2932  0076BE  0012               	return		;funcret
  2933  0076C0                     __end_of_lcdIntAlarme:
  2934                           	callstack 0
  2935                           
  2936 ;; *************** function _lcdInt *****************
  2937 ;; Defined at:
  2938 ;;		line 71 in file "lcd.c"
  2939 ;; Parameters:    Size  Location     Type
  2940 ;;  val             2   14[COMRAM] int 
  2941 ;; Auto vars:     Size  Location     Type
  2942 ;;		None
  2943 ;; Return value:  Size  Location     Type
  2944 ;;                  1    wreg      void 
  2945 ;; Registers used:
  2946 ;;		wreg, status,2, status,0, cstack
  2947 ;; Tracked objects:
  2948 ;;		On entry : 0/0
  2949 ;;		On exit  : 0/0
  2950 ;;		Unchanged: 0/0
  2951 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  2952 ;;      Params:         2       0       0       0       0       0       0
  2953 ;;      Locals:         0       0       0       0       0       0       0
  2954 ;;      Temps:          0       0       0       0       0       0       0
  2955 ;;      Totals:         2       0       0       0       0       0       0
  2956 ;;Total ram usage:        2 bytes
  2957 ;; Hardware stack levels used:    1
  2958 ;; Hardware stack levels required when called:    2
  2959 ;; This function calls:
  2960 ;;		___awdiv
  2961 ;;		___awmod
  2962 ;;		_lcdData
  2963 ;; This function is called by:
  2964 ;;		_outputPrint
  2965 ;; This function uses a non-reentrant model
  2966 ;;
  2967                           
  2968                           	psect	text19
  2969  0077A2                     __ptext19:
  2970                           	callstack 0
  2971  0077A2                     _lcdInt:
  2972                           	callstack 26
  2973  0077A2                     
  2974                           ;lcd.c: 72:     if (val < 0) {
  2975  0077A2  BE38               	btfsc	(lcdInt@val+1)^0,7,c
  2976  0077A4  EFD8  F03B         	goto	u1080
  2977  0077A8  EFD6  F03B         	goto	u1081
  2978  0077AC                     u1081:
  2979  0077AC  EFDF  F03B         	goto	l2220
  2980  0077B0                     u1080:
  2981  0077B0                     
  2982                           ;lcd.c: 73:         val = val * (-1);
  2983  0077B0  6C37               	negf	lcdInt@val^0,c
  2984  0077B2  1E38               	comf	(lcdInt@val+1)^0,f,c
  2985  0077B4  B0D8               	btfsc	status,0,c
  2986  0077B6  2A38               	incf	(lcdInt@val+1)^0,f,c
  2987  0077B8                     
  2988                           ;lcd.c: 74:         lcdData('-');
  2989  0077B8  0E2D               	movlw	45
  2990  0077BA  EC24  F038         	call	_lcdData
  2991  0077BE                     l2220:
  2992                           
  2993                           ;lcd.c: 76:     lcdData((val / 10000) % 10 + 48);
  2994  0077BE  0E27               	movlw	39
  2995  0077C0  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  2996  0077C2  0E10               	movlw	16
  2997  0077C4  6E2B               	movwf	___awdiv@divisor^0,c
  2998  0077C6  C037  F029         	movff	lcdInt@val,___awdiv@dividend
  2999  0077CA  C038  F02A         	movff	lcdInt@val+1,___awdiv@dividend+1
  3000  0077CE  EC99  F03A         	call	___awdiv	;wreg free
  3001  0077D2  C029  F031         	movff	?___awdiv,___awmod@dividend
  3002  0077D6  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  3003  0077DA  0E00               	movlw	0
  3004  0077DC  6E34               	movwf	(___awmod@divisor+1)^0,c
  3005  0077DE  0E0A               	movlw	10
  3006  0077E0  6E33               	movwf	___awmod@divisor^0,c
  3007  0077E2  EC41  F03A         	call	___awmod	;wreg free
  3008  0077E6  5031               	movf	?___awmod^0,w,c
  3009  0077E8  0F30               	addlw	48
  3010  0077EA  EC24  F038         	call	_lcdData
  3011  0077EE                     
  3012                           ;lcd.c: 77:     lcdData((val / 1000) % 10 + 48);
  3013  0077EE  0E03               	movlw	3
  3014  0077F0  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  3015  0077F2  0EE8               	movlw	232
  3016  0077F4  6E2B               	movwf	___awdiv@divisor^0,c
  3017  0077F6  C037  F029         	movff	lcdInt@val,___awdiv@dividend
  3018  0077FA  C038  F02A         	movff	lcdInt@val+1,___awdiv@dividend+1
  3019  0077FE  EC99  F03A         	call	___awdiv	;wreg free
  3020  007802  C029  F031         	movff	?___awdiv,___awmod@dividend
  3021  007806  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  3022  00780A  0E00               	movlw	0
  3023  00780C  6E34               	movwf	(___awmod@divisor+1)^0,c
  3024  00780E  0E0A               	movlw	10
  3025  007810  6E33               	movwf	___awmod@divisor^0,c
  3026  007812  EC41  F03A         	call	___awmod	;wreg free
  3027  007816  5031               	movf	?___awmod^0,w,c
  3028  007818  0F30               	addlw	48
  3029  00781A  EC24  F038         	call	_lcdData
  3030  00781E                     
  3031                           ;lcd.c: 78:     lcdData((val / 100) % 10 + 48);
  3032  00781E  0E00               	movlw	0
  3033  007820  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  3034  007822  0E64               	movlw	100
  3035  007824  6E2B               	movwf	___awdiv@divisor^0,c
  3036  007826  C037  F029         	movff	lcdInt@val,___awdiv@dividend
  3037  00782A  C038  F02A         	movff	lcdInt@val+1,___awdiv@dividend+1
  3038  00782E  EC99  F03A         	call	___awdiv	;wreg free
  3039  007832  C029  F031         	movff	?___awdiv,___awmod@dividend
  3040  007836  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  3041  00783A  0E00               	movlw	0
  3042  00783C  6E34               	movwf	(___awmod@divisor+1)^0,c
  3043  00783E  0E0A               	movlw	10
  3044  007840  6E33               	movwf	___awmod@divisor^0,c
  3045  007842  EC41  F03A         	call	___awmod	;wreg free
  3046  007846  5031               	movf	?___awmod^0,w,c
  3047  007848  0F30               	addlw	48
  3048  00784A  EC24  F038         	call	_lcdData
  3049  00784E                     
  3050                           ;lcd.c: 79:     lcdData((val / 10) % 10 + 48);
  3051  00784E  0E00               	movlw	0
  3052  007850  6E2C               	movwf	(___awdiv@divisor+1)^0,c
  3053  007852  0E0A               	movlw	10
  3054  007854  6E2B               	movwf	___awdiv@divisor^0,c
  3055  007856  C037  F029         	movff	lcdInt@val,___awdiv@dividend
  3056  00785A  C038  F02A         	movff	lcdInt@val+1,___awdiv@dividend+1
  3057  00785E  EC99  F03A         	call	___awdiv	;wreg free
  3058  007862  C029  F031         	movff	?___awdiv,___awmod@dividend
  3059  007866  C02A  F032         	movff	?___awdiv+1,___awmod@dividend+1
  3060  00786A  0E00               	movlw	0
  3061  00786C  6E34               	movwf	(___awmod@divisor+1)^0,c
  3062  00786E  0E0A               	movlw	10
  3063  007870  6E33               	movwf	___awmod@divisor^0,c
  3064  007872  EC41  F03A         	call	___awmod	;wreg free
  3065  007876  5031               	movf	?___awmod^0,w,c
  3066  007878  0F30               	addlw	48
  3067  00787A  EC24  F038         	call	_lcdData
  3068  00787E                     
  3069                           ;lcd.c: 80:     lcdData((val / 1) % 10 + 48);
  3070  00787E  C037  F031         	movff	lcdInt@val,___awmod@dividend
  3071  007882  C038  F032         	movff	lcdInt@val+1,___awmod@dividend+1
  3072  007886  0E00               	movlw	0
  3073  007888  6E34               	movwf	(___awmod@divisor+1)^0,c
  3074  00788A  0E0A               	movlw	10
  3075  00788C  6E33               	movwf	___awmod@divisor^0,c
  3076  00788E  EC41  F03A         	call	___awmod	;wreg free
  3077  007892  5031               	movf	?___awmod^0,w,c
  3078  007894  0F30               	addlw	48
  3079  007896  EC24  F038         	call	_lcdData
  3080  00789A  0012               	return		;funcret
  3081  00789C                     __end_of_lcdInt:
  3082                           	callstack 0
  3083                           
  3084 ;; *************** function _lcdData *****************
  3085 ;; Defined at:
  3086 ;;		line 56 in file "lcd.c"
  3087 ;; Parameters:    Size  Location     Type
  3088 ;;  valor           1    wreg     unsigned char 
  3089 ;; Auto vars:     Size  Location     Type
  3090 ;;  valor           1    1[COMRAM] unsigned char 
  3091 ;; Return value:  Size  Location     Type
  3092 ;;                  1    wreg      void 
  3093 ;; Registers used:
  3094 ;;		wreg, status,2, status,0, cstack
  3095 ;; Tracked objects:
  3096 ;;		On entry : 0/0
  3097 ;;		On exit  : 0/0
  3098 ;;		Unchanged: 0/0
  3099 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3100 ;;      Params:         0       0       0       0       0       0       0
  3101 ;;      Locals:         1       0       0       0       0       0       0
  3102 ;;      Temps:          0       0       0       0       0       0       0
  3103 ;;      Totals:         1       0       0       0       0       0       0
  3104 ;;Total ram usage:        1 bytes
  3105 ;; Hardware stack levels used:    1
  3106 ;; Hardware stack levels required when called:    1
  3107 ;; This function calls:
  3108 ;;		_Delay40us
  3109 ;; This function is called by:
  3110 ;;		_lcdInt
  3111 ;;		_lcdIntAlarme
  3112 ;;		_lcdString
  3113 ;;		_printf
  3114 ;; This function uses a non-reentrant model
  3115 ;;
  3116                           
  3117                           	psect	text20
  3118  007048                     __ptext20:
  3119                           	callstack 0
  3120  007048                     _lcdData:
  3121                           	callstack 26
  3122                           
  3123                           ;incstack = 0
  3124                           ;lcdData@valor stored from wreg
  3125  007048  6E2A               	movwf	lcdData@valor^0,c
  3126  00704A                     
  3127                           ;lcd.c: 57:     (((*(volatile __near unsigned char*)0xF84)) |= (1<<(2)));
  3128  00704A  8484               	bsf	132,2,c	;volatile
  3129                           
  3130                           ;lcd.c: 58:     (((*(volatile __near unsigned char*)0xF84)) &= ~(1<<(0)) );
  3131  00704C  9084               	bcf	132,0,c	;volatile
  3132  00704E                     
  3133                           ;lcd.c: 60:     (*(volatile __near unsigned char*)0xF83) = valor;
  3134  00704E  C02A  FF83         	movff	lcdData@valor,3971	;volatile
  3135  007052                     
  3136                           ;lcd.c: 62:     (((*(volatile __near unsigned char*)0xF84)) |= (1<<(1)));
  3137  007052  8284               	bsf	132,1,c	;volatile
  3138  007054                     
  3139                           ;lcd.c: 63:     (((*(volatile __near unsigned char*)0xF84)) &= ~(1<<(1)) );
  3140  007054  9284               	bcf	132,1,c	;volatile
  3141  007056                     
  3142                           ;lcd.c: 65:     (((*(volatile __near unsigned char*)0xF84)) &= ~(1<<(2)) );
  3143  007056  9484               	bcf	132,2,c	;volatile
  3144  007058                     
  3145                           ;lcd.c: 66:     Delay40us();
  3146  007058  EC2F  F038         	call	_Delay40us	;wreg free
  3147  00705C  0012               	return		;funcret
  3148  00705E                     __end_of_lcdData:
  3149                           	callstack 0
  3150                           
  3151 ;; *************** function ___awmod *****************
  3152 ;; Defined at:
  3153 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\awmod.c"
  3154 ;; Parameters:    Size  Location     Type
  3155 ;;  dividend        2    8[COMRAM] int 
  3156 ;;  divisor         2   10[COMRAM] int 
  3157 ;; Auto vars:     Size  Location     Type
  3158 ;;  sign            1   13[COMRAM] unsigned char 
  3159 ;;  counter         1   12[COMRAM] unsigned char 
  3160 ;; Return value:  Size  Location     Type
  3161 ;;                  2    8[COMRAM] int 
  3162 ;; Registers used:
  3163 ;;		wreg, status,2, status,0
  3164 ;; Tracked objects:
  3165 ;;		On entry : 0/0
  3166 ;;		On exit  : 0/0
  3167 ;;		Unchanged: 0/0
  3168 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3169 ;;      Params:         4       0       0       0       0       0       0
  3170 ;;      Locals:         2       0       0       0       0       0       0
  3171 ;;      Temps:          0       0       0       0       0       0       0
  3172 ;;      Totals:         6       0       0       0       0       0       0
  3173 ;;Total ram usage:        6 bytes
  3174 ;; Hardware stack levels used:    1
  3175 ;; This function calls:
  3176 ;;		Nothing
  3177 ;; This function is called by:
  3178 ;;		_lcdInt
  3179 ;;		_lcdIntAlarme
  3180 ;;		_rtcPutSeconds
  3181 ;;		_rtcPutMinutes
  3182 ;;		_rtcPutHours
  3183 ;;		_rtcPutDate
  3184 ;;		_rtcPutMonth
  3185 ;;		_rtcPutYear
  3186 ;; This function uses a non-reentrant model
  3187 ;;
  3188                           
  3189                           	psect	text21
  3190  007482                     __ptext21:
  3191                           	callstack 0
  3192  007482                     ___awmod:
  3193                           	callstack 27
  3194  007482  0E00               	movlw	0
  3195  007484  6E36               	movwf	___awmod@sign^0,c
  3196  007486  BE32               	btfsc	(___awmod@dividend+1)^0,7,c
  3197  007488  EF4A  F03A         	goto	u980
  3198  00748C  EF48  F03A         	goto	u981
  3199  007490                     u981:
  3200  007490  EF50  F03A         	goto	l2144
  3201  007494                     u980:
  3202  007494  6C31               	negf	___awmod@dividend^0,c
  3203  007496  1E32               	comf	(___awmod@dividend+1)^0,f,c
  3204  007498  B0D8               	btfsc	status,0,c
  3205  00749A  2A32               	incf	(___awmod@dividend+1)^0,f,c
  3206  00749C  0E01               	movlw	1
  3207  00749E  6E36               	movwf	___awmod@sign^0,c
  3208  0074A0                     l2144:
  3209  0074A0  BE34               	btfsc	(___awmod@divisor+1)^0,7,c
  3210  0074A2  EF57  F03A         	goto	u990
  3211  0074A6  EF55  F03A         	goto	u991
  3212  0074AA                     u991:
  3213  0074AA  EF5B  F03A         	goto	l2148
  3214  0074AE                     u990:
  3215  0074AE  6C33               	negf	___awmod@divisor^0,c
  3216  0074B0  1E34               	comf	(___awmod@divisor+1)^0,f,c
  3217  0074B2  B0D8               	btfsc	status,0,c
  3218  0074B4  2A34               	incf	(___awmod@divisor+1)^0,f,c
  3219  0074B6                     l2148:
  3220  0074B6  5033               	movf	___awmod@divisor^0,w,c
  3221  0074B8  1034               	iorwf	(___awmod@divisor+1)^0,w,c
  3222  0074BA  B4D8               	btfsc	status,2,c
  3223  0074BC  EF62  F03A         	goto	u1001
  3224  0074C0  EF64  F03A         	goto	u1000
  3225  0074C4                     u1001:
  3226  0074C4  EF88  F03A         	goto	l2164
  3227  0074C8                     u1000:
  3228  0074C8  0E01               	movlw	1
  3229  0074CA  6E35               	movwf	___awmod@counter^0,c
  3230  0074CC  EF6C  F03A         	goto	l2154
  3231  0074D0                     l2152:
  3232  0074D0  90D8               	bcf	status,0,c
  3233  0074D2  3633               	rlcf	___awmod@divisor^0,f,c
  3234  0074D4  3634               	rlcf	(___awmod@divisor+1)^0,f,c
  3235  0074D6  2A35               	incf	___awmod@counter^0,f,c
  3236  0074D8                     l2154:
  3237  0074D8  AE34               	btfss	(___awmod@divisor+1)^0,7,c
  3238  0074DA  EF71  F03A         	goto	u1011
  3239  0074DE  EF73  F03A         	goto	u1010
  3240  0074E2                     u1011:
  3241  0074E2  EF68  F03A         	goto	l2152
  3242  0074E6                     u1010:
  3243  0074E6                     l2156:
  3244  0074E6  5033               	movf	___awmod@divisor^0,w,c
  3245  0074E8  5C31               	subwf	___awmod@dividend^0,w,c
  3246  0074EA  5034               	movf	(___awmod@divisor+1)^0,w,c
  3247  0074EC  5832               	subwfb	(___awmod@dividend+1)^0,w,c
  3248  0074EE  A0D8               	btfss	status,0,c
  3249  0074F0  EF7C  F03A         	goto	u1021
  3250  0074F4  EF7E  F03A         	goto	u1020
  3251  0074F8                     u1021:
  3252  0074F8  EF82  F03A         	goto	l2160
  3253  0074FC                     u1020:
  3254  0074FC  5033               	movf	___awmod@divisor^0,w,c
  3255  0074FE  5E31               	subwf	___awmod@dividend^0,f,c
  3256  007500  5034               	movf	(___awmod@divisor+1)^0,w,c
  3257  007502  5A32               	subwfb	(___awmod@dividend+1)^0,f,c
  3258  007504                     l2160:
  3259  007504  90D8               	bcf	status,0,c
  3260  007506  3234               	rrcf	(___awmod@divisor+1)^0,f,c
  3261  007508  3233               	rrcf	___awmod@divisor^0,f,c
  3262  00750A  2E35               	decfsz	___awmod@counter^0,f,c
  3263  00750C  EF73  F03A         	goto	l2156
  3264  007510                     l2164:
  3265  007510  5036               	movf	___awmod@sign^0,w,c
  3266  007512  B4D8               	btfsc	status,2,c
  3267  007514  EF8E  F03A         	goto	u1031
  3268  007518  EF90  F03A         	goto	u1030
  3269  00751C                     u1031:
  3270  00751C  EF94  F03A         	goto	l2168
  3271  007520                     u1030:
  3272  007520  6C31               	negf	___awmod@dividend^0,c
  3273  007522  1E32               	comf	(___awmod@dividend+1)^0,f,c
  3274  007524  B0D8               	btfsc	status,0,c
  3275  007526  2A32               	incf	(___awmod@dividend+1)^0,f,c
  3276  007528                     l2168:
  3277  007528  C031  F031         	movff	___awmod@dividend,?___awmod
  3278  00752C  C032  F032         	movff	___awmod@dividend+1,?___awmod+1
  3279  007530  0012               	return		;funcret
  3280  007532                     __end_of___awmod:
  3281                           	callstack 0
  3282                           
  3283 ;; *************** function ___awdiv *****************
  3284 ;; Defined at:
  3285 ;;		line 7 in file "C:\Program Files\Microchip\xc8\v2.20\pic\sources\c99\common\awdiv.c"
  3286 ;; Parameters:    Size  Location     Type
  3287 ;;  dividend        2    0[COMRAM] int 
  3288 ;;  divisor         2    2[COMRAM] int 
  3289 ;; Auto vars:     Size  Location     Type
  3290 ;;  quotient        2    6[COMRAM] int 
  3291 ;;  sign            1    5[COMRAM] unsigned char 
  3292 ;;  counter         1    4[COMRAM] unsigned char 
  3293 ;; Return value:  Size  Location     Type
  3294 ;;                  2    0[COMRAM] int 
  3295 ;; Registers used:
  3296 ;;		wreg, status,2, status,0
  3297 ;; Tracked objects:
  3298 ;;		On entry : 0/0
  3299 ;;		On exit  : 0/0
  3300 ;;		Unchanged: 0/0
  3301 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3302 ;;      Params:         4       0       0       0       0       0       0
  3303 ;;      Locals:         4       0       0       0       0       0       0
  3304 ;;      Temps:          0       0       0       0       0       0       0
  3305 ;;      Totals:         8       0       0       0       0       0       0
  3306 ;;Total ram usage:        8 bytes
  3307 ;; Hardware stack levels used:    1
  3308 ;; This function calls:
  3309 ;;		Nothing
  3310 ;; This function is called by:
  3311 ;;		_lcdInt
  3312 ;;		_lcdIntAlarme
  3313 ;;		_rtcPutSeconds
  3314 ;;		_rtcPutMinutes
  3315 ;;		_rtcPutHours
  3316 ;;		_rtcPutDate
  3317 ;;		_rtcPutMonth
  3318 ;;		_rtcPutYear
  3319 ;; This function uses a non-reentrant model
  3320 ;;
  3321                           
  3322                           	psect	text22
  3323  007532                     __ptext22:
  3324                           	callstack 0
  3325  007532                     ___awdiv:
  3326                           	callstack 27
  3327  007532  0E00               	movlw	0
  3328  007534  6E2E               	movwf	___awdiv@sign^0,c
  3329  007536  BE2C               	btfsc	(___awdiv@divisor+1)^0,7,c
  3330  007538  EFA2  F03A         	goto	u920
  3331  00753C  EFA0  F03A         	goto	u921
  3332  007540                     u921:
  3333  007540  EFA8  F03A         	goto	l2100
  3334  007544                     u920:
  3335  007544  6C2B               	negf	___awdiv@divisor^0,c
  3336  007546  1E2C               	comf	(___awdiv@divisor+1)^0,f,c
  3337  007548  B0D8               	btfsc	status,0,c
  3338  00754A  2A2C               	incf	(___awdiv@divisor+1)^0,f,c
  3339  00754C  0E01               	movlw	1
  3340  00754E  6E2E               	movwf	___awdiv@sign^0,c
  3341  007550                     l2100:
  3342  007550  BE2A               	btfsc	(___awdiv@dividend+1)^0,7,c
  3343  007552  EFAF  F03A         	goto	u930
  3344  007556  EFAD  F03A         	goto	u931
  3345  00755A                     u931:
  3346  00755A  EFB5  F03A         	goto	l2106
  3347  00755E                     u930:
  3348  00755E  6C29               	negf	___awdiv@dividend^0,c
  3349  007560  1E2A               	comf	(___awdiv@dividend+1)^0,f,c
  3350  007562  B0D8               	btfsc	status,0,c
  3351  007564  2A2A               	incf	(___awdiv@dividend+1)^0,f,c
  3352  007566  0E01               	movlw	1
  3353  007568  1A2E               	xorwf	___awdiv@sign^0,f,c
  3354  00756A                     l2106:
  3355  00756A  0E00               	movlw	0
  3356  00756C  6E30               	movwf	(___awdiv@quotient+1)^0,c
  3357  00756E  0E00               	movlw	0
  3358  007570  6E2F               	movwf	___awdiv@quotient^0,c
  3359  007572  502B               	movf	___awdiv@divisor^0,w,c
  3360  007574  102C               	iorwf	(___awdiv@divisor+1)^0,w,c
  3361  007576  B4D8               	btfsc	status,2,c
  3362  007578  EFC0  F03A         	goto	u941
  3363  00757C  EFC2  F03A         	goto	u940
  3364  007580                     u941:
  3365  007580  EFEA  F03A         	goto	l2128
  3366  007584                     u940:
  3367  007584  0E01               	movlw	1
  3368  007586  6E2D               	movwf	___awdiv@counter^0,c
  3369  007588  EFCA  F03A         	goto	l2114
  3370  00758C                     l2112:
  3371  00758C  90D8               	bcf	status,0,c
  3372  00758E  362B               	rlcf	___awdiv@divisor^0,f,c
  3373  007590  362C               	rlcf	(___awdiv@divisor+1)^0,f,c
  3374  007592  2A2D               	incf	___awdiv@counter^0,f,c
  3375  007594                     l2114:
  3376  007594  AE2C               	btfss	(___awdiv@divisor+1)^0,7,c
  3377  007596  EFCF  F03A         	goto	u951
  3378  00759A  EFD1  F03A         	goto	u950
  3379  00759E                     u951:
  3380  00759E  EFC6  F03A         	goto	l2112
  3381  0075A2                     u950:
  3382  0075A2                     l2116:
  3383  0075A2  90D8               	bcf	status,0,c
  3384  0075A4  362F               	rlcf	___awdiv@quotient^0,f,c
  3385  0075A6  3630               	rlcf	(___awdiv@quotient+1)^0,f,c
  3386  0075A8  502B               	movf	___awdiv@divisor^0,w,c
  3387  0075AA  5C29               	subwf	___awdiv@dividend^0,w,c
  3388  0075AC  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3389  0075AE  582A               	subwfb	(___awdiv@dividend+1)^0,w,c
  3390  0075B0  A0D8               	btfss	status,0,c
  3391  0075B2  EFDD  F03A         	goto	u961
  3392  0075B6  EFDF  F03A         	goto	u960
  3393  0075BA                     u961:
  3394  0075BA  EFE4  F03A         	goto	l2124
  3395  0075BE                     u960:
  3396  0075BE  502B               	movf	___awdiv@divisor^0,w,c
  3397  0075C0  5E29               	subwf	___awdiv@dividend^0,f,c
  3398  0075C2  502C               	movf	(___awdiv@divisor+1)^0,w,c
  3399  0075C4  5A2A               	subwfb	(___awdiv@dividend+1)^0,f,c
  3400  0075C6  802F               	bsf	___awdiv@quotient^0,0,c
  3401  0075C8                     l2124:
  3402  0075C8  90D8               	bcf	status,0,c
  3403  0075CA  322C               	rrcf	(___awdiv@divisor+1)^0,f,c
  3404  0075CC  322B               	rrcf	___awdiv@divisor^0,f,c
  3405  0075CE  2E2D               	decfsz	___awdiv@counter^0,f,c
  3406  0075D0  EFD1  F03A         	goto	l2116
  3407  0075D4                     l2128:
  3408  0075D4  502E               	movf	___awdiv@sign^0,w,c
  3409  0075D6  B4D8               	btfsc	status,2,c
  3410  0075D8  EFF0  F03A         	goto	u971
  3411  0075DC  EFF2  F03A         	goto	u970
  3412  0075E0                     u971:
  3413  0075E0  EFF6  F03A         	goto	l2132
  3414  0075E4                     u970:
  3415  0075E4  6C2F               	negf	___awdiv@quotient^0,c
  3416  0075E6  1E30               	comf	(___awdiv@quotient+1)^0,f,c
  3417  0075E8  B0D8               	btfsc	status,0,c
  3418  0075EA  2A30               	incf	(___awdiv@quotient+1)^0,f,c
  3419  0075EC                     l2132:
  3420  0075EC  C02F  F029         	movff	___awdiv@quotient,?___awdiv
  3421  0075F0  C030  F02A         	movff	___awdiv@quotient+1,?___awdiv+1
  3422  0075F4  0012               	return		;funcret
  3423  0075F6                     __end_of___awdiv:
  3424                           	callstack 0
  3425                           
  3426 ;; *************** function _getTime *****************
  3427 ;; Defined at:
  3428 ;;		line 29 in file "var.c"
  3429 ;; Parameters:    Size  Location     Type
  3430 ;;		None
  3431 ;; Auto vars:     Size  Location     Type
  3432 ;;		None
  3433 ;; Return value:  Size  Location     Type
  3434 ;;                  2    0[COMRAM] int 
  3435 ;; Registers used:
  3436 ;;		None
  3437 ;; Tracked objects:
  3438 ;;		On entry : 0/0
  3439 ;;		On exit  : 0/0
  3440 ;;		Unchanged: 0/0
  3441 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3442 ;;      Params:         2       0       0       0       0       0       0
  3443 ;;      Locals:         0       0       0       0       0       0       0
  3444 ;;      Temps:          0       0       0       0       0       0       0
  3445 ;;      Totals:         2       0       0       0       0       0       0
  3446 ;;Total ram usage:        2 bytes
  3447 ;; Hardware stack levels used:    1
  3448 ;; This function calls:
  3449 ;;		Nothing
  3450 ;; This function is called by:
  3451 ;;		_main
  3452 ;;		_outputPrint
  3453 ;;		_smLoop
  3454 ;; This function uses a non-reentrant model
  3455 ;;
  3456                           
  3457                           	psect	text23
  3458  006FE0                     __ptext23:
  3459                           	callstack 0
  3460  006FE0                     _getTime:
  3461                           	callstack 28
  3462  006FE0                     
  3463                           ;var.c: 30:     return time;
  3464  006FE0  C04A  F029         	movff	_time,?_getTime
  3465  006FE4  C04B  F02A         	movff	_time+1,?_getTime+1
  3466  006FE8  0012               	return		;funcret
  3467  006FEA                     __end_of_getTime:
  3468                           	callstack 0
  3469                           
  3470 ;; *************** function _getLanguage *****************
  3471 ;; Defined at:
  3472 ;;		line 68 in file "var.c"
  3473 ;; Parameters:    Size  Location     Type
  3474 ;;		None
  3475 ;; Auto vars:     Size  Location     Type
  3476 ;;		None
  3477 ;; Return value:  Size  Location     Type
  3478 ;;                  1    wreg      unsigned char 
  3479 ;; Registers used:
  3480 ;;		wreg, status,2
  3481 ;; Tracked objects:
  3482 ;;		On entry : 0/0
  3483 ;;		On exit  : 0/0
  3484 ;;		Unchanged: 0/0
  3485 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3486 ;;      Params:         0       0       0       0       0       0       0
  3487 ;;      Locals:         0       0       0       0       0       0       0
  3488 ;;      Temps:          0       0       0       0       0       0       0
  3489 ;;      Totals:         0       0       0       0       0       0       0
  3490 ;;Total ram usage:        0 bytes
  3491 ;; Hardware stack levels used:    1
  3492 ;; This function calls:
  3493 ;;		Nothing
  3494 ;; This function is called by:
  3495 ;;		_outputPrint
  3496 ;;		_smLoop
  3497 ;; This function uses a non-reentrant model
  3498 ;;
  3499                           
  3500                           	psect	text24
  3501  006FB8                     __ptext24:
  3502                           	callstack 0
  3503  006FB8                     _getLanguage:
  3504                           	callstack 28
  3505  006FB8                     
  3506                           ;var.c: 69:     return language;
  3507  006FB8  5050               	movf	_language^0,w,c
  3508  006FBA  0012               	return		;funcret
  3509  006FBC                     __end_of_getLanguage:
  3510                           	callstack 0
  3511                           
  3512 ;; *************** function _getAlarmLevel *****************
  3513 ;; Defined at:
  3514 ;;		line 37 in file "var.c"
  3515 ;; Parameters:    Size  Location     Type
  3516 ;;		None
  3517 ;; Auto vars:     Size  Location     Type
  3518 ;;		None
  3519 ;; Return value:  Size  Location     Type
  3520 ;;                  2    0[COMRAM] int 
  3521 ;; Registers used:
  3522 ;;		None
  3523 ;; Tracked objects:
  3524 ;;		On entry : 0/0
  3525 ;;		On exit  : 0/0
  3526 ;;		Unchanged: 0/0
  3527 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3528 ;;      Params:         2       0       0       0       0       0       0
  3529 ;;      Locals:         0       0       0       0       0       0       0
  3530 ;;      Temps:          0       0       0       0       0       0       0
  3531 ;;      Totals:         2       0       0       0       0       0       0
  3532 ;;Total ram usage:        2 bytes
  3533 ;; Hardware stack levels used:    1
  3534 ;; This function calls:
  3535 ;;		Nothing
  3536 ;; This function is called by:
  3537 ;;		_outputPrint
  3538 ;;		_smLoop
  3539 ;;		_teste1
  3540 ;; This function uses a non-reentrant model
  3541 ;;
  3542                           
  3543                           	psect	text25
  3544  006FD6                     __ptext25:
  3545                           	callstack 0
  3546  006FD6                     _getAlarmLevel:
  3547                           	callstack 28
  3548  006FD6                     
  3549                           ;var.c: 38:     return alarmLevel;
  3550  006FD6  C048  F029         	movff	_alarmLevel,?_getAlarmLevel
  3551  006FDA  C049  F02A         	movff	_alarmLevel+1,?_getAlarmLevel+1
  3552  006FDE  0012               	return		;funcret
  3553  006FE0                     __end_of_getAlarmLevel:
  3554                           	callstack 0
  3555                           
  3556 ;; *************** function _adcRead2 *****************
  3557 ;; Defined at:
  3558 ;;		line 25 in file "adc.c"
  3559 ;; Parameters:    Size  Location     Type
  3560 ;;		None
  3561 ;; Auto vars:     Size  Location     Type
  3562 ;;  ADvalor         2    5[COMRAM] unsigned int 
  3563 ;; Return value:  Size  Location     Type
  3564 ;;                  2    0[COMRAM] int 
  3565 ;; Registers used:
  3566 ;;		wreg, status,2, status,0
  3567 ;; Tracked objects:
  3568 ;;		On entry : 0/0
  3569 ;;		On exit  : 0/0
  3570 ;;		Unchanged: 0/0
  3571 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3572 ;;      Params:         2       0       0       0       0       0       0
  3573 ;;      Locals:         2       0       0       0       0       0       0
  3574 ;;      Temps:          3       0       0       0       0       0       0
  3575 ;;      Totals:         7       0       0       0       0       0       0
  3576 ;;Total ram usage:        7 bytes
  3577 ;; Hardware stack levels used:    1
  3578 ;; This function calls:
  3579 ;;		Nothing
  3580 ;; This function is called by:
  3581 ;;		_outputPrint
  3582 ;;		_teste1
  3583 ;; This function uses a non-reentrant model
  3584 ;;
  3585                           
  3586                           	psect	text26
  3587  007224                     __ptext26:
  3588                           	callstack 0
  3589  007224                     _adcRead2:
  3590                           	callstack 28
  3591  007224                     
  3592                           ;adc.c: 26:     unsigned int ADvalor;;adc.c: 27:     (*(volatile __near unsigned char*)0
      +                          xFC2) = 0b00000101;
  3593  007224  0E05               	movlw	5
  3594  007226  6EC2               	movwf	194,c	;volatile
  3595  007228                     
  3596                           ;adc.c: 28:     (*(volatile __near unsigned char*)0xFC2) |= 0b00000010;
  3597  007228  82C2               	bsf	194,1,c	;volatile
  3598  00722A                     l419:
  3599  00722A  B2C2               	btfsc	194,1,c	;volatile
  3600  00722C  EF1A  F039         	goto	u1131
  3601  007230  EF1C  F039         	goto	u1130
  3602  007234                     u1131:
  3603  007234  EF15  F039         	goto	l419
  3604  007238                     u1130:
  3605  007238                     
  3606                           ;adc.c: 32:     ADvalor = (*(volatile __near unsigned char*)0xFC4);
  3607  007238  CFC4 F02E          	movff	4036,adcRead2@ADvalor	;volatile
  3608  00723C  6A2F               	clrf	(adcRead2@ADvalor+1)^0,c
  3609  00723E                     
  3610                           ;adc.c: 33:     ADvalor <<= 8;
  3611  00723E  502E               	movf	adcRead2@ADvalor^0,w,c
  3612  007240  6E2F               	movwf	(adcRead2@ADvalor+1)^0,c
  3613  007242  6A2E               	clrf	adcRead2@ADvalor^0,c
  3614  007244                     
  3615                           ;adc.c: 34:     ADvalor += (*(volatile __near unsigned char*)0xFC3);
  3616  007244  50C3               	movf	195,w,c	;volatile
  3617  007246  262E               	addwf	adcRead2@ADvalor^0,f,c
  3618  007248  0E00               	movlw	0
  3619  00724A  222F               	addwfc	(adcRead2@ADvalor+1)^0,f,c
  3620  00724C                     
  3621                           ;adc.c: 35:     return ADvalor/64;
  3622  00724C  C02E  F02B         	movff	adcRead2@ADvalor,??_adcRead2
  3623  007250  C02F  F02C         	movff	adcRead2@ADvalor+1,??_adcRead2+1
  3624  007254  0E06               	movlw	6
  3625  007256  6E2D               	movwf	(??_adcRead2+2)^0,c
  3626  007258                     u1145:
  3627  007258  90D8               	bcf	status,0,c
  3628  00725A  322C               	rrcf	(??_adcRead2+1)^0,f,c
  3629  00725C  322B               	rrcf	??_adcRead2^0,f,c
  3630  00725E  2E2D               	decfsz	(??_adcRead2+2)^0,f,c
  3631  007260  EF2C  F039         	goto	u1145
  3632  007264  C02B  F029         	movff	??_adcRead2,?_adcRead2
  3633  007268  C02C  F02A         	movff	??_adcRead2+1,?_adcRead2+1
  3634  00726C  0012               	return		;funcret
  3635  00726E                     __end_of_adcRead2:
  3636                           	callstack 0
  3637                           
  3638 ;; *************** function _adcRead1 *****************
  3639 ;; Defined at:
  3640 ;;		line 12 in file "adc.c"
  3641 ;; Parameters:    Size  Location     Type
  3642 ;;		None
  3643 ;; Auto vars:     Size  Location     Type
  3644 ;;  ADvalor         2    5[COMRAM] unsigned int 
  3645 ;; Return value:  Size  Location     Type
  3646 ;;                  2    0[COMRAM] int 
  3647 ;; Registers used:
  3648 ;;		wreg, status,2, status,0
  3649 ;; Tracked objects:
  3650 ;;		On entry : 0/0
  3651 ;;		On exit  : 0/0
  3652 ;;		Unchanged: 0/0
  3653 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3654 ;;      Params:         2       0       0       0       0       0       0
  3655 ;;      Locals:         2       0       0       0       0       0       0
  3656 ;;      Temps:          3       0       0       0       0       0       0
  3657 ;;      Totals:         7       0       0       0       0       0       0
  3658 ;;Total ram usage:        7 bytes
  3659 ;; Hardware stack levels used:    1
  3660 ;; This function calls:
  3661 ;;		Nothing
  3662 ;; This function is called by:
  3663 ;;		_outputPrint
  3664 ;;		_teste1
  3665 ;; This function uses a non-reentrant model
  3666 ;;
  3667                           
  3668                           	psect	text27
  3669  0071DA                     __ptext27:
  3670                           	callstack 0
  3671  0071DA                     _adcRead1:
  3672                           	callstack 28
  3673  0071DA                     
  3674                           ;adc.c: 13:     unsigned int ADvalor;;adc.c: 14:     (*(volatile __near unsigned char*)0
      +                          xFC2) = 0b00000001;
  3675  0071DA  0E01               	movlw	1
  3676  0071DC  6EC2               	movwf	194,c	;volatile
  3677  0071DE                     
  3678                           ;adc.c: 15:     (*(volatile __near unsigned char*)0xFC2) |= 0b00000010;
  3679  0071DE  82C2               	bsf	194,1,c	;volatile
  3680  0071E0                     l413:
  3681  0071E0  B2C2               	btfsc	194,1,c	;volatile
  3682  0071E2  EFF5  F038         	goto	u1111
  3683  0071E6  EFF7  F038         	goto	u1110
  3684  0071EA                     u1111:
  3685  0071EA  EFF0  F038         	goto	l413
  3686  0071EE                     u1110:
  3687  0071EE                     
  3688                           ;adc.c: 19:     ADvalor = (*(volatile __near unsigned char*)0xFC4);
  3689  0071EE  CFC4 F02E          	movff	4036,adcRead1@ADvalor	;volatile
  3690  0071F2  6A2F               	clrf	(adcRead1@ADvalor+1)^0,c
  3691  0071F4                     
  3692                           ;adc.c: 20:     ADvalor <<= 8;
  3693  0071F4  502E               	movf	adcRead1@ADvalor^0,w,c
  3694  0071F6  6E2F               	movwf	(adcRead1@ADvalor+1)^0,c
  3695  0071F8  6A2E               	clrf	adcRead1@ADvalor^0,c
  3696  0071FA                     
  3697                           ;adc.c: 21:     ADvalor += (*(volatile __near unsigned char*)0xFC3);
  3698  0071FA  50C3               	movf	195,w,c	;volatile
  3699  0071FC  262E               	addwf	adcRead1@ADvalor^0,f,c
  3700  0071FE  0E00               	movlw	0
  3701  007200  222F               	addwfc	(adcRead1@ADvalor+1)^0,f,c
  3702  007202                     
  3703                           ;adc.c: 22:     return ADvalor/64;
  3704  007202  C02E  F02B         	movff	adcRead1@ADvalor,??_adcRead1
  3705  007206  C02F  F02C         	movff	adcRead1@ADvalor+1,??_adcRead1+1
  3706  00720A  0E06               	movlw	6
  3707  00720C  6E2D               	movwf	(??_adcRead1+2)^0,c
  3708  00720E                     u1125:
  3709  00720E  90D8               	bcf	status,0,c
  3710  007210  322C               	rrcf	(??_adcRead1+1)^0,f,c
  3711  007212  322B               	rrcf	??_adcRead1^0,f,c
  3712  007214  2E2D               	decfsz	(??_adcRead1+2)^0,f,c
  3713  007216  EF07  F039         	goto	u1125
  3714  00721A  C02B  F029         	movff	??_adcRead1,?_adcRead1
  3715  00721E  C02C  F02A         	movff	??_adcRead1+1,?_adcRead1+1
  3716  007222  0012               	return		;funcret
  3717  007224                     __end_of_adcRead1:
  3718                           	callstack 0
  3719                           
  3720 ;; *************** function _getState *****************
  3721 ;; Defined at:
  3722 ;;		line 21 in file "var.c"
  3723 ;; Parameters:    Size  Location     Type
  3724 ;;		None
  3725 ;; Auto vars:     Size  Location     Type
  3726 ;;		None
  3727 ;; Return value:  Size  Location     Type
  3728 ;;                  1    wreg      unsigned char 
  3729 ;; Registers used:
  3730 ;;		wreg, status,2
  3731 ;; Tracked objects:
  3732 ;;		On entry : 0/0
  3733 ;;		On exit  : 0/0
  3734 ;;		Unchanged: 0/0
  3735 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3736 ;;      Params:         0       0       0       0       0       0       0
  3737 ;;      Locals:         0       0       0       0       0       0       0
  3738 ;;      Temps:          0       0       0       0       0       0       0
  3739 ;;      Totals:         0       0       0       0       0       0       0
  3740 ;;Total ram usage:        0 bytes
  3741 ;; Hardware stack levels used:    1
  3742 ;; This function calls:
  3743 ;;		Nothing
  3744 ;; This function is called by:
  3745 ;;		_smLoop
  3746 ;; This function uses a non-reentrant model
  3747 ;;
  3748                           
  3749                           	psect	text28
  3750  006FB4                     __ptext28:
  3751                           	callstack 0
  3752  006FB4                     _getState:
  3753                           	callstack 29
  3754  006FB4                     
  3755                           ;var.c: 22:     return state;
  3756  006FB4  5051               	movf	_state^0,w,c
  3757  006FB6  0012               	return		;funcret
  3758  006FB8                     __end_of_getState:
  3759                           	callstack 0
  3760                           
  3761 ;; *************** function _eventRead *****************
  3762 ;; Defined at:
  3763 ;;		line 12 in file "event.c"
  3764 ;; Parameters:    Size  Location     Type
  3765 ;;		None
  3766 ;; Auto vars:     Size  Location     Type
  3767 ;;  key             2    5[COMRAM] int 
  3768 ;;  ev              2    3[COMRAM] int 
  3769 ;; Return value:  Size  Location     Type
  3770 ;;                  2    0[COMRAM] unsigned int 
  3771 ;; Registers used:
  3772 ;;		wreg, status,2, status,0, cstack
  3773 ;; Tracked objects:
  3774 ;;		On entry : 0/0
  3775 ;;		On exit  : 0/0
  3776 ;;		Unchanged: 0/0
  3777 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3778 ;;      Params:         2       0       0       0       0       0       0
  3779 ;;      Locals:         4       0       0       0       0       0       0
  3780 ;;      Temps:          1       0       0       0       0       0       0
  3781 ;;      Totals:         7       0       0       0       0       0       0
  3782 ;;Total ram usage:        7 bytes
  3783 ;; Hardware stack levels used:    1
  3784 ;; Hardware stack levels required when called:    1
  3785 ;; This function calls:
  3786 ;;		_kpRead
  3787 ;; This function is called by:
  3788 ;;		_smLoop
  3789 ;; This function uses a non-reentrant model
  3790 ;;
  3791                           
  3792                           	psect	text29
  3793  007402                     __ptext29:
  3794                           	callstack 0
  3795  007402                     _eventRead:
  3796                           	callstack 28
  3797  007402                     
  3798                           ;event.c: 13:     int key;;event.c: 14:     int ev = EV_NOEVENT;
  3799  007402  0E00               	movlw	0
  3800  007404  6E2D               	movwf	(eventRead@ev+1)^0,c
  3801  007406  0E05               	movlw	5
  3802  007408  6E2C               	movwf	eventRead@ev^0,c
  3803  00740A                     
  3804                           ;event.c: 15:     key = kpRead();
  3805  00740A  ECE6  F037         	call	_kpRead	;wreg free
  3806  00740E  6E2B               	movwf	??_eventRead^0,c
  3807  007410  502B               	movf	??_eventRead^0,w,c
  3808  007412  6E2E               	movwf	eventRead@key^0,c
  3809  007414  6A2F               	clrf	(eventRead@key+1)^0,c
  3810  007416                     
  3811                           ;event.c: 16:     if (key != key_ant) {
  3812  007416  504E               	movf	_key_ant^0,w,c
  3813  007418  182E               	xorwf	eventRead@key^0,w,c
  3814  00741A  E109               	bnz	u1150
  3815  00741C  504F               	movf	(_key_ant+1)^0,w,c
  3816  00741E  182F               	xorwf	(eventRead@key+1)^0,w,c
  3817  007420  B4D8               	btfsc	status,2,c
  3818  007422  EF15  F03A         	goto	u1151
  3819  007426  EF17  F03A         	goto	u1150
  3820  00742A                     u1151:
  3821  00742A  EF38  F03A         	goto	l2314
  3822  00742E                     u1150:
  3823  00742E                     
  3824                           ;event.c: 17:         if (((key) & (1<<(0)) )) {
  3825  00742E  A02E               	btfss	eventRead@key^0,0,c
  3826  007430  EF1C  F03A         	goto	u1161
  3827  007434  EF1E  F03A         	goto	u1160
  3828  007438                     u1161:
  3829  007438  EF22  F03A         	goto	l2306
  3830  00743C                     u1160:
  3831  00743C                     
  3832                           ;event.c: 18:             ev = EV_RIGHT;
  3833  00743C  0E00               	movlw	0
  3834  00743E  6E2D               	movwf	(eventRead@ev+1)^0,c
  3835  007440  0E03               	movlw	3
  3836  007442  6E2C               	movwf	eventRead@ev^0,c
  3837  007444                     l2306:
  3838                           
  3839                           ;event.c: 21:         if (((key) & (1<<(1)) )) {
  3840  007444  A22E               	btfss	eventRead@key^0,1,c
  3841  007446  EF27  F03A         	goto	u1171
  3842  00744A  EF29  F03A         	goto	u1170
  3843  00744E                     u1171:
  3844  00744E  EF2D  F03A         	goto	l2310
  3845  007452                     u1170:
  3846  007452                     
  3847                           ;event.c: 22:             ev = EV_LEFT;
  3848  007452  0E00               	movlw	0
  3849  007454  6E2D               	movwf	(eventRead@ev+1)^0,c
  3850  007456  0E02               	movlw	2
  3851  007458  6E2C               	movwf	eventRead@ev^0,c
  3852  00745A                     l2310:
  3853                           
  3854                           ;event.c: 25:         if (((key) & (1<<(2)) )) {
  3855  00745A  A42E               	btfss	eventRead@key^0,2,c
  3856  00745C  EF32  F03A         	goto	u1181
  3857  007460  EF34  F03A         	goto	u1180
  3858  007464                     u1181:
  3859  007464  EF38  F03A         	goto	l2314
  3860  007468                     u1180:
  3861  007468                     
  3862                           ;event.c: 26:             ev = EV_ENTER;
  3863  007468  0E00               	movlw	0
  3864  00746A  6E2D               	movwf	(eventRead@ev+1)^0,c
  3865  00746C  0E04               	movlw	4
  3866  00746E  6E2C               	movwf	eventRead@ev^0,c
  3867  007470                     l2314:
  3868                           
  3869                           ;event.c: 30:     key_ant = key;
  3870  007470  C02E  F04E         	movff	eventRead@key,_key_ant
  3871  007474  C02F  F04F         	movff	eventRead@key+1,_key_ant+1
  3872  007478                     
  3873                           ;event.c: 31:     return ev;
  3874  007478  C02C  F029         	movff	eventRead@ev,?_eventRead
  3875  00747C  C02D  F02A         	movff	eventRead@ev+1,?_eventRead+1
  3876  007480  0012               	return		;funcret
  3877  007482                     __end_of_eventRead:
  3878                           	callstack 0
  3879                           
  3880 ;; *************** function _kpRead *****************
  3881 ;; Defined at:
  3882 ;;		line 29 in file "keypad.c"
  3883 ;; Parameters:    Size  Location     Type
  3884 ;;		None
  3885 ;; Auto vars:     Size  Location     Type
  3886 ;;		None
  3887 ;; Return value:  Size  Location     Type
  3888 ;;                  1    wreg      unsigned char 
  3889 ;; Registers used:
  3890 ;;		wreg, status,2, status,0
  3891 ;; Tracked objects:
  3892 ;;		On entry : 0/0
  3893 ;;		On exit  : 0/0
  3894 ;;		Unchanged: 0/0
  3895 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3896 ;;      Params:         0       0       0       0       0       0       0
  3897 ;;      Locals:         0       0       0       0       0       0       0
  3898 ;;      Temps:          0       0       0       0       0       0       0
  3899 ;;      Totals:         0       0       0       0       0       0       0
  3900 ;;Total ram usage:        0 bytes
  3901 ;; Hardware stack levels used:    1
  3902 ;; This function calls:
  3903 ;;		Nothing
  3904 ;; This function is called by:
  3905 ;;		_eventRead
  3906 ;; This function uses a non-reentrant model
  3907 ;;
  3908                           
  3909                           	psect	text30
  3910  006FCC                     __ptext30:
  3911                           	callstack 0
  3912  006FCC                     _kpRead:
  3913                           	callstack 28
  3914  006FCC                     
  3915                           ;keypad.c: 30:     (*(volatile __near unsigned char*)0xF83) = 0x01;
  3916  006FCC  0E01               	movlw	1
  3917  006FCE  6E83               	movwf	131,c	;volatile
  3918  006FD0                     
  3919                           ;keypad.c: 31:     return ~(*(volatile __near unsigned char*)0xF81);
  3920  006FD0  5081               	movf	129,w,c	;volatile
  3921  006FD2  0AFF               	xorlw	255
  3922  006FD4  0012               	return		;funcret
  3923  006FD6                     __end_of_kpRead:
  3924                           	callstack 0
  3925                           
  3926 ;; *************** function _pwmInit *****************
  3927 ;; Defined at:
  3928 ;;		line 56 in file "pwm.c"
  3929 ;; Parameters:    Size  Location     Type
  3930 ;;		None
  3931 ;; Auto vars:     Size  Location     Type
  3932 ;;		None
  3933 ;; Return value:  Size  Location     Type
  3934 ;;                  1    wreg      void 
  3935 ;; Registers used:
  3936 ;;		wreg, status,2, status,0
  3937 ;; Tracked objects:
  3938 ;;		On entry : 0/0
  3939 ;;		On exit  : 0/0
  3940 ;;		Unchanged: 0/0
  3941 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  3942 ;;      Params:         0       0       0       0       0       0       0
  3943 ;;      Locals:         0       0       0       0       0       0       0
  3944 ;;      Temps:          0       0       0       0       0       0       0
  3945 ;;      Totals:         0       0       0       0       0       0       0
  3946 ;;Total ram usage:        0 bytes
  3947 ;; Hardware stack levels used:    1
  3948 ;; This function calls:
  3949 ;;		Nothing
  3950 ;; This function is called by:
  3951 ;;		_main
  3952 ;; This function uses a non-reentrant model
  3953 ;;
  3954                           
  3955                           	psect	text31
  3956  007034                     __ptext31:
  3957                           	callstack 0
  3958  007034                     _pwmInit:
  3959                           	callstack 30
  3960  007034                     
  3961                           ;pwm.c: 57:     (((*(volatile __near unsigned char*)0xF94)) &= ~(1<<(1)) );
  3962  007034  9294               	bcf	148,1,c	;volatile
  3963                           
  3964                           ;pwm.c: 58:     (((*(volatile __near unsigned char*)0xF94)) &= ~(1<<(2)) );
  3965  007036  9494               	bcf	148,2,c	;volatile
  3966  007038                     
  3967                           ;pwm.c: 60:     (*(volatile __near unsigned char*)0xFCA) |= 0b00000011;
  3968  007038  0E03               	movlw	3
  3969  00703A  12CA               	iorwf	202,f,c	;volatile
  3970  00703C                     
  3971                           ;pwm.c: 61:     (((*(volatile __near unsigned char*)0xFCA)) |= (1<<(2)));
  3972  00703C  84CA               	bsf	202,2,c	;volatile
  3973                           
  3974                           ;pwm.c: 64:     (*(volatile __near unsigned char*)0xFBD) |= 0b00001100;
  3975  00703E  0E0C               	movlw	12
  3976  007040  12BD               	iorwf	189,f,c	;volatile
  3977                           
  3978                           ;pwm.c: 65:     (*(volatile __near unsigned char*)0xFBA) |= 0b00001100;
  3979  007042  0E0C               	movlw	12
  3980  007044  12BA               	iorwf	186,f,c	;volatile
  3981  007046  0012               	return		;funcret
  3982  007048                     __end_of_pwmInit:
  3983                           	callstack 0
  3984                           
  3985 ;; *************** function _lcdInit *****************
  3986 ;; Defined at:
  3987 ;;		line 105 in file "lcd.c"
  3988 ;; Parameters:    Size  Location     Type
  3989 ;;		None
  3990 ;; Auto vars:     Size  Location     Type
  3991 ;;		None
  3992 ;; Return value:  Size  Location     Type
  3993 ;;                  1    wreg      void 
  3994 ;; Registers used:
  3995 ;;		wreg, status,2, status,0, cstack
  3996 ;; Tracked objects:
  3997 ;;		On entry : 0/0
  3998 ;;		On exit  : 0/0
  3999 ;;		Unchanged: 0/0
  4000 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4001 ;;      Params:         0       0       0       0       0       0       0
  4002 ;;      Locals:         0       0       0       0       0       0       0
  4003 ;;      Temps:          0       0       0       0       0       0       0
  4004 ;;      Totals:         0       0       0       0       0       0       0
  4005 ;;Total ram usage:        0 bytes
  4006 ;; Hardware stack levels used:    1
  4007 ;; Hardware stack levels required when called:    3
  4008 ;; This function calls:
  4009 ;;		_Delay2ms
  4010 ;;		_lcdCommand
  4011 ;; This function is called by:
  4012 ;;		_main
  4013 ;; This function uses a non-reentrant model
  4014 ;;
  4015                           
  4016                           	psect	text32
  4017  0072C4                     __ptext32:
  4018                           	callstack 0
  4019  0072C4                     _lcdInit:
  4020                           	callstack 27
  4021  0072C4                     
  4022                           ;lcd.c: 109:     Delay2ms();
  4023  0072C4  EC3B  F038         	call	_Delay2ms	;wreg free
  4024                           
  4025                           ;lcd.c: 110:     Delay2ms();
  4026  0072C8  EC3B  F038         	call	_Delay2ms	;wreg free
  4027                           
  4028                           ;lcd.c: 111:     Delay2ms();
  4029  0072CC  EC3B  F038         	call	_Delay2ms	;wreg free
  4030                           
  4031                           ;lcd.c: 112:     Delay2ms();
  4032  0072D0  EC3B  F038         	call	_Delay2ms	;wreg free
  4033                           
  4034                           ;lcd.c: 113:     Delay2ms();
  4035  0072D4  EC3B  F038         	call	_Delay2ms	;wreg free
  4036                           
  4037                           ;lcd.c: 114:     Delay2ms();
  4038  0072D8  EC3B  F038         	call	_Delay2ms	;wreg free
  4039  0072DC                     
  4040                           ;lcd.c: 117:     (((*(volatile __near unsigned char*)0xF96)) &= ~(1<<(2)) );
  4041  0072DC  9496               	bcf	150,2,c	;volatile
  4042  0072DE                     
  4043                           ;lcd.c: 118:     (((*(volatile __near unsigned char*)0xF96)) &= ~(1<<(1)) );
  4044  0072DE  9296               	bcf	150,1,c	;volatile
  4045  0072E0                     
  4046                           ;lcd.c: 119:     (((*(volatile __near unsigned char*)0xF96)) &= ~(1<<(0)) );
  4047  0072E0  9096               	bcf	150,0,c	;volatile
  4048  0072E2                     
  4049                           ;lcd.c: 120:     (*(volatile __near unsigned char*)0xF95) = 0x00;
  4050  0072E2  0E00               	movlw	0
  4051  0072E4  6E95               	movwf	149,c	;volatile
  4052  0072E6                     
  4053                           ;lcd.c: 121:     (*(volatile __near unsigned char*)0xFC1) = 0b00001110;
  4054  0072E6  0E0E               	movlw	14
  4055  0072E8  6EC1               	movwf	193,c	;volatile
  4056  0072EA                     
  4057                           ;lcd.c: 124:     lcdCommand(0x38);
  4058  0072EA  0E38               	movlw	56
  4059  0072EC  ECA3  F038         	call	_lcdCommand
  4060  0072F0                     
  4061                           ;lcd.c: 125:     Delay2ms();
  4062  0072F0  EC3B  F038         	call	_Delay2ms	;wreg free
  4063  0072F4                     
  4064                           ;lcd.c: 126:     lcdCommand(0x38);
  4065  0072F4  0E38               	movlw	56
  4066  0072F6  ECA3  F038         	call	_lcdCommand
  4067  0072FA                     
  4068                           ;lcd.c: 127:     Delay2ms();
  4069  0072FA  EC3B  F038         	call	_Delay2ms	;wreg free
  4070  0072FE                     
  4071                           ;lcd.c: 128:     lcdCommand(0x38);
  4072  0072FE  0E38               	movlw	56
  4073  007300  ECA3  F038         	call	_lcdCommand
  4074  007304                     
  4075                           ;lcd.c: 129:     Delay2ms();
  4076  007304  EC3B  F038         	call	_Delay2ms	;wreg free
  4077  007308                     
  4078                           ;lcd.c: 131:     lcdCommand(0x0C);
  4079  007308  0E0C               	movlw	12
  4080  00730A  ECA3  F038         	call	_lcdCommand
  4081  00730E                     
  4082                           ;lcd.c: 132:     lcdCommand(0x06);
  4083  00730E  0E06               	movlw	6
  4084  007310  ECA3  F038         	call	_lcdCommand
  4085  007314                     
  4086                           ;lcd.c: 133:     lcdCommand(0x03);
  4087  007314  0E03               	movlw	3
  4088  007316  ECA3  F038         	call	_lcdCommand
  4089  00731A                     
  4090                           ;lcd.c: 134:     lcdCommand(0x01);
  4091  00731A  0E01               	movlw	1
  4092  00731C  ECA3  F038         	call	_lcdCommand
  4093  007320  0012               	return		;funcret
  4094  007322                     __end_of_lcdInit:
  4095                           	callstack 0
  4096                           
  4097 ;; *************** function _lcdCommand *****************
  4098 ;; Defined at:
  4099 ;;		line 40 in file "lcd.c"
  4100 ;; Parameters:    Size  Location     Type
  4101 ;;  cmd             1    wreg     unsigned char 
  4102 ;; Auto vars:     Size  Location     Type
  4103 ;;  cmd             1    2[COMRAM] unsigned char 
  4104 ;; Return value:  Size  Location     Type
  4105 ;;                  1    wreg      void 
  4106 ;; Registers used:
  4107 ;;		wreg, status,2, status,0, cstack
  4108 ;; Tracked objects:
  4109 ;;		On entry : 0/0
  4110 ;;		On exit  : 0/0
  4111 ;;		Unchanged: 0/0
  4112 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4113 ;;      Params:         0       0       0       0       0       0       0
  4114 ;;      Locals:         1       0       0       0       0       0       0
  4115 ;;      Temps:          0       0       0       0       0       0       0
  4116 ;;      Totals:         1       0       0       0       0       0       0
  4117 ;;Total ram usage:        1 bytes
  4118 ;; Hardware stack levels used:    1
  4119 ;; Hardware stack levels required when called:    2
  4120 ;; This function calls:
  4121 ;;		_Delay2ms
  4122 ;;		_Delay40us
  4123 ;; This function is called by:
  4124 ;;		_lcdInit
  4125 ;;		_outputPrint
  4126 ;; This function uses a non-reentrant model
  4127 ;;
  4128                           
  4129                           	psect	text33
  4130  007146                     __ptext33:
  4131                           	callstack 0
  4132  007146                     _lcdCommand:
  4133                           	callstack 26
  4134                           
  4135                           ;incstack = 0
  4136                           ;lcdCommand@cmd stored from wreg
  4137  007146  6E2B               	movwf	lcdCommand@cmd^0,c
  4138  007148                     
  4139                           ;lcd.c: 41:     (((*(volatile __near unsigned char*)0xF84)) &= ~(1<<(2)) );
  4140  007148  9484               	bcf	132,2,c	;volatile
  4141                           
  4142                           ;lcd.c: 42:     (((*(volatile __near unsigned char*)0xF84)) &= ~(1<<(0)) );
  4143  00714A  9084               	bcf	132,0,c	;volatile
  4144  00714C                     
  4145                           ;lcd.c: 44:     (*(volatile __near unsigned char*)0xF83) = cmd;
  4146  00714C  C02B  FF83         	movff	lcdCommand@cmd,3971	;volatile
  4147  007150                     
  4148                           ;lcd.c: 46:     (((*(volatile __near unsigned char*)0xF84)) |= (1<<(1)));
  4149  007150  8284               	bsf	132,1,c	;volatile
  4150  007152                     
  4151                           ;lcd.c: 47:     (((*(volatile __near unsigned char*)0xF84)) &= ~(1<<(1)) );
  4152  007152  9284               	bcf	132,1,c	;volatile
  4153  007154                     
  4154                           ;lcd.c: 49:     if (((cmd) & (1<<(1)) )) {
  4155  007154  A22B               	btfss	lcdCommand@cmd^0,1,c
  4156  007156  EFAF  F038         	goto	u1071
  4157  00715A  EFB1  F038         	goto	u1070
  4158  00715E                     u1071:
  4159  00715E  EFB5  F038         	goto	l2212
  4160  007162                     u1070:
  4161  007162                     
  4162                           ;lcd.c: 50:         Delay2ms();
  4163  007162  EC3B  F038         	call	_Delay2ms	;wreg free
  4164                           
  4165                           ;lcd.c: 51:     } else {
  4166  007166  EFB7  F038         	goto	l39
  4167  00716A                     l2212:
  4168                           
  4169                           ;lcd.c: 52:         Delay40us();
  4170  00716A  EC2F  F038         	call	_Delay40us	;wreg free
  4171  00716E                     l39:
  4172  00716E  0012               	return		;funcret
  4173  007170                     __end_of_lcdCommand:
  4174                           	callstack 0
  4175                           
  4176 ;; *************** function _Delay2ms *****************
  4177 ;; Defined at:
  4178 ;;		line 33 in file "lcd.c"
  4179 ;; Parameters:    Size  Location     Type
  4180 ;;		None
  4181 ;; Auto vars:     Size  Location     Type
  4182 ;;  i               1    1[COMRAM] unsigned char 
  4183 ;; Return value:  Size  Location     Type
  4184 ;;                  1    wreg      void 
  4185 ;; Registers used:
  4186 ;;		wreg, status,2, status,0, cstack
  4187 ;; Tracked objects:
  4188 ;;		On entry : 0/0
  4189 ;;		On exit  : 0/0
  4190 ;;		Unchanged: 0/0
  4191 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4192 ;;      Params:         0       0       0       0       0       0       0
  4193 ;;      Locals:         1       0       0       0       0       0       0
  4194 ;;      Temps:          0       0       0       0       0       0       0
  4195 ;;      Totals:         1       0       0       0       0       0       0
  4196 ;;Total ram usage:        1 bytes
  4197 ;; Hardware stack levels used:    1
  4198 ;; Hardware stack levels required when called:    1
  4199 ;; This function calls:
  4200 ;;		_Delay40us
  4201 ;; This function is called by:
  4202 ;;		_lcdCommand
  4203 ;;		_lcdInit
  4204 ;; This function uses a non-reentrant model
  4205 ;;
  4206                           
  4207                           	psect	text34
  4208  007076                     __ptext34:
  4209                           	callstack 0
  4210  007076                     _Delay2ms:
  4211                           	callstack 26
  4212  007076                     
  4213                           ;lcd.c: 34:     unsigned char i;;lcd.c: 35:     for (i = 0; i < 50; i++) {
  4214  007076  0E00               	movlw	0
  4215  007078  6E2A               	movwf	Delay2ms@i^0,c
  4216  00707A                     l2024:
  4217                           
  4218                           ;lcd.c: 36:         Delay40us();
  4219  00707A  EC2F  F038         	call	_Delay40us	;wreg free
  4220  00707E                     
  4221                           ;lcd.c: 37:     }
  4222  00707E  2A2A               	incf	Delay2ms@i^0,f,c
  4223  007080  0E31               	movlw	49
  4224  007082  642A               	cpfsgt	Delay2ms@i^0,c
  4225  007084  EF46  F038         	goto	u851
  4226  007088  EF48  F038         	goto	u850
  4227  00708C                     u851:
  4228  00708C  EF3D  F038         	goto	l2024
  4229  007090                     u850:
  4230  007090  0012               	return		;funcret
  4231  007092                     __end_of_Delay2ms:
  4232                           	callstack 0
  4233                           
  4234 ;; *************** function _Delay40us *****************
  4235 ;; Defined at:
  4236 ;;		line 28 in file "lcd.c"
  4237 ;; Parameters:    Size  Location     Type
  4238 ;;		None
  4239 ;; Auto vars:     Size  Location     Type
  4240 ;;  i               1    0[COMRAM] unsigned char 
  4241 ;; Return value:  Size  Location     Type
  4242 ;;                  1    wreg      void 
  4243 ;; Registers used:
  4244 ;;		wreg, status,2, status,0
  4245 ;; Tracked objects:
  4246 ;;		On entry : 0/0
  4247 ;;		On exit  : 0/0
  4248 ;;		Unchanged: 0/0
  4249 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4250 ;;      Params:         0       0       0       0       0       0       0
  4251 ;;      Locals:         1       0       0       0       0       0       0
  4252 ;;      Temps:          0       0       0       0       0       0       0
  4253 ;;      Totals:         1       0       0       0       0       0       0
  4254 ;;Total ram usage:        1 bytes
  4255 ;; Hardware stack levels used:    1
  4256 ;; This function calls:
  4257 ;;		Nothing
  4258 ;; This function is called by:
  4259 ;;		_Delay2ms
  4260 ;;		_lcdCommand
  4261 ;;		_lcdData
  4262 ;; This function uses a non-reentrant model
  4263 ;;
  4264                           
  4265                           	psect	text35
  4266  00705E                     __ptext35:
  4267                           	callstack 0
  4268  00705E                     _Delay40us:
  4269                           	callstack 26
  4270  00705E                     
  4271                           ;lcd.c: 29:     unsigned char i;;lcd.c: 30:     for (i = 0; i < 10; i++);
  4272  00705E  0E00               	movlw	0
  4273  007060  6E29               	movwf	Delay40us@i^0,c
  4274  007062                     l2014:
  4275  007062  2A29               	incf	Delay40us@i^0,f,c
  4276  007064  0E09               	movlw	9
  4277  007066  6429               	cpfsgt	Delay40us@i^0,c
  4278  007068  EF38  F038         	goto	u841
  4279  00706C  EF3A  F038         	goto	u840
  4280  007070                     u841:
  4281  007070  EF31  F038         	goto	l2014
  4282  007074                     u840:
  4283  007074  0012               	return		;funcret
  4284  007076                     __end_of_Delay40us:
  4285                           	callstack 0
  4286                           
  4287 ;; *************** function _eventInit *****************
  4288 ;; Defined at:
  4289 ;;		line 7 in file "event.c"
  4290 ;; Parameters:    Size  Location     Type
  4291 ;;		None
  4292 ;; Auto vars:     Size  Location     Type
  4293 ;;		None
  4294 ;; Return value:  Size  Location     Type
  4295 ;;                  1    wreg      void 
  4296 ;; Registers used:
  4297 ;;		wreg, status,2, status,0, cstack
  4298 ;; Tracked objects:
  4299 ;;		On entry : 0/0
  4300 ;;		On exit  : 0/0
  4301 ;;		Unchanged: 0/0
  4302 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4303 ;;      Params:         0       0       0       0       0       0       0
  4304 ;;      Locals:         0       0       0       0       0       0       0
  4305 ;;      Temps:          0       0       0       0       0       0       0
  4306 ;;      Totals:         0       0       0       0       0       0       0
  4307 ;;Total ram usage:        0 bytes
  4308 ;; Hardware stack levels used:    1
  4309 ;; Hardware stack levels required when called:    1
  4310 ;; This function calls:
  4311 ;;		_kpInit
  4312 ;; This function is called by:
  4313 ;;		_main
  4314 ;; This function uses a non-reentrant model
  4315 ;;
  4316                           
  4317                           	psect	text36
  4318  007016                     __ptext36:
  4319                           	callstack 0
  4320  007016                     _eventInit:
  4321                           	callstack 29
  4322  007016                     
  4323                           ;event.c: 8:     kpInit();
  4324  007016  EC04  F038         	call	_kpInit	;wreg free
  4325  00701A                     
  4326                           ;event.c: 9:     key_ant = 0;
  4327  00701A  0E00               	movlw	0
  4328  00701C  6E4F               	movwf	(_key_ant+1)^0,c
  4329  00701E  0E00               	movlw	0
  4330  007020  6E4E               	movwf	_key_ant^0,c
  4331  007022  0012               	return		;funcret
  4332  007024                     __end_of_eventInit:
  4333                           	callstack 0
  4334                           
  4335 ;; *************** function _kpInit *****************
  4336 ;; Defined at:
  4337 ;;		line 35 in file "keypad.c"
  4338 ;; Parameters:    Size  Location     Type
  4339 ;;		None
  4340 ;; Auto vars:     Size  Location     Type
  4341 ;;		None
  4342 ;; Return value:  Size  Location     Type
  4343 ;;                  1    wreg      void 
  4344 ;; Registers used:
  4345 ;;		wreg, status,2, status,0
  4346 ;; Tracked objects:
  4347 ;;		On entry : 0/0
  4348 ;;		On exit  : 0/0
  4349 ;;		Unchanged: 0/0
  4350 ;; Data sizes:     COMRAM   BANK0   BANK1   BANK2   BANK3   BANK4   BANK5
  4351 ;;      Params:         0       0       0       0       0       0       0
  4352 ;;      Locals:         0       0       0       0       0       0       0
  4353 ;;      Temps:          0       0       0       0       0       0       0
  4354 ;;      Totals:         0       0       0       0       0       0       0
  4355 ;;Total ram usage:        0 bytes
  4356 ;; Hardware stack levels used:    1
  4357 ;; This function calls:
  4358 ;;		Nothing
  4359 ;; This function is called by:
  4360 ;;		_eventInit
  4361 ;; This function uses a non-reentrant model
  4362 ;;
  4363                           
  4364                           	psect	text37
  4365  007008                     __ptext37:
  4366                           	callstack 0
  4367  007008                     _kpInit:
  4368                           	callstack 29
  4369  007008                     
  4370                           ;keypad.c: 36:     (*(volatile __near unsigned char*)0xF93) = 0xff;
  4371  007008  6893               	setf	147,c	;volatile
  4372  00700A                     
  4373                           ;keypad.c: 37:     (*(volatile __near unsigned char*)0xF95) = 0x00;
  4374  00700A  0E00               	movlw	0
  4375  00700C  6E95               	movwf	149,c	;volatile
  4376  00700E                     
  4377                           ;keypad.c: 39:     (((*(volatile __near unsigned char*)0xFF1)) &= ~(1<<(7)) );
  4378  00700E  9EF1               	bcf	241,7,c	;volatile
  4379  007010                     
  4380                           ;keypad.c: 41:     (*(volatile __near unsigned char*)0xFC1) = 0b00001101;
  4381  007010  0E0D               	movlw	13
  4382  007012  6EC1               	movwf	193,c	;volatile
  4383  007014  0012               	return		;funcret
  4384  007016                     __end_of_kpInit:
  4385                           	callstack 0
  4386                           
  4387                           	psect	rparam
  4388  0000                     
  4389                           	psect	idloc
  4390                           
  4391                           ;Config register IDLOC0 @ 0x200000
  4392                           ;	unspecified, using default values
  4393  200000                     	org	2097152
  4394  200000  FF                 	db	255
  4395                           
  4396                           ;Config register IDLOC1 @ 0x200001
  4397                           ;	unspecified, using default values
  4398  200001                     	org	2097153
  4399  200001  FF                 	db	255
  4400                           
  4401                           ;Config register IDLOC2 @ 0x200002
  4402                           ;	unspecified, using default values
  4403  200002                     	org	2097154
  4404  200002  FF                 	db	255
  4405                           
  4406                           ;Config register IDLOC3 @ 0x200003
  4407                           ;	unspecified, using default values
  4408  200003                     	org	2097155
  4409  200003  FF                 	db	255
  4410                           
  4411                           ;Config register IDLOC4 @ 0x200004
  4412                           ;	unspecified, using default values
  4413  200004                     	org	2097156
  4414  200004  FF                 	db	255
  4415                           
  4416                           ;Config register IDLOC5 @ 0x200005
  4417                           ;	unspecified, using default values
  4418  200005                     	org	2097157
  4419  200005  FF                 	db	255
  4420                           
  4421                           ;Config register IDLOC6 @ 0x200006
  4422                           ;	unspecified, using default values
  4423  200006                     	org	2097158
  4424  200006  FF                 	db	255
  4425                           
  4426                           ;Config register IDLOC7 @ 0x200007
  4427                           ;	unspecified, using default values
  4428  200007                     	org	2097159
  4429  200007  FF                 	db	255
  4430                           
  4431                           	psect	config
  4432                           
  4433                           ; Padding undefined space
  4434  300000                     	org	3145728
  4435  300000  FF                 	db	255
  4436                           
  4437                           ;Config register CONFIG1H @ 0x300001
  4438                           ;	Oscillator Selection bits
  4439                           ;	OSC = HS, HS oscillator
  4440                           ;	Fail-Safe Clock Monitor Enable bit
  4441                           ;	FCMEN = 0x0, unprogrammed default
  4442                           ;	Internal/External Oscillator Switchover bit
  4443                           ;	IESO = 0x0, unprogrammed default
  4444  300001                     	org	3145729
  4445  300001  02                 	db	2
  4446                           
  4447                           ;Config register CONFIG2L @ 0x300002
  4448                           ;	unspecified, using default values
  4449                           ;	Power-up Timer Enable bit
  4450                           ;	PWRT = 0x1, unprogrammed default
  4451                           ;	Brown-out Reset Enable bits
  4452                           ;	BOREN = 0x3, unprogrammed default
  4453                           ;	Brown Out Reset Voltage bits
  4454                           ;	BORV = 0x3, unprogrammed default
  4455  300002                     	org	3145730
  4456  300002  1F                 	db	31
  4457                           
  4458                           ;Config register CONFIG2H @ 0x300003
  4459                           ;	Watchdog Timer Enable bit
  4460                           ;	WDT = OFF, WDT disabled (control is placed on the SWDTEN bit)
  4461                           ;	Watchdog Timer Postscale Select bits
  4462                           ;	WDTPS = 1, 1:1
  4463  300003                     	org	3145731
  4464  300003  00                 	db	0
  4465                           
  4466                           ; Padding undefined space
  4467  300004                     	org	3145732
  4468  300004  FF                 	db	255
  4469                           
  4470                           ;Config register CONFIG3H @ 0x300005
  4471                           ;	CCP2 MUX bit
  4472                           ;	CCP2MX = 0x1, unprogrammed default
  4473                           ;	PORTB A/D Enable bit
  4474                           ;	PBADEN = 0x1, unprogrammed default
  4475                           ;	Low-Power Timer1 Oscillator Enable bit
  4476                           ;	LPT1OSC = 0x0, unprogrammed default
  4477                           ;	MCLR Pin Enable bit
  4478                           ;	MCLRE = ON, MCLR pin enabled; RE3 input pin disabled
  4479  300005                     	org	3145733
  4480  300005  83                 	db	131
  4481                           
  4482                           ;Config register CONFIG4L @ 0x300006
  4483                           ;	Stack Full/Underflow Reset Enable bit
  4484                           ;	STVREN = 0x1, unprogrammed default
  4485                           ;	Single-Supply ICSP Enable bit
  4486                           ;	LVP = OFF, Single-Supply ICSP disabled
  4487                           ;	Extended Instruction Set Enable bit
  4488                           ;	XINST = 0x0, unprogrammed default
  4489                           ;	Background Debugger Enable bit
  4490                           ;	DEBUG = OFF, Background debugger disabled, RB6 and RB7 configured as general purpose I
      +                          /O pins
  4491  300006                     	org	3145734
  4492  300006  81                 	db	129
  4493                           
  4494                           ; Padding undefined space
  4495  300007                     	org	3145735
  4496  300007  FF                 	db	255
  4497                           
  4498                           ;Config register CONFIG5L @ 0x300008
  4499                           ;	unspecified, using default values
  4500                           ;	Code Protection bit
  4501                           ;	CP0 = 0x1, unprogrammed default
  4502                           ;	Code Protection bit
  4503                           ;	CP1 = 0x1, unprogrammed default
  4504                           ;	Code Protection bit
  4505                           ;	CP2 = 0x1, unprogrammed default
  4506                           ;	Code Protection bit
  4507                           ;	CP3 = 0x1, unprogrammed default
  4508  300008                     	org	3145736
  4509  300008  0F                 	db	15
  4510                           
  4511                           ;Config register CONFIG5H @ 0x300009
  4512                           ;	unspecified, using default values
  4513                           ;	Boot Block Code Protection bit
  4514                           ;	CPB = 0x1, unprogrammed default
  4515                           ;	Data EEPROM Code Protection bit
  4516                           ;	CPD = 0x1, unprogrammed default
  4517  300009                     	org	3145737
  4518  300009  C0                 	db	192
  4519                           
  4520                           ;Config register CONFIG6L @ 0x30000A
  4521                           ;	unspecified, using default values
  4522                           ;	Write Protection bit
  4523                           ;	WRT0 = 0x1, unprogrammed default
  4524                           ;	Write Protection bit
  4525                           ;	WRT1 = 0x1, unprogrammed default
  4526                           ;	Write Protection bit
  4527                           ;	WRT2 = 0x1, unprogrammed default
  4528                           ;	Write Protection bit
  4529                           ;	WRT3 = 0x1, unprogrammed default
  4530  30000A                     	org	3145738
  4531  30000A  0F                 	db	15
  4532                           
  4533                           ;Config register CONFIG6H @ 0x30000B
  4534                           ;	unspecified, using default values
  4535                           ;	Configuration Register Write Protection bit
  4536                           ;	WRTC = 0x1, unprogrammed default
  4537                           ;	Boot Block Write Protection bit
  4538                           ;	WRTB = 0x1, unprogrammed default
  4539                           ;	Data EEPROM Write Protection bit
  4540                           ;	WRTD = 0x1, unprogrammed default
  4541  30000B                     	org	3145739
  4542  30000B  E0                 	db	224
  4543                           
  4544                           ;Config register CONFIG7L @ 0x30000C
  4545                           ;	unspecified, using default values
  4546                           ;	Table Read Protection bit
  4547                           ;	EBTR0 = 0x1, unprogrammed default
  4548                           ;	Table Read Protection bit
  4549                           ;	EBTR1 = 0x1, unprogrammed default
  4550                           ;	Table Read Protection bit
  4551                           ;	EBTR2 = 0x1, unprogrammed default
  4552                           ;	Table Read Protection bit
  4553                           ;	EBTR3 = 0x1, unprogrammed default
  4554  30000C                     	org	3145740
  4555  30000C  0F                 	db	15
  4556                           
  4557                           ;Config register CONFIG7H @ 0x30000D
  4558                           ;	unspecified, using default values
  4559                           ;	Boot Block Table Read Protection bit
  4560                           ;	EBTRB = 0x1, unprogrammed default
  4561  30000D                     	org	3145741
  4562  30000D  40                 	db	64
  4563                           tosu	equ	0xFFF
  4564                           tosh	equ	0xFFE
  4565                           tosl	equ	0xFFD
  4566                           stkptr	equ	0xFFC
  4567                           pclatu	equ	0xFFB
  4568                           pclath	equ	0xFFA
  4569                           pcl	equ	0xFF9
  4570                           tblptru	equ	0xFF8
  4571                           tblptrh	equ	0xFF7
  4572                           tblptrl	equ	0xFF6
  4573                           tablat	equ	0xFF5
  4574                           prodh	equ	0xFF4
  4575                           prodl	equ	0xFF3
  4576                           indf0	equ	0xFEF
  4577                           postinc0	equ	0xFEE
  4578                           postdec0	equ	0xFED
  4579                           preinc0	equ	0xFEC
  4580                           plusw0	equ	0xFEB
  4581                           fsr0h	equ	0xFEA
  4582                           fsr0l	equ	0xFE9
  4583                           wreg	equ	0xFE8
  4584                           indf1	equ	0xFE7
  4585                           postinc1	equ	0xFE6
  4586                           postdec1	equ	0xFE5
  4587                           preinc1	equ	0xFE4
  4588                           plusw1	equ	0xFE3
  4589                           fsr1h	equ	0xFE2
  4590                           fsr1l	equ	0xFE1
  4591                           bsr	equ	0xFE0
  4592                           indf2	equ	0xFDF
  4593                           postinc2	equ	0xFDE
  4594                           postdec2	equ	0xFDD
  4595                           preinc2	equ	0xFDC
  4596                           plusw2	equ	0xFDB
  4597                           fsr2h	equ	0xFDA
  4598                           fsr2l	equ	0xFD9
  4599                           status	equ	0xFD8

Data Sizes:
    Strings     417
    Constant    16
    Data        40
    BSS         18
    Persistent  0
    Stack       0

Auto Spaces:
    Space          Size  Autos    Used
    COMRAM          127     29      87
    BANK0           128      0       0
    BANK1           256      0       0
    BANK2           256      0       0
    BANK3           256      0       0
    BANK4           256      0       0
    BANK5           256      0       0

Pointer List with Targets:

    msgs	PTR unsigned char [4][5] size(2) Largest target is 17
		 -> STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), STR_17(CODE[17]), 
		 -> STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[17]), STR_13(CODE[17]), 
		 -> STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), STR_9(CODE[17]), 
		 -> STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), STR_5(CODE[17]), 
		 -> STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), STR_1(CODE[17]), 

    lcdString@msg	PTR unsigned char  size(2) Largest target is 17
		 -> STR_29(CODE[17]), STR_28(CODE[17]), STR_27(CODE[17]), STR_26(CODE[17]), 
		 -> STR_25(CODE[12]), STR_24(CODE[5]), STR_23(CODE[4]), STR_22(CODE[12]), 
		 -> STR_21(CODE[12]), STR_20(CODE[17]), STR_19(CODE[17]), STR_18(CODE[17]), 
		 -> STR_17(CODE[17]), STR_16(CODE[17]), STR_15(CODE[17]), STR_14(CODE[17]), 
		 -> STR_13(CODE[17]), STR_12(CODE[17]), STR_11(CODE[17]), STR_10(CODE[17]), 
		 -> STR_9(CODE[17]), STR_8(CODE[17]), STR_7(CODE[17]), STR_6(CODE[17]), 
		 -> STR_5(CODE[17]), STR_4(CODE[17]), STR_3(CODE[17]), STR_2(CODE[17]), 
		 -> STR_1(CODE[17]), 


Critical Paths under _main in COMRAM

    _main->_smLoop
    _timerReset->_getTime
    _smLoop->_outputPrint
    _teste1->_pwmFrequency
    _pwmSet1->___lwdiv
    _pwmFrequency->___aldiv
    _setTime->_getTime
    _setAlarmLevel->_getAlarmLevel
    _outputPrint->_lcdInt
    _outputPrint->_lcdIntAlarme
    _lcdString->_lcdData
    _lcdIntAlarme->___awmod
    _lcdInt->___awmod
    _lcdData->_Delay40us
    ___awmod->___awdiv
    _lcdInit->_lcdCommand
    _lcdCommand->_Delay2ms
    _Delay2ms->_Delay40us

Critical Paths under _main in BANK0

    None.

Critical Paths under _main in BANK1

    None.

Critical Paths under _main in BANK2

    None.

Critical Paths under _main in BANK3

    None.

Critical Paths under _main in BANK4

    None.

Critical Paths under _main in BANK5

    None.

Call Graph Tables:

 ---------------------------------------------------------------------------------
 (Depth) Function   	        Calls       Base Space   Used Autos Params    Refs
 ---------------------------------------------------------------------------------
 (0) _main                                                 0     0      0   16446
                          _eventInit
                            _getTime
                            _lcdInit
                            _pwmInit
                             _smLoop
                          _timerInit
                         _timerReset
                          _timerWait
                            _varInit
 ---------------------------------------------------------------------------------
 (1) _varInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerWait                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _timerReset                                           4     2      2     167
                                              2 COMRAM     4     2      2
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (1) _timerInit                                            0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _smLoop                                               5     5      0   16005
                                             24 COMRAM     5     5      0
                          _eventRead
                      _getAlarmLevel
                        _getLanguage
                           _getState
                            _getTime
                        _outputPrint
                      _setAlarmLevel
                        _setLanguage
                           _setState
                            _setTime
                             _teste1
 ---------------------------------------------------------------------------------
 (2) _teste1                                               3     3      0    2896
                                             16 COMRAM     3     3      0
                           _adcRead1
                           _adcRead2
                      _getAlarmLevel
                       _pwmFrequency
                            _pwmSet1
 ---------------------------------------------------------------------------------
 (3) _pwmSet1                                              5     5      0    2220
                                              7 COMRAM     5     5      0
                            ___lwdiv
                             ___wmul
 ---------------------------------------------------------------------------------
 (4) ___wmul                                               6     2      4    1663
                                              0 COMRAM     6     2      4
 ---------------------------------------------------------------------------------
 (4) ___lwdiv                                              7     3      4     466
                                              0 COMRAM     7     3      4
 ---------------------------------------------------------------------------------
 (3) _pwmFrequency                                         2     0      2     626
                                             14 COMRAM     2     0      2
                            ___aldiv
 ---------------------------------------------------------------------------------
 (4) ___aldiv                                             14     6      8     452
                                              0 COMRAM    14     6      8
 ---------------------------------------------------------------------------------
 (2) _setTime                                              2     0      2     174
                                              2 COMRAM     2     0      2
                            _getTime (ARG)
 ---------------------------------------------------------------------------------
 (2) _setState                                             1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setLanguage                                          1     1      0      22
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (2) _setAlarmLevel                                        2     0      2     174
                                              2 COMRAM     2     0      2
                      _getAlarmLevel (ARG)
 ---------------------------------------------------------------------------------
 (2) _outputPrint                                          8     4      4   12226
                                             16 COMRAM     8     4      4
                           _adcRead1
                           _adcRead2
                      _getAlarmLevel
                        _getLanguage
                           _getState (ARG)
                            _getTime
                         _lcdCommand
                             _lcdInt
                       _lcdIntAlarme
                          _lcdString
 ---------------------------------------------------------------------------------
 (3) _lcdString                                            6     4      2    1146
                                              2 COMRAM     6     4      2
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdIntAlarme                                         2     0      2    5205
                                             14 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                           _adcRead1 (ARG)
                           _adcRead2 (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (3) _lcdInt                                               2     0      2    5227
                                             14 COMRAM     2     0      2
                            ___awdiv
                            ___awmod
                      _getAlarmLevel (ARG)
                            _getTime (ARG)
                            _lcdData
 ---------------------------------------------------------------------------------
 (4) _lcdData                                              1     1      0      68
                                              1 COMRAM     1     1      0
                          _Delay40us
 ---------------------------------------------------------------------------------
 (4) ___awmod                                              6     2      4    2576
                                              8 COMRAM     6     2      4
                            ___awdiv (ARG)
 ---------------------------------------------------------------------------------
 (4) ___awdiv                                              8     4      4    2276
                                              0 COMRAM     8     4      4
 ---------------------------------------------------------------------------------
 (3) _getTime                                              2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _getLanguage                                          0     0      0       0
 ---------------------------------------------------------------------------------
 (3) _getAlarmLevel                                        2     0      2       0
                                              0 COMRAM     2     0      2
 ---------------------------------------------------------------------------------
 (3) _adcRead2                                             7     5      2      25
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (3) _adcRead1                                             7     5      2      25
                                              0 COMRAM     7     5      2
 ---------------------------------------------------------------------------------
 (2) _getState                                             0     0      0       0
 ---------------------------------------------------------------------------------
 (2) _eventRead                                            7     5      2     137
                                              0 COMRAM     7     5      2
                             _kpRead
 ---------------------------------------------------------------------------------
 (3) _kpRead                                               0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _pwmInit                                              0     0      0       0
 ---------------------------------------------------------------------------------
 (1) _lcdInit                                              0     0      0     274
                           _Delay2ms
                         _lcdCommand
 ---------------------------------------------------------------------------------
 (3) _lcdCommand                                           1     1      0     182
                                              2 COMRAM     1     1      0
                           _Delay2ms
                          _Delay40us
 ---------------------------------------------------------------------------------
 (4) _Delay2ms                                             1     1      0      92
                                              1 COMRAM     1     1      0
                          _Delay40us
 ---------------------------------------------------------------------------------
 (5) _Delay40us                                            1     1      0      46
                                              0 COMRAM     1     1      0
 ---------------------------------------------------------------------------------
 (1) _eventInit                                            0     0      0       0
                             _kpInit
 ---------------------------------------------------------------------------------
 (2) _kpInit                                               0     0      0       0
 ---------------------------------------------------------------------------------
 Estimated maximum stack depth 5
 ---------------------------------------------------------------------------------

 Call Graph Graphs:

 _main (ROOT)
   _eventInit
     _kpInit
   _getTime
   _lcdInit
     _Delay2ms
       _Delay40us
     _lcdCommand
       _Delay2ms
         _Delay40us
       _Delay40us
   _pwmInit
   _smLoop
     _eventRead
       _kpRead
     _getAlarmLevel
     _getLanguage
     _getState
     _getTime
     _outputPrint
       _adcRead1
       _adcRead2
       _getAlarmLevel
       _getLanguage
       _getState (ARG)
       _getTime (ARG)
       _lcdCommand (ARG)
         _Delay2ms
           _Delay40us
         _Delay40us
       _lcdInt (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         _getAlarmLevel (ARG)
         _getTime (ARG)
         _lcdData (ARG)
           _Delay40us
       _lcdIntAlarme (ARG)
         ___awdiv
         ___awmod
           ___awdiv (ARG)
         _adcRead1 (ARG)
         _adcRead2 (ARG)
         _lcdData (ARG)
           _Delay40us
       _lcdString (ARG)
         _lcdData
           _Delay40us
     _setAlarmLevel
       _getAlarmLevel (ARG)
     _setLanguage
     _setState
     _setTime
       _getTime (ARG)
     _teste1
       _adcRead1
       _adcRead2
       _getAlarmLevel
       _pwmFrequency
         ___aldiv
       _pwmSet1
         ___lwdiv
         ___wmul
   _timerInit
   _timerReset
     _getTime (ARG)
   _timerWait
   _varInit

 Address spaces:
Name               Size   Autos  Total    Cost      Usage
BIGRAM             5FF      0       0      17        0.0%
EEDATA             100      0       0       0        0.0%
BITBANK5           100      0       0      16        0.0%
BANK5              100      0       0      14        0.0%
BITBANK4           100      0       0      12        0.0%
BANK4              100      0       0      13        0.0%
BITBANK3           100      0       0      10        0.0%
BANK3              100      0       0      11        0.0%
BITBANK2           100      0       0       8        0.0%
BANK2              100      0       0       9        0.0%
BITBANK1           100      0       0       6        0.0%
BANK1              100      0       0       7        0.0%
BITBANK0            80      0       0       4        0.0%
BANK0               80      0       0       5        0.0%
BITCOMRAM           7F      0       0       0        0.0%
COMRAM              7F     1D      57       1       68.5%
BITSFR               0      0       0     200        0.0%
SFR                  0      0       0     200        0.0%
STACK                0      0       0       2        0.0%
NULL                 0      0       0       0        0.0%
ABS                  0      0      57      15        0.0%
DATA                 0      0      57       3        0.0%
CODE                 0      0       0       0        0.0%


Microchip Technology PIC18 Macro Assembler V2.20 build 20200408173844 
Symbol Table                                                                                   Wed Jul 08 16:11:28 2020

     __end_of_setAlarmLevel 6FF4             adcRead2@ADvalor 002E                           l9 7022  
              lcdString@msg 002B                          l21 6FD4                          l24 7014  
                        l16 7480                          l34 7090                          l42 705C  
                        l50 76BE                          l29 7074                          l46 789A  
                        l39 716E                          l56 72C2                          l59 7320  
            setTime@newTime 002B                ___awdiv@sign 002E                          _v0 0055  
                        _v1 0054                          _v2 0053                          _v3 0052  
                        _de 0057         ___wmul@multiplicand 002B                         l124 7E4A  
                       l133 70F6                         l127 738C                         l136 7046  
                       l320 7BB0                         l401 6FBA                         l404 6FFC  
                       l413 71E0                         l421 7238                         l333 7024  
                       l422 726C                         l342 6FCA                         l415 71EE  
                       l416 7222                         l504 79A6                         l336 7032  
                       l425 711C                         l419 722A                         l371 6FC2  
                       l339 70D0                         l380 6FDE                         l365 70AE  
                       l374 6FE8                         l368 6FB6                         l377 7006  
                       l386 6FF2                         l398 77A0                         l656 75F4  
                       l923 7400                         l916 73F8                         l669 7530  
                       u730 7032                         u731 702E                         u900 7954  
                       u901 7950                         u910 7986                         u911 7982  
                       u840 7074                         u920 7544                         u841 7070  
                       u921 7540                         u850 7090                         u930 755E  
                       u851 708C                         u931 755A                         u940 7584  
                       u860 78AE                         u941 7580                         u861 78AA  
                       u950 75A2                         u870 78D0                         u951 759E  
                       u871 78CC                         u960 75BE                         u880 790A  
                       u961 75BA                         u881 7906                         u970 75E4  
                       u890 792C                         u971 75E0                         u891 7928  
                       u980 7494                         u981 7490                         u990 74AE  
                       u991 74AA                ___awmod@sign 0036                         wreg 000FE8  
                      l2100 7550                        l2014 7062                        l2110 7584  
                      l2102 755E                        l2030 704A                        l2016 7064  
                      l2008 705E                        l2024 707A                        l2200 7148  
                      l2120 75BE                        l2112 758C                        l2104 7566  
                      l2040 7058                        l2032 704E                        l2026 707E  
                      l2018 7076                        l2210 7162                        l2202 714C  
                      l2130 75E4                        l2122 75C6                        l2114 7594  
                      l2106 756A                        l2034 7052                        l2050 78A0  
                      l2042 70F8                        l2028 7080                        l2212 716A  
                      l2204 7150                        l2300 7416                        l2132 75EC  
                      l2124 75C8                        l2116 75A2                        l2108 7572  
                      l2140 7494                        l2036 7054                        l2220 77BE  
                      l2060 78E0                        l2052 78AE                        l2044 7114  
                      l2206 7152                        l2310 745A                        l2302 742E  
                      l2126 75CE                        l2118 75A8                        l2150 74C8  
                      l2142 749C                        l2038 7056                        l2222 77EE  
                      l2214 77A2                        l2230 75F6                        l2070 791E  
                      l2062 78E4                        l2054 78BE                        l2208 7154  
                      l2312 7468                        l2304 743C                        l2128 75D4  
                      l2160 7504                        l2152 74D0                        l2144 74A0  
                      l2136 7482                        l2224 781E                        l2216 77B0  
                      l2240 7672                        l2232 7604                        l2320 7BB2  
                      l2080 7966                        l2072 792C                        l2064 78F4  
                      l2056 78C2                        l2048 789C                        l2400 76EE  
                      l2306 7444                        l2314 7470                        l2162 750A  
                      l2154 74D8                        l2146 74AE                        l2138 7486  
                      l2226 784E                        l2218 77B8                        l2242 76A2  
                      l2234 760C                        l2250 729A                        l2330 7C2A  
                      l2322 7BC6                        l2082 7970                        l2074 7936  
                      l2066 790A                        l2058 78D0                        l2410 778E  
                      l2402 771C                        l2420 72E0                        l1700 7034  
                      l2316 7478                        l2308 7452                        l2260 71F4  
                      l2252 6FE0                        l2092 7532                        l2156 74E6  
                      l2164 7510                        l2148 74B6                        l2228 787E  
                      l2236 7612                        l2244 726E                        l2340 7C9C  
                      l2324 7BCC                        l2332 7C36                        l2076 7954  
                      l2068 7912                        l2084 7976                        l2180 73B8  
                      l2172 738E                        l2412 7794                        l2404 774A  
                      l2500 7ADC                        l1470 700A                        l2430 72F4  
                      l2422 72E2                        l2414 72C4                        l1702 7038  
                      l2262 71FA                        l2270 7228                        l2254 6FD6  
                      l2094 7536                        l2166 7520                        l2158 74FC  
                      l2238 7642                        l2246 727A                        l2350 7D1A  
                      l2342 7CAC                        l2334 7C48                        l2326 7C14  
                      l2086 7986                        l2078 7964                        l2190 73EC  
                      l2182 73C6                        l2174 7396                        l2406 7778  
                      l2510 7B22                        l2502 7AEE                        l1472 700E  
                      l2440 730E                        l2432 72FA                        l2424 72E6  
                      l2416 72DC                        l1704 703C                        l2264 7202  
                      l2256 71DA                        l2272 723E                        l2280 6FB8  
                      l2096 7544                        l2168 7528                        l2248 7296  
                      l2360 7D58                        l2352 7D20                        l2336 7C4E  
                      l2344 7CB8                        l2328 7C1A                        l2088 7996  
                      l2192 73F2                        l2184 73CC                        l2176 73A8  
                      l2408 777E                        l2512 7B28                        l2504 7AF8  
                      l2520 7B88                        l1474 7010                        l2442 7314  
                      l2434 72FE                        l2426 72EA                        l2418 72DE  
                      l2194 6FCC                        l2258 71DE                        l2274 7244  
                      l2098 754C                        l2370 7DCA                        l2354 7D2C  
                      l2346 7CCC                        l2362 7D64                        l2338 7C96  
                      l2186 73E2                        l2178 73B0                        l2290 7366  
                      l2522 7B8C                        l2514 7B3A                        l2506 7B0A  
                      l2450 70BE                        l2530 7170                        l1468 7008  
                      l1660 701A                        l2444 731A                        l2436 7304  
                      l2428 72F0                        l2196 6FD0                        l2276 724C  
                      l2268 7224                        l2380 7E1E                        l2372 7DDE  
                      l2364 7D76                        l2356 7D3C                        l2348 7CD2  
                      l2188 73EA                        l2292 737E                        l2284 7324  
                      l2524 7B98                        l2508 7B10                        l2460 79B4  
                      l2452 70C6                        l2540 7194                        l2532 7178  
                      l2438 7308                        l2382 7E2A                        l2374 7DEA  
                      l2366 7D7C                        l2358 7D48                        l2390 6FFE  
                      l2294 70D2                        l2286 7342                        l2470 7A12  
                      l2462 79C6                        l2518 7B44                        l2454 70CA  
                      l2446 70B0                        l2542 7198                        l2534 717C  
                      l2296 7402                        l2384 7E3E                        l2376 7DFE  
                      l2368 7DC4                        l2392 6FF6                        l2288 735E  
                      l2480 7A38                        l2464 79DA                        l2456 70CE  
                      l2448 70BA                        l2536 7180                        l1658 7016  
                      l2298 740A                        l2394 6FB4                        l2378 7E0A  
                      l2386 6FBE                        l2490 7A96                        l2482 7A4A  
                      l2474 7A1C                        l2466 79EC                        l2458 79A8  
                      l2538 7184                        l2388 6FEA                        l2492 7AA0  
                      l2484 7A5E                        l2476 7A1C                        l2468 7A00  
                      l2398 76C0                        l2494 7AB2                        l2486 7A70  
                      l2478 7A2E                        l1694 6FC4                        l1790 7024  
                      l2584 7B5A                        l2496 7ABE                        l2488 7A84  
                      l1696 6FC8                        l2498 7AD0                        l1698 7092  
                      STR_1 7F6D                        STR_2 7FA0                        STR_3 7F8F  
                      STR_4 7FE4                        STR_5 7F7E                        STR_6 7F29  
                      STR_7 7F3A                        STR_8 7FC2                        STR_9 7F4B  
                      u1000 74C8                        u1001 74C4                        u1010 74E6  
                      u1011 74E2                        u1020 74FC                        u1100 72C2  
                      u1021 74F8                        u1101 72BE                        u1110 71EE  
                      u1030 7520                        u1111 71EA                        u1031 751C  
                      u1200 7C48                        u1040 73A8                        u1201 7C44  
                      u1041 73A4                        u1130 7238                        u1210 7CCC  
                      u1050 73C6                        u1131 7234                        u1211 7CC8  
                      u1051 73C2                        u1220 7D76                        u1060 73E2  
                      u1300 7778                        u1125 720E                        u1221 7D72  
                      u1061 73DE                        u1301 7774                        u1070 7162  
                      u1150 742E                        u1230 7DDE                        u1310 79C6  
                      u1071 715E                        u1151 742A                        u1231 7DDA  
                      u1311 79C2                        u1160 743C                        u1080 77B0  
                      u1240 7DFE                        u1400 7AEE                        u1320 79EC  
                      u1161 7438                        u1145 7258                        u1081 77AC  
                      u1241 7DFA                        u1401 7AEA                        u1321 79E8  
                      u1170 7452                        u1090 7604                        u1250 7E1E  
                      u1410 7B0A                        u1330 7A12                        u1171 744E  
                      u1091 7600                        u1251 7E1A                        u1411 7B06  
                      u1331 7A0E                        u1180 7468                        u1260 7E3E  
                      u1420 7B22                        u1340 7A2E                        u1181 7464  
                      u1261 7E3A                        u1421 7B1E                        u1341 7A2A  
                      u1190 7BC6                        u1270 76EE                        u1430 7B3A  
                      u1350 7A4A                        u1191 7BC2                        u1271 76EA  
                      u1431 7B36                        u1351 7A46                        u1280 771C  
                      u1360 7A70                        u1281 7718                        u1361 7A6C  
                      u1290 774A                        u1370 7A96                        u1291 7746  
                      u1371 7A92                        u1380 7AB2                        u1381 7AAE  
                      u1390 7AD0                        u1391 7ACC                 _outputPrint 7BB2  
                      _main 7170                        _msgs 0001                        _time 004A  
                      fsr2h 000FDA                        fsr1l 000FE1                        fsr2l 000FD9  
                      prodh 000FF4                        prodl 000FF3                        start 0000  
              ___param_bank 000000             __end_of___aldiv 79A8                       ?_main 0029  
           __end_of___awdiv 75F6                       STR_10 7EE5                       STR_11 7F18  
                     STR_20 7E7F                       STR_12 7FD3                       STR_21 7E62  
                     STR_13 7F5C                       STR_22 7E62                       STR_14 7EF6  
                     STR_23 7FFA                       STR_15 7F07                       STR_24 7FF5  
                     STR_16 7FB1                       STR_25 7E62                       STR_17 7E90  
                     STR_26 7ED4                       STR_18 7E5D                       STR_27 7EA1  
                     STR_19 7E6E                       STR_28 7EB2             __end_of___awmod 7532  
                     STR_29 7EC3             ___awdiv@divisor 002B             __end_of___lwdiv 7402  
           ___awdiv@counter 002D             __end_of_lcdData 705E             __end_of_lcdInit 7322  
           __end_of_getTime 6FEA          outputPrint@numTela 0039                       _valor 004C  
                     _state 0051             __end_of_varInit 70B0             __end_of_setTime 7008  
                     tablat 000FF5             __end_of_pwmSet1 738E             __end_of_pwmInit 7048  
                     status 000FD8            __end_of_Delay2ms 7092        __end_of_lcdIntAlarme 76C0  
           __initialization 71A4                __end_of_main 71A4          __size_of_Delay40us 0018  
              ?_setLanguage 0029                      ??_main 0046               __activetblptr 000002  
      __size_of_getLanguage 0004                 eventRead@ev 002C            __end_of_adcRead1 7224  
          __end_of_adcRead2 726E            ___awdiv@dividend 0029       __end_of_getAlarmLevel 6FE0  
          __end_of_getState 6FB8                   ??___aldiv 0031                      ___wmul 70F8  
                 ??___awdiv 002D                   ??___awmod 0035                      _lcdInt 77A2  
                 ??___lwdiv 002D                      _kpInit 7008                      _kpRead 6FCC  
                    clear_0 71CA                      _smLoop 79A8            ___awdiv@quotient 002F  
           ___awmod@divisor 0033                   ??_lcdData 002A                      _teste1 76C0  
                 ??_lcdInit 002C             ___awmod@counter 0035                   ??_getTime 002B  
          __end_of_setState 6FC4                __pdataCOMRAM 0001                __mediumconst 7E4C  
                 ??_varInit 0029                   ??_setTime 002D                      tblptrh 000FF7  
                    tblptrl 000FF6                      tblptru 000FF8                   ??_pwmSet1 0030  
                 ??_pwmInit 0029           __end_of_Delay40us 7076                  __accesstop 0080  
   __end_of__initialization 71D0               ___rparam_used 000001              __pcstackCOMRAM 0029  
                 ?_Delay2ms 0029          __size_of_lcdString 0056                ?_outputPrint 0039  
     __size_of_lcdIntAlarme 00CA                  _alarmLevel 0048          __size_of_eventInit 000E  
        __size_of_eventRead 0080                  _lcdCommand 7146                     ?___wmul 0029  
                   ?_lcdInt 0037                     ?_kpInit 0029                     ?_kpRead 0029  
                 ?_adcRead1 0029                eventRead@key 002E                   ?_adcRead2 0029  
                   ?_smLoop 0029                     ?_teste1 0029          __size_of_timerInit 0008  
        __size_of_timerWait 0010        __size_of_setLanguage 000A                  ??_Delay2ms 002A  
              _lcdIntAlarme 75F6                   ?_getState 0029      __size_of_setAlarmLevel 000A  
                   __Hparam 0000                   ?_setState 0029                     __Lparam 0000  
         __end_of_lcdString 72C4                     ___aldiv 789C                     ___awdiv 7532  
                   ___awmod 7482             __size_of___wmul 0026                     ___lwdiv 738E  
           __size_of_lcdInt 00FA                  ??_adcRead1 002B                  ??_adcRead2 002B  
           __size_of_kpInit 000E             __size_of_kpRead 000A                     __pcinit 71A4  
                   _lcdData 7048                     __ramtop 0600             __size_of_smLoop 020A  
                   _lcdInit 72C4                     __ptext0 7170                     __ptext1 7092  
                   __ptext2 7024                     __ptext3 70B0                     _getTime 6FE0  
                   __ptext4 6FC4                     __ptext5 79A8                     __ptext6 76C0  
                   __ptext7 7322                     __ptext8 70F8                     __ptext9 738E  
           __size_of_teste1 00E2           __end_of_eventInit 7024           __end_of_eventRead 7482  
                   _display 0056                     _key_ant 004E            ___awmod@dividend 0031  
          ___aldiv@dividend 0029                     _varInit 7092                     _setTime 6FFE  
                   _pwmSet1 7322                     _pwmInit 7034                  ??_getState 0029  
                 Delay2ms@i 002A        end_of_initialization 71D0               __Lmediumconst 7E4C  
             ?_pwmFrequency 0037           __end_of_timerInit 6FCC           __end_of_timerWait 7034  
                ??_setState 0029            ___aldiv@quotient 0033                     postdec1 000FE5  
                   postdec2 000FDD                 ?_lcdCommand 0029                     postinc0 000FEE  
                   postinc2 000FDE               _setAlarmLevel 6FEA               ??_getLanguage 0029  
                _timerReset 70B0              _valor@ssd$F238 7E4D                  lcdString@i 002F  
            ??_pwmFrequency 0039                   _Delay40us 705E        __size_of_outputPrint 029A  
            ?_setAlarmLevel 002B           outputPrint@idioma 003B              __end_of___wmul 711E  
             __pidataCOMRAM 711E              __end_of_lcdInt 789C              __end_of_kpInit 7016  
            __end_of_kpRead 6FD6      __end_of_valor@ssd$F238 7E5D              __end_of_smLoop 7BB2  
            __end_of_teste1 77A2      __size_of_getAlarmLevel 000A         start_initialization 71A4  
       __end_of_getLanguage 6FBC           __size_of_Delay2ms 001C         __size_of_lcdCommand 002A  
                ?_Delay40us 0029                smLoop@evento 0045                    ??___wmul 002D  
                  ??_lcdInt 0039                    ??_kpInit 0029                    ??_kpRead 0029  
               ?_timerReset 002B                    ??_smLoop 0041                    ??_teste1 0039  
         __size_of_adcRead1 004A           __size_of_adcRead2 004A                 __pbssCOMRAM 0046  
               _alarmLevel1 0046            setState@newState 0029           __size_of_getState 0004  
             _getAlarmLevel 6FD6             ??_setAlarmLevel 002D            ___lwdiv@dividend 0029  
             __pmediumconst 7E4C                    ?___aldiv 0029                    ?___awdiv 0029  
         __size_of_setState 0008                    ?___awmod 0031                    ?___lwdiv 0029  
                 _lcdString 726E                 _getLanguage 6FB8                    ?_lcdData 0029  
             ??_setLanguage 0029                    ?_lcdInit 0029                    ?_getTime 0029  
      __end_of_pwmFrequency 70F8               lcdCommand@cmd 002B                    ?_varInit 0029  
                  ?_setTime 002B                   _eventInit 7016                   _eventRead 7402  
                  ?_pwmSet1 0029                    ?_pwmInit 0029            ___lwdiv@quotient 002D  
          pwmFrequency@freq 0037  setAlarmLevel@newAlarmLevel 002B             ___aldiv@divisor 002D  
           ___aldiv@counter 0031         __size_of_timerReset 0022                 ??_Delay40us 0029  
            ___wmul@product 002D              ?_getAlarmLevel 0029                   lcdInt@val 0037  
              ??_lcdCommand 002B                   _timerInit 6FC4                   _timerWait 7024  
                pwmSet1@val 0033                  ?_lcdString 002B           ___wmul@multiplier 0029  
                  _Delay2ms 7076                  ?_eventInit 0029                  ?_eventRead 0029  
       __end_of_setLanguage 6FFE            timerReset@ciclos 002D                   copy_data0 71B8  
        __end_of_lcdCommand 7170                lcdData@valor 002A                    __Hrparam 0000  
                  __Lrparam 0000                  ?_timerInit 0029                  ?_timerWait 0029  
          __size_of___aldiv 010C            __size_of___awdiv 00C4            __size_of___awmod 00B0  
                  _adcRead1 71DA                    _adcRead2 7224            __size_of___lwdiv 0074  
           pwmSet1@porcento 0032            __size_of_lcdData 0016            __size_of_lcdInit 005E  
          __size_of_getTime 000A             ___lwdiv@divisor 002B             ___lwdiv@counter 002F  
          __size_of_varInit 001E            __size_of_setTime 000A                    __ptext10 70D2  
                  __ptext11 789C                    __ptext20 7048                    __ptext12 6FFE  
                  __ptext21 7482                    __ptext13 6FBC                    __ptext30 6FCC  
                  __ptext22 7532                    __ptext14 6FF4                    __ptext31 7034  
                  __ptext23 6FE0                    __ptext15 6FEA                    __ptext32 72C4  
                  __ptext24 6FB8                    __ptext16 7BB2                    __ptext33 7146  
                  __ptext25 6FD6                    __ptext17 726E                    __ptext34 7076  
                  __ptext26 7224                    __ptext18 75F6                    __ptext35 705E  
                  __ptext27 71DA                    __ptext19 77A2                    __ptext36 7016  
                  __ptext28 6FB4                    __ptext37 7008                    __ptext29 7402  
                  _getState 6FB4            __size_of_pwmSet1 006C            __size_of_pwmInit 0014  
               _smLoop$1211 0043               ??_outputPrint 003D                    _language 0050  
           ??_getAlarmLevel 002B               __size_of_main 0034            lcdIntAlarme@val1 0037  
                  _setState 6FBC                  Delay40us@i 0029       __size_of_pwmFrequency 0026  
               ??_lcdString 002D                ??_timerReset 002D                 _setLanguage 6FF4  
    setLanguage@newLanguage 0029             timerReset@tempo 002B               ?_lcdIntAlarme 0037  
               ??_eventInit 0029                 ??_eventRead 002B          __end_of_timerReset 70D2  
              _pwmFrequency 70D2         __end_of_outputPrint 7E4C                 ??_timerInit 0029  
               ??_timerWait 0029                ?_getLanguage 0029              ??_lcdIntAlarme 0039  
              ___aldiv@sign 0032             adcRead1@ADvalor 002E  
